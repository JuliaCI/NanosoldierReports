cset: moving following pidspec: 1768580
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.08950862 seconds)
loading group "string"... done (took 0.251337561 seconds)
loading group "linalg"... done (took 3.644321143 seconds)
loading group "parallel"... done (took 0.023162999 seconds)
loading group "find"... done (took 1.292480556 seconds)
loading group "tuple"... done (took 0.911383798 seconds)
loading group "dates"... done (took 0.233125287 seconds)
loading group "micro"... done (took 0.056183654 seconds)
loading group "io"... done (took 1.349665322 seconds)
loading group "frontend"... done (took 0.010433135 seconds)
loading group "scalar"... done (took 4.651196684 seconds)
loading group "sparse"... done (took 3.319930548 seconds)
loading group "alloc"... done (took 0.015344367 seconds)
loading group "broadcast"... done (took 0.353361662 seconds)
loading group "union"... done (took 3.412646436 seconds)
loading group "simd"... done (took 2.726963246 seconds)
loading group "random"... done (took 3.067483091 seconds)
loading group "inference"... done (took 2.038544621 seconds)
loading group "problem"... done (took 1.100115551 seconds)
loading group "array"... done (took 4.433322481 seconds)
loading group "misc"... done (took 0.809848179 seconds)
loading group "sort"... done (took 0.34527541 seconds)
loading group "collection"... done (took 5.946750058 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.435364565 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.066146973 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.242744047 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.066000793 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.256525004 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.075381887 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.078839186 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.039990891 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.818699115 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.14875261 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.211352546 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.348015877 seconds)
done (took 4.670966016 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.231908697 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023661806 seconds)
    (2/2) benchmarking "String"...
    done (took 0.117001389 seconds)
  done (took 0.921620574 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.128985153 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.02153026 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021362684 seconds)
  done (took 0.950809685 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021347314 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.083398151 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.022560935 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.023081571 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.023612784 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.023082627 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.02272917 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.022908475 seconds)
  done (took 0.999971294 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.031873784 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.020126885 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020593355 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.020379979 seconds)
  done (took 0.870124475 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.020948611 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.075580381 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.0199606 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020012799 seconds)
  done (took 0.912443735 seconds)
done (took 5.696838207 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.160927892 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.845368421 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.850003828 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.16776431 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.296012963 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.292957409 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.072727084 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.212599204 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.130649829 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.027012 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.157664939 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.03204251 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.079036118 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.444323973 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025065366 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.127048667 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.660376308 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.040211714 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.088313509 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.327312779 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.021303542 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038329437 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.041249728 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.021853063 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.246839603 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.123300626 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.693308433 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.027955624 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.021319973 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049389581 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.023348046 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.026919154 seconds)
  done (took 9.184137444 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.133392099 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.127672545 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022432476 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.073707449 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.047214907 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024655075 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.028494262 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022602807 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.038257315 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.073222164 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.038826231 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.135435064 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021665845 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023980919 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.131213123 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.144768223 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.034755067 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036924751 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021799085 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036533329 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.058636527 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.032295541 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.026253118 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.025912319 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.086460673 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.122569183 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.054873053 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.052178134 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022123491 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.02468388 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.069561165 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.074078101 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022568743 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020669847 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.067636638 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.049837011 seconds)
  done (took 2.85074011 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.497862694 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094853746 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.128435039 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.170604462 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.057568095 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.067186271 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.135633296 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064501191 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.045657941 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.022495828 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.177377114 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.649640024 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.151077527 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.061160094 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023981255 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.242413469 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.192572416 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.124587161 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.020029438 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020180237 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.116913492 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023216732 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.145823392 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.020873055 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.100083565 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.125320252 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.024873724 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023178254 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064578214 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.126205415 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020410014 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.085700962 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.041379416 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025794737 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.145089239 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021276286 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019681329 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046197482 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.031425318 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.020822482 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.021070751 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025096151 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020618247 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.057575768 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02475526 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.518572578 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024196054 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.587988203 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.996138047 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.02037169 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.020860689 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.051409248 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020746891 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022267443 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.677401107 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.024745062 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.02283134 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.363928548 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022410621 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.021706475 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.021903816 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.046151833 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022300699 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023731835 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.021598811 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.051105474 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.839050503 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.024532111 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.050746428 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020490245 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021351786 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020964311 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.350781501 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.020404165 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.109748041 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020485384 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024325369 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022079154 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021179803 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.041194353 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.043329183 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.048210885 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.024977723 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022789064 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021674129 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.636164392 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.145590048 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020299075 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.021600987 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.120844975 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.019794283 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021073655 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.022898089 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.041548835 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023475148 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020024743 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056452018 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.021359649 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.115276986 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.192816486 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.021796165 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019834832 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.370033801 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.02655835 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059201094 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.065212188 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021255889 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.020815836 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.021216965 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020118224 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.020473579 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019913455 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.021844647 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021139983 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020344493 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02097306 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.020440812 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.021940723 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022104115 seconds)
  done (took 20.419620909 seconds)
done (took 34.730122058 seconds)
(4/23) benchmarking "parallel"...
done (took 0.921999154 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.106561061 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047478903 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019917153 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.090949717 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.020534171 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.092266839 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.093701383 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.087691078 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.020593788 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.020717132 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.020613412 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.097336928 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.092991401 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.020330625 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089381155 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.095546486 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.020233273 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019426676 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.020075452 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.020409965 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.020569332 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.01993186 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.020419083 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.020447141 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.091666414 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.020580388 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.01977028 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.091646453 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.020208181 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089078883 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.019993297 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.020070924 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.020373228 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.090764599 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.02046443 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.089952419 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019241749 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.02009887 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.02017619 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.020265445 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.020293864 seconds)
  done (took 2.739884629 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038163406 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036825117 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.051170455 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018385832 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028143366 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037256551 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018152032 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036857159 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.055340261 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037555143 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037312612 seconds)
  done (took 1.253382984 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.036500847 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036465758 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.04468585 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018389562 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02914138 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037445019 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018184476 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037348084 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.050991197 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037630577 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037370107 seconds)
  done (took 1.229086187 seconds)
done (took 6.054294814 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.139731031 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.113433444 seconds)
  done (took 1.093330384 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.407151835 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.197666742 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.123852573 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.21904772 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.113909554 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.142442978 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.413916449 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.139754452 seconds)
  done (took 3.639113655 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.05307183 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.134686346 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022327463 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021029012 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021215745 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020991613 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.022203931 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021253659 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020576662 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022678316 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022356128 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021030466 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.021494964 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022482587 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020902662 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021049309 seconds)
  done (took 1.402876941 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.026197378 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.022846104 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.023455277 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.021057371 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.024046346 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.022631467 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023923508 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.024521131 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.023492892 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023580017 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021845851 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.023853261 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023781508 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.0223296 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.023908074 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.021074524 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02422901 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.023760709 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.025486788 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.023915066 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.023016874 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022214031 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.024158666 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.022875825 seconds)
  done (took 1.420346651 seconds)
done (took 8.40205573 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.131053396 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.020289534 seconds)
  done (took 0.999688812 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.120672333 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.11469617 seconds)
  done (took 1.091121338 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029727151 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020614237 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031828663 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023741043 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.021243488 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.021107357 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029932229 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021296562 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021373831 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021325246 seconds)
  done (took 1.100855344 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021171744 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021605415 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021825902 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020053439 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022377033 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.02338107 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.024826582 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021676028 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.025492111 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.0204497 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020764968 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.02962962 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020679392 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.029017345 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.024597188 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021376318 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022201524 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020566292 seconds)
  done (took 1.268293575 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019729206 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020321625 seconds)
  done (took 0.898350933 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019288083 seconds)
    (2/7) benchmarking "second"...
    done (took 0.018779067 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019043075 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019138388 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.018864948 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.020100651 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018908767 seconds)
  done (took 0.99135702 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.362188592 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.083883878 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.304284535 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025002574 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.020775856 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.209593058 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019193163 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.019467084 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.019511109 seconds)
  done (took 1.921195247 seconds)
done (took 9.128628522 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037724647 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.125543899 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.134335484 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.394847889 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.041788781 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.0212009 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.073746477 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.230849423 seconds)
done (took 1.927666453 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.176259056 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 0.992221726 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.164732357 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.021073556 seconds)
  done (took 2.043529969 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.279103516 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.133683612 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.030978881 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.026724669 seconds)
  done (took 1.346633811 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022438919 seconds)
    (2/2) benchmarking "read"...
    done (took 0.024825053 seconds)
  done (took 0.920450155 seconds)
done (took 5.362634594 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.106256462 seconds)
done (took 0.973998232 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029624566 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.018453173 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.028642275 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018470271 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018984931 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.019015786 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.018805634 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018357455 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018487913 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018290976 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018227901 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018377123 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018866061 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018745085 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.018917543 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01827344 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018508676 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018671759 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018777343 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018851043 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.018347383 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018499048 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018845865 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018746114 seconds)
  done (took 1.331884431 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.033508457 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.018702012 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.018469853 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018289486 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.018861787 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.018265314 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.018557282 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.018701294 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.018411703 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.018259799 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018738886 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.018734593 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.018371929 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.018712794 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018274776 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.018705679 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.018439244 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018596873 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01822809 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.018627728 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.018198809 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018533283 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.018646971 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018464695 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.018863968 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018661063 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.018301245 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.018951915 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018479595 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.018795594 seconds)
  done (took 1.443418668 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020343252 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016169072 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019060105 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024399432 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016642175 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.02004514 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019287624 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016299528 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016797056 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.020685227 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020789405 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.018892823 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020918452 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.019429534 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016723745 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.020098274 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020205382 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.033563629 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016549136 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016419591 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.01989606 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.019108542 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016658835 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.019672822 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020944079 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019493878 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.016375396 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019362811 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.01926378 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.019405932 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.019284125 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019719597 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020063735 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.020500726 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020052123 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020018621 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.020593831 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019603419 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019847255 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016381478 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016252168 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016285123 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.019028521 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016508341 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024058359 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.019175282 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019873052 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019877462 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016453783 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.016530415 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016425667 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020749134 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020109227 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020317661 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.016423092 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019886083 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016435866 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019956641 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.01939921 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.01638177 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016291476 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019018229 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020605354 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.019557501 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.034147058 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020481757 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.024179837 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016555746 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019010575 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019509125 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.021572311 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.032783432 seconds)
  done (took 2.287854547 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.03375694 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.031133351 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018636457 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.018886563 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018631924 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01842192 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018714406 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018370106 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018826456 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018240764 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018302366 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018639304 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018758473 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018193635 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018350966 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.018685796 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018378526 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018760957 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018228201 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018444494 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018270314 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018875016 seconds)
  done (took 1.3146293 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.087128696 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018277716 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.060470472 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018212636 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018070879 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018264978 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.018425345 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018070852 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018482016 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01905551 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018999246 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018496792 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018466186 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019137049 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.01893371 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018253021 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018598567 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018200516 seconds)
  done (took 1.316711087 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.024178085 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.018450048 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.042038606 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.018758369 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.018642431 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018230299 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018582832 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018233444 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.018237428 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.018811122 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.018281502 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018251477 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018283828 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018648235 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018322152 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.018737216 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.01814436 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018547214 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01833591 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018724029 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.01872479 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018293136 seconds)
  done (took 1.31331369 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.028493741 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.017907339 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.032815738 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.018654172 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018656278 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.01833444 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.018308563 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.018936256 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017868486 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.018238125 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018716558 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018311456 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.01778757 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.018819773 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.018787945 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018649311 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.018269069 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.018920553 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018474432 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018641944 seconds)
  done (took 1.267391412 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.12791508 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.032518702 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.032821358 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.033408734 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.033396504 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.033192791 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.033102076 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.033400266 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.033323244 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.033312978 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.033287029 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.033193999 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.033085449 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.033226847 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.033170542 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.033275855 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.033328711 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.033298922 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.033192488 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.033259634 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.03326346 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.033359507 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.033655629 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.033213737 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.033339968 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.03316438 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.033352857 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.033364962 seconds)
  done (took 1.899824561 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.044103868 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018442375 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018756212 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018601998 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018683406 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018571901 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018684817 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018658427 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018104582 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018523669 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018199154 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.01838193 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018254206 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.018190337 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01824756 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018244199 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018397445 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018698114 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018718635 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018778469 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018441082 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01833803 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018423972 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018888801 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018728969 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018345653 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018674812 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018798909 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018356735 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018802185 seconds)
  done (took 1.462782877 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020378046 seconds)
    (2/2) benchmarking "in"...
    done (took 0.022433821 seconds)
  done (took 0.918338303 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.02656617 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025517462 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.018145364 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.018755057 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.01874637 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018503156 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018278242 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018619273 seconds)
  done (took 1.03727081 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.119158914 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.131441651 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021048232 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021540623 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.119198284 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.082368325 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.122490059 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.027430696 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027617073 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019600271 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021648952 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.124148972 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.021062333 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.028531263 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02349855 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025058714 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023678013 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.03308263 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.028028234 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019558704 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026835188 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022618218 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.026823142 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.022012385 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.026149809 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022183379 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.028005051 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.027444667 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023280287 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.021196149 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030743914 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019343386 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022580547 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023107803 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.124557916 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.021881874 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.042617424 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.021047312 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.023003063 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020384937 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.026615667 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.032312863 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.023154923 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.029048564 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.022304067 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.023247161 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.020424549 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.021615265 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019829841 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.023946093 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019753609 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022369706 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020382846 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.022408508 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024490299 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.021472037 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023140101 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023740711 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027364502 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.025269805 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.026024858 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.027952578 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.023080452 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.031310759 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.022070213 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03179474 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.021332189 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028722329 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028077073 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.022479672 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024034077 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019687995 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.020534772 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.020063916 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.044083312 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021829314 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020635702 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.021200032 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019975115 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.022104 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022666623 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023356933 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021843893 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022313295 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028222895 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02367445 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021222537 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.022880029 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.030004885 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019872759 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020900073 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.027905353 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020610275 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01916158 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.028705624 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.02534748 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.022060353 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.021424974 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020438955 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026561693 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021725361 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019420244 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.022638088 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.021377013 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.120107804 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022838029 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02257984 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.021239246 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025819964 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.02247206 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.022388606 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.020726632 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020818614 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020881137 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019076515 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022617128 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.021090888 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024984674 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021687143 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.02735258 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027185907 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.024238516 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027604667 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020460339 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018927214 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.028746726 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.023294732 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021248765 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.028924031 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020441627 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023724084 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019922962 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.022183078 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.023395887 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019634432 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02131353 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019645909 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021780932 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021765841 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022270462 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021645658 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.0235966 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.023762383 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021170717 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.023102284 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.021639276 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.02762126 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.024370979 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.01986724 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022212539 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.021209245 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023641403 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021025923 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022978952 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019895099 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.021347219 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.020883527 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.026257333 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023301774 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021503586 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026725347 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020591105 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.021396478 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.021803322 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.021214466 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019738809 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.026876573 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.021173207 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022170166 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022857243 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.023915916 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.030671499 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.023410383 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019308833 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020129264 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021190336 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019903949 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020198917 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.023041513 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026934444 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.024141381 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.032703478 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.021106231 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.023575822 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021561431 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.027516855 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.026740667 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.021055721 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021983378 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.020559275 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021340887 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.023016566 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024571349 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023570939 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027400265 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019983955 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020639589 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019575783 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.027192632 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.021543632 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.022539603 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.023116351 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021908812 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020463875 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.02145651 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.02330409 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020638604 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.025785192 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.027998507 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.02217497 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019510448 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.027380969 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.02205487 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.024713554 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019784012 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019801573 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021336885 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.02227189 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.024860219 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027687953 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019509511 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.021409601 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026988363 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.021196197 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022547748 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.023272314 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.028479684 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020480151 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.022702233 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023973236 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.025659405 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.019978457 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.025433279 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.021428785 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.022785583 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.02307815 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.023983954 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.02097518 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027755748 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019638292 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.027192266 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022439862 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.023495767 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.022268843 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022819538 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.021623852 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.027910233 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.021559656 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.021261526 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.023392832 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019300416 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.022925566 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020360574 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020728932 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021778072 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.023045504 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.021343115 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022727219 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.022203023 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023196671 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020267331 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02206947 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.022955938 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.019851317 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019428654 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.022841161 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023326296 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022026691 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.021808772 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.022141902 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.021111902 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022931987 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.021679932 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.021182162 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021733524 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.02001325 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020857707 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021956052 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021437933 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.02139909 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021768926 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022771439 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027434687 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022952092 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022195886 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.023189089 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019766919 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027083888 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020725892 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022692475 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019383679 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024280021 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.023250029 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.021624757 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028360465 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.022710084 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022067522 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02335728 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022884285 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019844643 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.02875134 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.022393765 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.022930531 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021962196 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019890818 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021222001 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.021915903 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022953868 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.023829839 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.023617375 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.022331135 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022030501 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023126692 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021604755 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.038249305 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.021671697 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.022877392 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.022399479 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019666313 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019917138 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.024370849 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.01990686 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021114158 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.02079099 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019123704 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.021220192 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023644268 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019971024 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022549827 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026998284 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019341153 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020958009 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019176232 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019945716 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027292784 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022590759 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.022124162 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019985354 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019270105 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021236985 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.022179709 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020704961 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.022190932 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.020951777 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018879053 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023867707 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.021736107 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020998603 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020794612 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021950147 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.02369893 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021824618 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.021137257 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021221324 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020775395 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020776181 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01923941 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.021208022 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020104627 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.02117471 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019548775 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.023757831 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.027395421 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021078797 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023876773 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.021399326 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022025986 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027142856 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022906101 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.022122966 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02304116 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019870893 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028624059 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.02308714 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022774224 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022812785 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.021508774 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.027603737 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.01992664 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022754147 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027020255 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021869262 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021991986 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019537118 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.157141494 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019759064 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01914748 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021441523 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022932326 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021573426 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.023369675 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.021492387 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.022271929 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023554953 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.023007037 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.021402702 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021680859 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022897268 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.028072612 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.021530043 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021885677 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022310334 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023293903 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020065607 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024504831 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.022199278 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.022598428 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021728677 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019966188 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.021352765 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.023554347 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.021158318 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.019925762 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.019757865 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019610747 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021123908 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027560089 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022732139 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022614284 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019511309 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.01917393 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.027362704 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019813211 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021886194 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.021919547 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.023492986 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024358128 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022709422 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.027452383 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.021245866 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020660105 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024106842 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021086672 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.02057563 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019592873 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021337456 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.02215899 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022428328 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021556436 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022069022 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021192819 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.026547838 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.021008691 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.019766126 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021160784 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.021196848 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.023537983 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021827916 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.022725819 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.02131827 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019695096 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020776316 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021740984 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.021698301 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.022070127 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021182791 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.024245987 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.130144667 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021922732 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022195948 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.01954562 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022476985 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.023366869 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020496918 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019595845 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.019919435 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020704096 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023056456 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.023115994 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.019689371 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019361436 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.027629467 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020967378 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.022294078 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.021533564 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.021247452 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020801133 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019570475 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023604358 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019378299 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020780879 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.019663807 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.02150002 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.02668134 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021746372 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026624126 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020893721 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.019533446 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019274212 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022384529 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019693237 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020429582 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023377844 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019022591 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026456728 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022605661 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023323426 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019439419 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020562491 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.020992269 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.02707564 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022403216 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.02199982 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021893684 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022607374 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020958218 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.023377566 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019619162 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018984746 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02268251 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022539583 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.024645791 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019433618 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.022870851 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.021197472 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.022496148 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021184508 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.021217261 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021371688 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021827278 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022705008 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019860893 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.022772118 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.019778801 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.02715196 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.021145132 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.024052096 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.022942203 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.023305504 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026897871 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022971451 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021216456 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.021291179 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021785157 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021010057 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020948138 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020982257 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021997306 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028953689 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021781982 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.021521242 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023905656 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023604315 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020912866 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022853714 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019851243 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022885986 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020962541 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.023731538 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021433353 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.021957653 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.019769842 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.01990826 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018977088 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019481684 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.021027139 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02216322 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.022289451 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020426841 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027828354 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020917776 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022827829 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023156896 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021120739 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020848586 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.020904716 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.021293139 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.026689333 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026489691 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021693404 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.022346582 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021923874 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022967818 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018887917 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022310298 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021898012 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.022295205 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019499561 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020908488 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.026931826 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026682315 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.019852612 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.030526188 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02214803 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021486771 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028570463 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022999062 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020856747 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.022834068 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020313331 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.020784134 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018806379 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.021188324 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023690259 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018983918 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.02032339 seconds)
  done (took 15.396011953 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.046739659 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01912485 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01888418 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019140581 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019065013 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019160266 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01914019 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019054151 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019203391 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018970657 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01901765 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019155319 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.018925871 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.018986626 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.018937211 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018839708 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018878539 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018945791 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018922967 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019033002 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019055545 seconds)
  done (took 1.357495628 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.023525764 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.025759511 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018655673 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018265756 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018800247 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018369965 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.01856015 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018159105 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018294454 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018620256 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018210289 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018190153 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018867189 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018705741 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018743129 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018194854 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018279431 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018731135 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018267718 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01869661 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01813646 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018525513 seconds)
  done (took 1.322637689 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021049822 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020380483 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.022173051 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.019482564 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.019333576 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.020301118 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.019106657 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019866307 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019867601 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019710074 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.022212105 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.021154682 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.019418216 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.02121577 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.01900145 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020724876 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.062249439 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020724599 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.02079916 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.019261806 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.022406081 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.021802878 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.01929478 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.019699786 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019851391 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020541634 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.019335113 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.02263333 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.021153803 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019947267 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020733891 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.018984058 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02228808 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.021891342 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019930887 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020065114 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.021435827 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.02059587 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.0192432 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.01915887 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.021788361 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.021569503 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.019995165 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.02112804 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.022056195 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.019395854 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.018995665 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022180499 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.019530178 seconds)
  done (took 1.947547134 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.034117027 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.030830647 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.01907295 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.032161353 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.018741472 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.018658038 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.018734673 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.033553529 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.019111571 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.019223379 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.018761564 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.019036395 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.019124651 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018739741 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.01870907 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019028218 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019031618 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019058679 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019152539 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019024821 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019012852 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.018754691 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.018600805 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.018973908 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018782616 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018996201 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018954497 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018684364 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.019043635 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.019115638 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.01866628 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018470919 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.018612678 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.019066396 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019063339 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018720486 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.018609152 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019017276 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018691791 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.01911537 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018759761 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018775781 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.018574529 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.018771745 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019258788 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.019082942 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019253355 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.019004835 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.019013284 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.01866197 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.018570406 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.018908804 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018584925 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018799715 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018510513 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.018624595 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.019024737 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.019068661 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.01863013 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.01887879 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.019068704 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018546343 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.019151816 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.01882826 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.018590416 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.018976995 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.019235774 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018667159 seconds)
  done (took 2.345143192 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.049643179 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.019101449 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019241387 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019529689 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019409139 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.019457091 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01922356 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.019327773 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.019609348 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019349639 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019362176 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.147363141 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.019168536 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019296901 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019176441 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019422769 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.0195472 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.019328725 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019376717 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019488964 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.019554434 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.019444667 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019456112 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.019188419 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.019416915 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019294667 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019392538 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.019363261 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019774635 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.019339519 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.019508358 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.019401758 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.019491501 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.01940648 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.019449203 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.019520909 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.019483386 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019379503 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.019300144 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019346459 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.019340499 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.019370805 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019391606 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019393333 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.01930734 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.019354974 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.019403066 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.019549386 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019642841 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019331496 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.019385585 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019399043 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019330414 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019269616 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.019538319 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.019621668 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019306416 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019403362 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019554806 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.019391506 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019352404 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.01953224 seconds)
  done (took 2.272247829 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.046015264 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018079606 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033312873 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.018705408 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018254074 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018419466 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01829569 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.018112416 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018218356 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.01813055 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018106203 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018794592 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018747963 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018225786 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018634483 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018614434 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018668209 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018922491 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018307242 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018635518 seconds)
  done (took 1.324415289 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.026210456 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.024797718 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.01860193 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.018718997 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.018213499 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.018706 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.018359943 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018407811 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018732746 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018179637 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.01829588 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.018142409 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018656662 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.018804537 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.018273604 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.018539355 seconds)
  done (took 1.216138077 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.018830613 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.022566427 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.121270078 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.022305534 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018794501 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020349423 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018476029 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.023536533 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.01883664 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.029658638 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.022763465 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018498618 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018485608 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.022051994 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020407956 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018321528 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.01879963 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.023449921 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018570839 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.123042599 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.019228249 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.02044289 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018614463 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021764636 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019024462 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.019010371 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.02329259 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019061096 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.020774681 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018522986 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019001034 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023280061 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018985876 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.023358574 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.022196181 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.020751542 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.018498934 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018404246 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018462501 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018411925 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.02294774 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018888274 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018505881 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.020258321 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018820729 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018589835 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018974854 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.023305366 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020302204 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018993631 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.018500206 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022150043 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.02279118 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022879418 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.022838904 seconds)
  done (took 2.235685685 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029759592 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018067814 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018918611 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018351565 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.018336282 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.018710837 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.018250912 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017903434 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018588333 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018060165 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.018668377 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017830469 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.01856522 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.018401986 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.018664277 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018298142 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.018678754 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.018618881 seconds)
  done (took 1.25924316 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.028053732 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018404336 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.027788464 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018705481 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.018880216 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020243678 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018526982 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.020216199 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020577562 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.018587463 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018764979 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.020137462 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020054025 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.020129654 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018800291 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018763072 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.020355216 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020279296 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.018736499 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01874273 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020274135 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02034951 seconds)
  done (took 1.354921428 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.169131907 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.133126136 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.036524778 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.032774165 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.02520052 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.049568918 seconds)
  done (took 1.358238445 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.044934624 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.043701987 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01901123 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.01861014 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018546306 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018792163 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018671926 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018947738 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018536527 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018856567 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018834245 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018444762 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018673961 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018903914 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018452634 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018463143 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0187451 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018727976 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018790517 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018503569 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018875113 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01855621 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018960207 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019012781 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018889466 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019108085 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.01847935 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018928378 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018890872 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018628534 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018533795 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018905947 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018503709 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018983483 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01850561 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01853859 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018908722 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018467577 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018441271 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018911727 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018358848 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018404347 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018363604 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018677109 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018417041 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018912442 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019062533 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018874565 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018840976 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018541033 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018600476 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018887795 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018622033 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018741957 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018418101 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018678289 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.01887356 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018929151 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018331016 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018783593 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018963645 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018643743 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018797141 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018721541 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018411807 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018963271 seconds)
  done (took 2.204455967 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.045474631 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.018926528 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.019146248 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018835693 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018897202 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019200894 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018925211 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018829532 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018796556 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018922021 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.046488049 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018857099 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023655786 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018811066 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018834579 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018979141 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018817989 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01889957 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018898689 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018550667 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019037993 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018916404 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018841428 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018921346 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018948599 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018431886 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018970882 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018894073 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018842036 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018818805 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018822661 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018880106 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018982031 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.01906493 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018870724 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018995889 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.018901973 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.01894475 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018961138 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018665696 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019308066 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018720776 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018977424 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.01877153 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018843732 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018830753 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019079455 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018854365 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018929462 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018947309 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018772754 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018920788 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019009674 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019009899 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019018228 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019019593 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018883321 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018903474 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018937076 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018427551 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018772389 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019021611 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018542345 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018911077 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018865935 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.018771766 seconds)
  done (took 2.221875094 seconds)
done (took 54.280271811 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.178346502 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.137220981 seconds)
  done (took 1.221581646 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.120896271 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.123249297 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.160208936 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.021801163 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.16158475 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.123428592 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.111985074 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.021800645 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.021180347 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.021986898 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.0214744 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.022399799 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.022441941 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.02141027 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.064988711 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.021603084 seconds)
  done (took 1.979745224 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.070411593 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.252491174 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.066695202 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022055652 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.063172771 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.021920646 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.022334165 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.021750201 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.021727137 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.021712278 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.066537601 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.077372178 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.021794493 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.021807584 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.02233023 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.021741763 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.021742198 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.021675165 seconds)
  done (took 1.780152674 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.06664505 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.021619083 seconds)
  done (took 1.010515595 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.118179609 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.058390914 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.099247867 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.261660357 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.054461661 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.221226251 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.066998588 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.061349537 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.054226032 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.058493473 seconds)
  done (took 1.968694593 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.04900804 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.045266654 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.228648937 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.045958362 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.025723804 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.024253957 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.031012903 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.023241724 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.033292782 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029133877 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.067678312 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.026334515 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.023561277 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.066636589 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.023229027 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.05202601 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023042326 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.022982388 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.030348438 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.022073905 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.021960148 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.022418434 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.103899534 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.022464347 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.023399535 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.024639909 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.021930657 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.025655873 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.025737784 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.021989353 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.021763498 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.02396455 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.02218593 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.033175751 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.022232699 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.021723017 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.021871001 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.022297873 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.021789362 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.022582068 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.024015432 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.021648153 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.022431132 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.021943523 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.027335436 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.024475489 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.022095099 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.022314873 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.027304807 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.022033743 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.022816087 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.021732785 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.021898985 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.021916642 seconds)
  done (took 2.695564919 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075190036 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.065118444 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02378421 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073361335 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070689433 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023362519 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.084439844 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066014947 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.08164851 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022631334 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022680513 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.021044299 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022645877 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.02511001 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.073533815 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.066743026 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023753605 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.022627582 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.067476209 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.067900523 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02125325 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068144956 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.076102136 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.06301874 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.020544007 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022784597 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.020913603 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.02095519 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.020462213 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.021839353 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.020849069 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.022366053 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.02675195 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.020948991 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.020595665 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.020862202 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.020867061 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.021640209 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.022628662 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.021976845 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.020988294 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020821144 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.020811746 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.020860504 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022593032 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.020641689 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.020285512 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.021303347 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.020561136 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.020900497 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.020898094 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.020586515 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.020761193 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.020931844 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.021894916 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.022022756 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.021747743 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.020951183 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021045695 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023062343 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.02241269 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.023785479 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022326899 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023216784 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.021037142 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.021533193 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022421272 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.027357028 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.021100108 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.021773992 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.020963342 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.020722767 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.020831973 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.020772813 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.020928867 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021095197 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.020753808 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02080573 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.023457954 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.020936749 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021080768 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.02017974 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.020870718 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.020963565 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.020894908 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02082922 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.020203315 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.02181165 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02119386 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.020699222 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.021038979 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.020812821 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.020685709 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.020499559 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.021153201 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.021460252 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.020764627 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.020835714 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.020751651 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.021699773 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.020842731 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.020644727 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.020959413 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021044774 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020918716 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.020939117 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.020565268 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.023229658 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021357103 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.020666978 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.02134309 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.02394398 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.021123048 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.020499038 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.024000577 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.021253751 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.020883878 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024124758 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02148283 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.02143162 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021052511 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.020996024 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021499097 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.020923537 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.020881776 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.020885209 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.020972321 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.020689051 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021028834 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0209205 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.020778252 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.020783035 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.021217228 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.024300175 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021440357 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021665406 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.021650769 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.021146875 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.02098641 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021311088 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.021441668 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021215597 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.020829636 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020619112 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023048218 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.021242407 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.020963859 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.020933819 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.023606484 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021182558 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.023672111 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.020902533 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.020825976 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022111952 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.023283078 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.021149142 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.023672484 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021523617 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.020934722 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.020766954 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.021014248 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.020297946 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021056576 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021236968 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02083641 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.020611991 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.02099457 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.020915198 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.020963395 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.020852671 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.021073826 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.021093939 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.020761626 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024366559 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.022921469 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.020811162 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.020774472 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.021662692 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.021097587 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.020895627 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.020813038 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021149865 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.027778585 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021219552 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.023494977 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.021133677 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.020801014 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.02136634 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.022090792 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.023645057 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.023295219 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.025309184 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021281592 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.020946533 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.020608486 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.020966091 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.020990863 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.020445722 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.021000342 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.020961401 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.025365996 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.020918858 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.021179118 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.020625966 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.021034109 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021140276 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021143259 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.026084879 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021423489 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.021255037 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.020531942 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02105329 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.020842924 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.024573941 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.021379848 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.020961899 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021273058 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0208917 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.021273729 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.021250296 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.020851994 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.020913105 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.020657832 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.020640885 seconds)
  done (took 6.46106975 seconds)
done (took 18.033653999 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.072175056 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.051705565 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.057729796 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.02700377 seconds)
done (took 1.155658823 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.123251053 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.068210017 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.126229732 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.075125956 seconds)
  done (took 1.313438356 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.051479247 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.01959868 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.142304826 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.152852477 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019543227 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.134858 seconds)
  done (took 1.454940172 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.201837589 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.136604445 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140511562 seconds)
  done (took 1.41420226 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.141644313 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.161721506 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.266088 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.160746062 seconds)
  done (took 1.673148715 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.143480391 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.14316841 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.029630354 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.151896112 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.033119132 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.020849371 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.068487592 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021147517 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.040257274 seconds)
  done (took 1.635404146 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.067845893 seconds)
done (took 8.486921482 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.18239604 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.127488784 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.029833197 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.027092357 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.109310907 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.031414801 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.122219346 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.114627037 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.030313852 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.040306883 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029449733 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.099745374 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.272734419 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.154189243 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044774476 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.038693069 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.140207944 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.030100665 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042952773 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.214731256 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.028515679 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028954589 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.02469192 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.124290617 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.104241207 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.030595237 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.211107716 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.026357231 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.089605317 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.027663925 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.091785182 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.084281833 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.161498486 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.277613845 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.249121374 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.027954958 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.104270438 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041098037 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.105196631 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.108747488 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030748181 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.123190063 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.036986632 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.045340695 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020230755 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.220324359 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032684415 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.047115207 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.104853966 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.296815763 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.16741069 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.025581847 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.134331412 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.132160895 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024033987 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020548625 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.028060721 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.029602763 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.024509217 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.039596916 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025873732 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.035904077 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026218181 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.111925822 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022746635 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.082295844 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.12562377 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.035785836 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.036594004 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.156445653 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.088590436 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.024067502 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.034853787 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028864631 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.121237359 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039396466 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.024722033 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034299094 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030703831 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.028808237 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020805386 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.12376971 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.033595237 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020954323 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.031666871 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029373305 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027700797 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.082832727 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.136143136 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.069266502 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.029893913 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.087750496 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.086410058 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.024579891 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.040539009 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.041820139 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.028905393 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.027264427 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.024927884 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019515713 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.031921576 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.162477825 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.020173041 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.035734856 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.025367272 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.047969125 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.030086704 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031329858 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037164875 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020146083 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.028502543 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034120157 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.170753413 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.135303974 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073746124 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021322136 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.247372418 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021326464 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.039758732 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021628642 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.021083234 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.158953553 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020539902 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.021131939 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029457334 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.027967841 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.02103158 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.177523152 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.094403178 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.026091304 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025850278 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020030304 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032897809 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024966726 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.02212167 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020176462 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020127185 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.226712163 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.028190415 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.025772053 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032066107 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.020957076 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.030667609 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.030560358 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.100590638 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.030538183 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.106218995 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.02966428 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.030751609 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.032819816 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.03984906 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.075973931 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023187197 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.025324827 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026972819 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.118727496 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026085783 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.116632625 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022363911 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.040887427 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.094613899 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.086597152 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.032391663 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.09902945 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020774385 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.027828133 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.020202563 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.120996339 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.042655053 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.025851692 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028093507 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.025083766 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027111686 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.121341618 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.02873606 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024793029 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.094282511 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019824847 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.082112487 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.0885123 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.106502885 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024126651 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.028705876 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.08407015 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.037879739 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046771756 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041599317 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.02048794 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.030221784 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021003844 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020583636 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.027679084 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.035800944 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.02532785 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019843599 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020952739 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030093877 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.030036407 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030409236 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025705192 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031754603 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.212872233 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.02415336 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.024380188 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.02362666 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032546326 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.229600278 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030523889 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.080847171 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.036549544 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.032455918 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028292419 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.021032305 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.031246524 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.092313653 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021392716 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.035370718 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.105606848 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020311994 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.08707059 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021565447 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021329716 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037143475 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.031326295 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.029620192 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025378295 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021290876 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028594058 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032674869 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021503228 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.036121117 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030940105 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029453906 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.026590382 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019993239 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.036607111 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.091871116 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021228281 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.160084969 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.090950726 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.085922574 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020214704 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.03665956 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.032217831 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020448127 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.115503122 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.021138134 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.073302607 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.101335508 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.030944898 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.033546382 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.035266664 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021085081 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.088498881 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036083121 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.030587348 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.024517306 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.086154116 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03199213 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.105852403 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.080129977 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.025501379 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.212415903 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.03643175 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.027364369 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020117668 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.025218399 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.037161311 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028257442 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020222271 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.031772205 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.088540951 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024130507 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.020144792 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020364267 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021118789 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019408473 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.040972308 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019634762 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.027436416 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.026611032 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.025016832 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.031536326 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.037269244 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022557335 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027450687 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022843755 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.02011521 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027846563 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.032840776 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.089128483 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.103153918 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025010344 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.033600102 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.030257301 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.028775264 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.071588724 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.02296839 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.136570792 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019544812 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028655359 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.03749396 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020196692 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029564008 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.019956755 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.024683544 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.034361543 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.022559229 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020794411 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027893383 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020873098 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.019985968 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020299238 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020859139 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027705685 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021944353 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020128998 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.02018451 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.024228842 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024348421 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026270707 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.02997399 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.024717042 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.019969786 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.033917208 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.399105567 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020956135 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021024932 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.033975665 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.02464273 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.024748241 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020865022 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.020938198 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020616245 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037855582 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.02093367 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.027326431 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020903202 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030461233 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020326484 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.042829457 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.020081842 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029828337 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019875653 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.028333863 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030519085 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.028119377 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.024995193 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.028796838 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.036643044 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.102878532 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.030349017 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.035201943 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.035042492 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.030103527 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019681635 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.020105196 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.229249926 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.079261489 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.037386498 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.035996643 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020239368 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.028188183 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020062104 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020908548 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.0196417 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.04013744 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.020280524 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027963521 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020052213 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019614394 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020197968 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.071658368 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027182837 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020342268 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.023057802 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.03059993 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.024926972 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.032466757 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020447541 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.041497542 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020435406 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020524048 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.032943542 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020578709 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.03157942 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034347584 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.178143005 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.139316233 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031876522 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022775809 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.087094442 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.020070493 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020514698 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.029978897 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033958962 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020370849 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.031988157 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.033875078 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.029727302 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.101930863 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.029612603 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021535237 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020588937 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.025492923 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030822528 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028509388 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.078911378 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.031534068 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.025570835 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.025036159 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.021944238 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.032986178 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.026220988 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019650144 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019935803 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.041740394 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043890462 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021543979 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.022854049 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.026699942 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020416873 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019808163 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.083731926 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.022959554 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.027636943 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.127228955 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.020793143 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024312549 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027488541 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019569027 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.40868609 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.02012977 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.026469565 seconds)
  done (took 23.481421881 seconds)
done (took 24.429981992 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.097390533 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.02868976 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.075613601 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.04499161 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.136494154 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.030673029 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.036687874 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.167914987 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.142405825 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.158636373 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.108439982 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.046074344 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.041985589 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.224706273 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.027846397 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.02357897 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.187996324 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.149447913 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.182962362 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.066730377 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.039586995 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.047349939 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.184317981 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.047684864 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.1746326 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.103101788 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.052512762 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.081161261 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.02348041 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.161162794 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.029847256 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.025517663 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.033885849 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.157419515 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.036539522 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.030116869 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.077274582 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029218087 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.046957654 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.172608373 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.041708953 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.052380494 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.032077233 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.184204985 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.058174997 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.067682043 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.041096115 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.075998941 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.073190002 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.032805241 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.042291514 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.054136587 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.028663111 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.071652492 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.078545792 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.070480855 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.05915241 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.078456075 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.026985723 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.065920814 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 0.019513845 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.057265631 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.029840695 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.0446101 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.146498272 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.064494715 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.070978807 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.070531756 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.02733878 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.054967606 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.065925538 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.053782527 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.058916909 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.023576605 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.070458242 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.070347524 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.07236674 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.026214058 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.070016682 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.073519159 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.042294556 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.028232739 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.058758468 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.073809418 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.019490064 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.020772252 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.026421592 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.020531687 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.059285509 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.023153461 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.020283873 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.066401965 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.07184204 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023221282 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030400391 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.053641504 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.023215674 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.066455411 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.080086663 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.029439753 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.045706029 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.048464534 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.050110106 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.065250042 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.066342175 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.04853675 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.030099464 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.027598406 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.036981749 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.020880856 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.026996878 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.053501264 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.05179607 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.06476186 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 0.020513359 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.023211049 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.027222497 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.020178167 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.025466353 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.020606279 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.019334429 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.019047916 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.030283425 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.030049139 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.067891812 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.052918239 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.141330085 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.159511227 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.038020914 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.019787338 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.030445554 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.068440404 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.053659578 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.02482265 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.032283534 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.051864386 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 0.021182625 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.06593113 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 0.02097323 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.042739853 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.020908114 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.023265788 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.068691456 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.028198036 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.026304499 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.054033175 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.051196785 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030589592 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.023546702 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.020624848 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.024951389 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.046919251 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.023670068 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.054412375 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.046934891 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.05645314 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 0.023443942 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.030146387 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.019648038 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.023399932 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.05083969 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.066741119 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.065310359 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 0.026427868 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.056283262 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.023420632 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.020567897 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.026633766 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.03028438 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.036468011 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.032074044 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.025237173 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.045855354 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.055405273 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.073918876 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.031925021 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029851692 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.028832115 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.037780998 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.019556622 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.053690524 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.054218725 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.031819829 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.027823906 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.055236999 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.05407353 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.025232731 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.027892393 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.0578353 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.020409019 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 0.029294344 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.024580675 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.027988451 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.037796858 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.023235742 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.020326807 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.020499727 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.023629451 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.078956677 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.020782863 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.022984987 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.02303996 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 0.020587733 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.02039395 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.026877113 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.020483376 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 0.020521061 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.031083537 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.061373747 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.027590125 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.024786598 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.023227027 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.024025177 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.054938824 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.071382594 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 0.023410051 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 0.023308672 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.023269478 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.032947434 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.02416557 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.028039384 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.020451973 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.020405792 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.024207944 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.066521072 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 0.020030587 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.019998072 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.031680882 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 0.021212847 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.023516829 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.021255696 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 0.028191264 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.059676552 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.020728155 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.027442903 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.029057984 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.020791566 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.023574561 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.019463822 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.023648466 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.023470513 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.030475723 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027292332 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030412346 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 0.02367301 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.023525526 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.020774182 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.051128889 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.04630999 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.023211792 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.029071952 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 0.020646748 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.025564207 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.063262867 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.034047756 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.054172896 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 0.02075158 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.051357349 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.020434287 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.019487745 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.020846653 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.023126732 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 0.020703887 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.064219057 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.043012344 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.019942718 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 0.029346716 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.030259512 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.023427321 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 0.024107462 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.054377864 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.023128879 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.048084447 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 0.020404755 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.073356614 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.034158765 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.026751705 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 0.02596967 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020188971 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.02934189 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.026031515 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.020850537 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.020588183 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.020495933 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.029175839 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 0.023405033 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.036379602 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.020534802 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.019950222 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 0.032953926 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 0.020283101 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.024552403 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.060431218 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.020714523 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.053532111 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.020493518 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 0.024128045 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.020297679 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.02342545 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.031221783 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 0.032673415 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.020443965 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.023313634 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 0.027660063 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.066213155 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.026846622 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.020002651 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.022901771 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.030912044 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 0.02483772 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.025130396 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.023131365 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.023303 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.019332077 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.035669689 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.030915272 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.02053492 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.023236967 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 0.019265965 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.024688457 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.046476212 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.029169349 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.026341316 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.037235175 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.019506454 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.067394258 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.020578275 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.02422754 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.020609684 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.046198414 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.023079444 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.023188514 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 0.022929664 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030252959 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.023744666 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.01921534 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.025388954 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.020314271 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.079113541 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.020806603 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.043347855 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 0.020388206 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.019743385 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.027436017 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.019234422 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.026999172 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.142681303 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 0.024922441 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.023335603 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.020385603 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.020705942 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.023040581 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 0.023765315 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.027679513 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.025364009 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.037913067 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.0205607 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.022979229 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 0.023051101 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.019007366 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.023849531 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.029784118 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.023331294 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.023165835 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.020847113 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.020760921 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 0.020832396 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.060681887 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.025760238 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 0.024609348 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.022933223 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 0.020811674 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 0.019514948 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 0.025624428 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.02310701 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.060858226 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.025441838 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.025540036 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.024323548 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 0.020195939 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.023948378 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.14265831 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 0.020606522 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.020871012 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.020567477 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.019708161 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 0.021496553 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.019694924 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 0.025243864 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.019437665 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.020564647 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.02895684 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.057441443 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.019395395 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.019227017 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.02086245 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.047099243 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.028068538 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 0.020140313 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.046214497 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.03093606 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.02419697 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030671411 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030441765 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 0.019357708 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.019413359 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.020132067 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 0.020847514 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.019730777 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 0.019478763 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 0.020835121 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.023135116 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.029056115 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 0.032005031 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.023259625 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.019501872 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.027792287 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.027695542 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.020723115 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.029091652 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.020073333 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 0.019441352 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.020887017 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.022894644 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.025120275 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 0.02010595 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 0.029190873 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.023387826 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.027742447 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 0.023294498 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.026478701 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.031046604 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.024190608 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.019542761 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.025333386 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.021372871 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.023244554 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.020534417 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.022951945 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.027219169 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.019525711 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.019493169 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.02337221 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.031212662 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.027929112 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.028199638 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.020103818 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 0.019329537 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.021000833 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.023259305 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.0291212 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.025912407 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.020935184 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.025006084 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.02533677 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 0.023237544 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.025352615 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.066264445 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.019858732 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 0.020666692 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 0.020276873 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.025370443 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.047605977 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.161782557 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.019485095 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.028247788 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.028404072 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.024277847 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.037790298 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.023932096 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.070242613 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.024298342 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.030013343 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.020928758 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.020501508 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.020786827 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.023613339 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 0.02981867 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.029395618 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030212263 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.024441533 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.025067463 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 0.024626682 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.020257871 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 0.020741414 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 0.020668683 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.019645878 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.019476138 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.025366023 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 0.020388447 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 0.019404751 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.020196659 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.020346524 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.023446277 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.024036227 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.030195218 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.029967305 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 0.023680345 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.019625311 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.019409502 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.021028505 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.018876689 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.020613865 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.021027659 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.02573794 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 0.019795505 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.019332985 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.019935272 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 0.025518039 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.027178632 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.028798479 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.020738921 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.020521352 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.02333952 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.022992913 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.019386238 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.027799884 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 0.019890002 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 0.028820443 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.031203585 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.020435866 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.023219548 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.022847772 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.01940165 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.023057573 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030803489 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.024439523 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.024829466 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.019573383 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.027408985 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 0.019515568 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 0.023919987 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 0.020859639 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.031856705 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.019627531 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 0.019685873 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.027646134 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.020657972 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.02017305 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.021164976 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.02036299 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.02322831 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.023022501 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.020159328 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.019387606 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.0233905 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.018786373 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 0.025071734 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.019411777 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.019886723 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.020709908 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 0.02312868 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.020434678 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.020426282 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.024069762 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 0.020497915 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.02788963 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.02324616 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.031135325 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.019795556 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 0.024099799 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.028385227 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.023975524 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.023477622 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 0.01961995 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.031262559 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 0.023247294 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 0.024869589 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.020091851 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.028157492 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.024131592 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.023206354 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.020509089 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.027386986 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.020305823 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.023841985 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.024078899 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.023302272 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.028138069 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.023299197 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.023282475 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 0.020785657 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.028655295 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.023328629 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 0.028412247 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.020800863 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.019688122 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.030208425 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 0.025950461 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.023357555 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 0.024225205 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.020814605 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.021229219 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.032579474 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 0.023820122 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.025522813 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 0.029335001 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 0.028404955 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 0.020568997 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.021168801 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.024824414 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 0.020299424 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.020855649 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.024227832 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.245973132 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030415223 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.025476816 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.018957742 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.025445922 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.028100547 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.02330717 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.021587035 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.018976187 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 0.020511394 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.023222998 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.020866987 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.020624614 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.029538476 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.020423915 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.025733425 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.023300926 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 0.026485875 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.023164701 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.024964203 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.019555408 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.02563406 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.020581986 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.027188397 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.025025848 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 0.024800263 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.027174512 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.019618311 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.026111748 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.019809108 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 0.020590567 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.023153704 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.028055126 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.020284193 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031030672 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 0.025356648 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.020905995 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.029090106 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.020786286 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 0.024018754 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.021133052 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 0.020325788 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.023299998 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.025877381 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.021454709 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.020825447 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.019747605 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 0.021422404 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.023612002 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 0.020940726 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 0.029047956 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.030341923 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.021414464 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.019611951 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.019502785 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.024846854 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.021137069 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.028090226 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.029082428 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.026126846 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.023423564 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.021121178 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.019721636 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.023318763 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.023840032 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.023443702 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.024335267 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.021010162 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.025483349 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030806551 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.020487569 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.020327523 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.023757658 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.020660182 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.020535691 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.020399474 seconds)
done (took 24.892809372 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06574111 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.057470433 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.152842784 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.135169333 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032829363 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.033341992 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.02608713 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.033474537 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.026277525 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.038514668 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.046190499 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.039082329 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.148512049 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.038936229 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020137521 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.032337265 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.020925044 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.041265343 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.13770368 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043532849 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.048947649 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019003118 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.026147191 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038673368 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.028595826 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.034954145 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.04387125 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.02158932 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037865157 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.032480022 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.04451777 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.023192525 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020936194 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.034109823 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.033844153 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.027621593 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020348355 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.021006721 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.030764298 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.023744869 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.04852822 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.033039523 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.024745213 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.021062928 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021191177 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.032614576 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021166195 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.024356171 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.029430902 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.020968904 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.024187232 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.028403679 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.019220088 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.033872389 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019354657 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.024865723 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.023874463 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.024560962 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.02087298 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.024972972 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.02390485 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023096236 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.023578469 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.028173462 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.021764958 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.024337383 seconds)
  done (took 3.479832754 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039926947 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.060539342 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.037059234 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.032069994 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020301485 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020697574 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020637398 seconds)
  done (took 1.296514866 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.077107418 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.136359888 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.137259541 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.138252774 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.146696103 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.134965009 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.031420015 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.040771303 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.050333322 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.149156772 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.145062129 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137407717 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.022961599 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028210128 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.047578827 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.143536727 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.0331939 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028221507 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.13634688 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.140857523 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.020602711 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.043351746 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031752153 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023098956 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.14505307 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.134186599 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024148346 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.056533579 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021942423 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021836943 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02065122 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041590483 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137800783 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.023234474 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020259752 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020257979 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.137111612 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020558525 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.137853473 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024454434 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.131442202 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023097038 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022633741 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021765871 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.023234105 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.135872887 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02192341 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020871575 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021340731 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.138581266 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.029403913 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.135615378 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.021458985 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.021969551 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028436142 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022470428 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028145343 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022250456 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.140283138 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030422487 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022400658 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.141940148 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.137880456 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.135060667 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.137578686 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.027673901 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.134807499 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.131939797 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020910127 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.027819812 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021703358 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.139020013 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023742785 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022390697 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018605955 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027524654 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.144404535 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.140757559 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.141783872 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027999896 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021455142 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020825358 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.140676949 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.142028152 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.020775387 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020138683 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.019903983 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.033697138 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.041750359 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022927889 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025524039 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020894683 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.029796131 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022975321 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.021991507 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.140879045 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019635647 seconds)
  done (took 7.493949004 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.034991729 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.02099531 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020728715 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020177905 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.020712484 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020206671 seconds)
  done (took 1.260125593 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.052409889 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020674074 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.021061937 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020043326 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041588708 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.134954863 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.131482133 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020316179 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.034471262 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030420265 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.133357589 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.134885508 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.131618129 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.020184829 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.129856852 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.029910806 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.131776636 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.023700231 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029378824 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02006956 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.027393683 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.019998828 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020034728 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.136764557 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.021335939 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.029571731 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026733776 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.029638891 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.029308423 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.019956399 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.019979725 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020869941 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.024456406 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.020312399 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.132346624 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024600371 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.01950289 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.022373526 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022217002 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.021297173 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.13914367 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020233841 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.021901523 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.022247022 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.020173861 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.024955146 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.022812355 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.028504978 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.1351695 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.022460196 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.022503923 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.019794632 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.021367166 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.022538635 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.025190787 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020485632 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.022642546 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.135497761 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.020230409 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.024997009 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.019905962 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.021179118 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.020555943 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.021515516 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.023953186 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.022804069 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.024843569 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.020269244 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0203709 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.019651791 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.022885674 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.019660453 seconds)
  done (took 4.100810929 seconds)
done (took 18.698933632 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/13) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 3.921252619 seconds)
    (2/13) benchmarking "construct_ssa!"...
    done (took 0.208572703 seconds)
    (3/13) benchmarking "many_global_refs"...
    done (took 0.083276344 seconds)
    (4/13) benchmarking "many_local_vars"...
    done (took 4.812766573 seconds)
    (5/13) benchmarking "many_method_matches"...
    done (took 0.045893346 seconds)
    (6/13) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.032466701 seconds)
    (7/13) benchmarking "many_const_calls"...
    done (took 1.136054793 seconds)
    (8/13) benchmarking "domsort_ssa!"...
    done (took 0.079715082 seconds)
    (9/13) benchmarking "broadcasting"...
    done (took 0.872844854 seconds)
    (10/13) benchmarking "rand(Float64)"...
    done (took 0.044275699 seconds)
    (11/13) benchmarking "sin(42)"...
    done (took 0.041553955 seconds)
    (12/13) benchmarking "abstract_call_gf_by_type"...
    done (took 0.679941157 seconds)
    (13/13) benchmarking "println(::QuoteNode)"...
    done (took 0.279117352 seconds)
  done (took 14.303761934 seconds)
  (2/3) benchmarking "optimization"...
    (1/13) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.93714244 seconds)
    (2/13) benchmarking "construct_ssa!"...
    done (took 0.595712954 seconds)
    (3/13) benchmarking "many_global_refs"...
    done (took 0.155707592 seconds)
    (4/13) benchmarking "many_local_vars"...
    done (took 4.906299478 seconds)
    (5/13) benchmarking "many_method_matches"...
    done (took 0.05396746 seconds)
    (6/13) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.741280814 seconds)
    (7/13) benchmarking "many_const_calls"...
    done (took 0.362872066 seconds)
    (8/13) benchmarking "domsort_ssa!"...
    done (took 0.189229135 seconds)
    (9/13) benchmarking "broadcasting"...
    done (took 0.265122479 seconds)
    (10/13) benchmarking "rand(Float64)"...
    done (took 0.085403251 seconds)
    (11/13) benchmarking "sin(42)"...
    done (took 0.084116844 seconds)
    (12/13) benchmarking "abstract_call_gf_by_type"...
    done (took 2.054702932 seconds)
    (13/13) benchmarking "println(::QuoteNode)"...
    done (took 0.612941236 seconds)
  done (took 15.178537273 seconds)
  (3/3) benchmarking "allinference"...
    (1/13) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.386095962 seconds)
    (2/13) benchmarking "construct_ssa!"...
    done (took 0.577910532 seconds)
    (3/13) benchmarking "many_global_refs"...
    done (took 0.13786196 seconds)
    (4/13) benchmarking "many_local_vars"...
    done (took 4.850004856 seconds)
    (5/13) benchmarking "many_method_matches"...
    done (took 0.034411709 seconds)
    (6/13) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.734942402 seconds)
    (7/13) benchmarking "many_const_calls"...
    done (took 0.120804724 seconds)
    (8/13) benchmarking "domsort_ssa!"...
    done (took 0.170175156 seconds)
    (9/13) benchmarking "broadcasting"...
    done (took 0.242943876 seconds)
    (10/13) benchmarking "rand(Float64)"...
    done (took 0.066761272 seconds)
    (11/13) benchmarking "sin(42)"...
    done (took 0.065175861 seconds)
    (12/13) benchmarking "abstract_call_gf_by_type"...
    done (took 2.062179401 seconds)
    (13/13) benchmarking "println(::QuoteNode)"...
    done (took 0.575485633 seconds)
  done (took 14.171892803 seconds)
done (took 44.751610581 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.433932882 seconds)
  done (took 1.51925042 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.777396278 seconds)
  done (took 1.871864973 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.043190816 seconds)
  done (took 1.148705792 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.32252169 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.409369767 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.63875059 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.067982857 seconds)
  done (took 2.535158039 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.66745628 seconds)
  done (took 1.790352259 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.198786446 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.149868028 seconds)
  done (took 1.474928216 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.38986982 seconds)
  done (took 1.49847295 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.085420516 seconds)
  done (took 2.197329424 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.182170597 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.117359748 seconds)
  done (took 1.413406795 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.484642963 seconds)
  done (took 1.592398669 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 3.706492708 seconds)
  done (took 4.819384731 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.190974961 seconds)
  done (took 1.341898066 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234577746 seconds)
  done (took 1.351844689 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.547251812 seconds)
  done (took 1.663075146 seconds)
done (took 27.363715473 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.03908044 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.03522695 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.035488273 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.036636786 seconds)
  done (took 1.250975034 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.025858664 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024388621 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.025232409 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.025736717 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022816658 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024306299 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.025139265 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023384998 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023042203 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023758592 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022455618 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023797134 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.024466542 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023438748 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.023998407 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.025528814 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023799374 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02430258 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023062457 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023310332 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.02422699 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023779675 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023507248 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024793633 seconds)
  done (took 1.691976482 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.036291233 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.03271859 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.033043304 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.03272913 seconds)
  done (took 1.252540838 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.027637685 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.027605697 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.036306782 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.031999553 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.028243872 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.028263837 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.035147054 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.0349363 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043549017 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.037877433 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022252222 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.02150068 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020713374 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.028414873 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.034547293 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.0210206 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.026733893 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.028731372 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.027896121 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.029955393 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023485072 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019479022 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.028031023 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.028037949 seconds)
  done (took 1.809919839 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.039378193 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019574526 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.062466662 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044048432 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.041082882 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.01961582 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.043266888 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044117696 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.165206278 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.020912205 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.02576214 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.020877394 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.048203237 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.020857188 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.036246633 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.04724825 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.047652137 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024378091 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.046319902 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.02081669 seconds)
  done (took 1.96051467 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.025763634 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025128345 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.021367743 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019489597 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030231719 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.032711634 seconds)
  done (took 1.282074454 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.021692621 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.020431201 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020965636 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025518268 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020504058 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020413986 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021084396 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020056195 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019937722 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020627586 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020665267 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021014689 seconds)
  done (took 1.373336589 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.151490728 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.025093667 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023826594 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020811657 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021580065 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020964874 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.032543863 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022236948 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.038754939 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020638867 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021265968 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022901438 seconds)
  done (took 1.542147632 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053750901 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055304089 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071579949 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056760885 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064761882 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034977368 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.188951677 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.030667747 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.100875364 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075552358 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064248715 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037756728 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034214563 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023969068 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033458054 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048537001 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092412548 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025268078 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060289684 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.231098904 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060008374 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.068125392 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075443899 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064016466 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035520208 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070947792 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04728401 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033662624 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060361847 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055795275 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061339146 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.05548686 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024642174 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.023226662 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094195789 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.048167994 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057237266 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.04198447 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047111245 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038384284 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044522858 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023874587 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037832773 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.06035335 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.028483843 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0671875 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.037859334 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051549574 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029319555 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075357554 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052881457 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169761864 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033745351 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059818414 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062013066 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043277347 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057145258 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050871294 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026860862 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.067177595 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.045288799 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040448048 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043957604 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029102878 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094734398 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032157227 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.065615237 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046919244 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.032821214 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.046518682 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058541192 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074460476 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059224971 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.057622384 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058101306 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038210421 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060961516 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05832147 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.088853506 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04067298 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025571123 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.057755775 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099107043 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037832139 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056241398 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060079937 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046406551 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026715288 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.036332497 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.065299412 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029545279 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.049524673 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024641616 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.05063342 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058667012 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032628618 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051265652 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05693892 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029030049 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074246809 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05284136 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0252684 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061373724 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051133489 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067241372 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033150412 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.027871717 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056925972 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041224099 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.242888061 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03789364 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030212556 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05385134 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053847351 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037447356 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.263341559 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039038468 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067556855 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050764756 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036006076 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026768097 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.04798507 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050576342 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049826156 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056172883 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033162701 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.034351212 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03469338 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051296309 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047624422 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024863522 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062318367 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.054059754 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.023026885 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026950581 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.028031429 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075305993 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.036025609 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055398676 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070185176 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.02921777 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060134067 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040965517 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061849164 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.052505646 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057087403 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052362424 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.131961006 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035964217 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.028816485 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050558042 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080211949 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.066445644 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036858639 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.034914952 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062550685 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066459774 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041839409 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.058217177 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036152866 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050044944 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050520605 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074393139 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066743634 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038911746 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051201717 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046105732 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.06522253 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025420663 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087907978 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042055294 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066493537 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029456606 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074350664 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.067274103 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03203764 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036976202 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051297266 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.040539518 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060399448 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075956706 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.042453628 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.024913385 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030993143 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072518099 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024064325 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054030733 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046367152 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.041685781 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054647258 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.035997062 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031219866 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022037312 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053450429 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075216953 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023844777 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06144352 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.058689316 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03402874 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.058412701 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.02156937 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052045058 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074190627 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059108294 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051285218 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062290757 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049189061 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055191652 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.061366864 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.056262467 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029686411 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.07056871 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074010417 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030082523 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032968209 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0478418 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08971309 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.070082505 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.052578788 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049441039 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.042073149 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050765961 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036568061 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.050343471 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077572107 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075133512 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.071227341 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031367199 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054906191 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058879027 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048171259 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03091261 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065968449 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.024721519 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056206389 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.170214443 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055274801 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030107137 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111566236 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030503207 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058293127 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024234121 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.022954281 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079183098 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.064005449 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039440854 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03688989 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.070163368 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07381226 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.030858915 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057138104 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055586868 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051420143 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05021885 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05263034 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.038024263 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029035241 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051094425 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033587989 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.024999226 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.060442422 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031396002 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05836806 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031394858 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026740555 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055332677 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052091792 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0288563 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027020456 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040292133 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.072220749 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042612852 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034780762 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059588042 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058679575 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074037849 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045532495 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.052598404 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061237074 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029468198 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.04811802 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023247667 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.043553197 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031898988 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.059232907 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025461189 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040399801 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.02255585 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.069763416 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022532153 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.050963444 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052694638 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049301944 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072897549 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044893789 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069896124 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02727059 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056917252 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050666621 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037097601 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034454992 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047083085 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051909762 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062037387 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.042692785 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051858038 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062062829 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042382859 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079306817 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033342507 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075035714 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061108148 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061204261 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.036991388 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062368858 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071742653 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054951308 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05541206 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029347559 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039418784 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05313795 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053468315 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084015627 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051250111 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025572309 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040379019 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044596721 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050351225 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045580319 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026991643 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061361793 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040395387 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.044373357 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041603819 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.019557294 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048526263 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024919525 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036605369 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.035729043 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03522093 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043880681 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061056555 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06211242 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04703853 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075936545 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.051544324 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.042222273 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.064417691 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058221811 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050692658 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028648552 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028785038 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064798864 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056540167 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.0708033 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.056627146 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046943034 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051104825 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037625936 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051196823 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043816659 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.057435612 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027388034 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.02361118 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022162084 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025085826 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062568943 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04953475 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04407266 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041416165 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025821662 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053116901 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053923758 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024136507 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030576874 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029050231 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035259217 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.178127938 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041444882 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065252902 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.043962424 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0458534 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046597284 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066188973 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.062857675 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02765597 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076989819 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067598718 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027067378 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030836813 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.024997902 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028735789 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0557649 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060719434 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064110262 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.025227175 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037252218 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.035658744 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025772279 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.024678328 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.036914807 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.038002104 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059603461 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047512016 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.060548733 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060061769 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025706723 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049579439 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03905367 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046727724 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.054325662 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057124542 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058153265 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.068854686 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055146856 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052365382 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025787134 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.025043504 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026171071 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029181629 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048767997 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.029565011 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025981131 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071385335 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.041190196 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053067679 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050489701 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035470631 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024729195 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069031332 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023287408 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069509318 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024555933 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026961422 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.032276583 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027511771 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028580259 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057634402 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051226652 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04264472 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061484294 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052709714 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057418986 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088179289 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024356647 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079273116 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025499899 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024009632 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025565664 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047510031 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027608509 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059451357 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051588706 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032718032 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04102822 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024504131 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069998533 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.046223283 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.044736321 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03309338 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027705768 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069033167 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029601108 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.019521094 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036467628 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055918667 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.025964927 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045830306 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.029569076 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028686198 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058255525 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.587242597 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034822995 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.024740059 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04106976 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077988313 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058167404 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036990604 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050524735 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.064242568 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046595992 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038345548 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054232861 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.135867281 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025621568 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028535048 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.038903232 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044776527 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046700032 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.047087558 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.037513395 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.048090089 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.042924863 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029636845 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054130777 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030297946 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039496597 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050621834 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.029199095 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.034469056 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06961018 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.041473335 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.024489134 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026641182 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.057738925 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030335808 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039665782 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.022759383 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048995509 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.034462493 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05048498 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.043344643 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056915406 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06328697 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031977303 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062631999 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.045599654 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060892625 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.182171373 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.0266332 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051608235 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.033370574 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027216083 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067887948 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.020080525 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.05379466 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045890114 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051379057 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048007493 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045700164 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066078289 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044714651 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027897671 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036752177 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.045897684 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024487575 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.026581731 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.02343589 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.028103062 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050112828 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022415155 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028295375 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061285507 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033663473 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046875405 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.038155896 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06415914 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029446952 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051767371 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063067605 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032201553 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048042788 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061703198 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068151462 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084001651 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051441738 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.067571087 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068649473 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.025437184 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.019590328 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02267527 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066773935 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.028479441 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.03834079 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029180337 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068050992 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.035529216 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042811949 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.187969578 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028391058 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.035128385 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030684023 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023062428 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.029033274 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049474418 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036256898 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026768682 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040374701 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027768226 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062811016 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047660581 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037767867 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039227195 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02794167 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037769225 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.059919025 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.079963568 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046031991 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.023638815 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03816117 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05321973 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065155319 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027066504 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027708676 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068270678 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040058497 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050468123 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029350734 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070616748 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075142293 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04699033 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068791951 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023229209 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030037953 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032517862 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082319862 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024555376 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040788522 seconds)
  done (took 31.811626144 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.094845949 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.160575877 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.107560919 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.07947213 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.051147174 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.061207006 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.147828476 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.064553855 seconds)
  done (took 2.015302269 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.02131733 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.044131161 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034317544 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.271214473 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.057321468 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.02085554 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.019513583 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.034770538 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020520898 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.02034332 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.050285379 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021295988 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021423077 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.453507669 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020420709 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.019654723 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020730993 seconds)
  done (took 2.380599118 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.322632282 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.055618068 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.04140023 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.189682141 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.07708374 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.383212828 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028350708 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.030268476 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.486839114 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.318517956 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.072970085 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.109445824 seconds)
  done (took 16.342683984 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.028077507 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.144697802 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.145944228 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.026593868 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026596425 seconds)
  done (took 1.598844202 seconds)
done (took 67.485901836 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.038213994 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.109744601 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.02254882 seconds)
  done (took 1.375827426 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.14370341 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.143606412 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.144800544 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.142894787 seconds)
  done (took 1.797980834 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.027246806 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030409928 seconds)
  done (took 1.285901402 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.257283665 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.280784449 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.058312885 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.035052786 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.032424291 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033135253 seconds)
  done (took 1.333392647 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.02253051 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.022328574 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.023013988 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.023542327 seconds)
  done (took 1.317467935 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.021758363 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020185742 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022650819 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.049102335 seconds)
  done (took 1.340962767 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.053838771 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.051918162 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.111251621 seconds)
  done (took 1.442494837 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.034533868 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.035419666 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031751685 seconds)
  done (took 1.331346831 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.050451533 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.043912055 seconds)
  done (took 1.318304918 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.031038231 seconds)
  done (took 1.25804442 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.04089137 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.047746818 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.213595863 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.169810297 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.232156226 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.20631291 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.020320646 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.02853036 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026431657 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.020078727 seconds)
  done (took 2.23004758 seconds)
done (took 17.89201612 seconds)
(22/23) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.052998501 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.16924195 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.306161827 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040157594 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.610340226 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.298375052 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.814041174 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.041256006 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.056617039 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021757705 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035520019 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.591418353 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.810493864 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.122067444 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.796691669 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.120992039 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.592844147 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022886568 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022089476 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022205955 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.796093924 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022117985 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021968901 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022668249 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.590481381 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.317469607 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022586906 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.120423486 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021778243 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025022414 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.302916991 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022675415 seconds)
  done (took 13.056519656 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026608322 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.07684406 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030478683 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.034700361 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.024083059 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023393692 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.029405086 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022626565 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.065949976 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022093704 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035886432 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020918688 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.02483857 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.02215182 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.036796519 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021319463 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.022702932 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022427275 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021872614 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021905072 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.035444477 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021111704 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021710612 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.0222176 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022278575 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.034139934 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022751508 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022657546 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022283993 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02540401 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.025935576 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023056313 seconds)
  done (took 2.142866584 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070904209 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.080566799 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.031306831 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.055891747 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067189884 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024191802 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.093498773 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.041705718 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.068479136 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022425891 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.036289035 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022310362 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.053173821 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023445067 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.038994048 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022479288 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024393786 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023273254 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022418718 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022882468 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.037674198 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.02224356 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022752062 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023278058 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022403894 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036104673 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022662691 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022652132 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022406178 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025267745 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02671668 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02321962 seconds)
  done (took 2.392928948 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.0226758 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025133123 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.02535093 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.032608534 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020457107 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022920865 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024112336 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020323954 seconds)
  done (took 1.433201295 seconds)
done (took 20.26868285 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037064951 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021300147 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025333972 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.035561657 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.029115684 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.150598039 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.021572013 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028065104 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.026371408 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025827048 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026968477 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019987546 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.02481006 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.02205895 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025956315 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020535894 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.145803018 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024377039 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.142889827 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.14260076 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022936037 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025737539 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029564496 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.143989545 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.141734203 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.140163475 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.030881234 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025406261 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.022358012 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023877077 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.143951845 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.141472897 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.03632825 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.138655916 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020485769 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02020366 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024525276 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.025734082 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.141689921 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.027806473 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.021801333 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028023303 seconds)
  done (took 3.598263469 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.140081269 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.146718021 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.141672306 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030233591 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027930946 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.03119955 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.149695543 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028412744 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028827882 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.147140395 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024373416 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026828459 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.027506846 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021955701 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027803356 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025694887 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028762341 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022874406 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028014218 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027296776 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.148627875 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.02198305 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028716105 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029280555 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024458476 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030033906 seconds)
  done (took 2.67287981 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.027443361 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.039704381 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.042435526 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089922912 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.051421239 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.038480979 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.038039507 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.042063886 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.043790407 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021394068 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.038884018 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.047240681 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.088638388 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027861067 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.051165189 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.035681781 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.0328895 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022990536 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.026079459 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.120560735 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04135414 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.037042574 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.049374715 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.067981585 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020590025 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.050499365 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025566181 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.034134144 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.02903618 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.030654433 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.023034106 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.023183656 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022455127 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.031816875 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.022942646 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020077152 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.040007494 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032489559 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.033792099 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.053408819 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.023839727 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022736579 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.044389306 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.078623447 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020155877 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.022058777 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.030458449 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031943054 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022693151 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.060260254 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035657326 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.022105918 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.038392371 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022581635 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022679824 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037436396 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023079774 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.022741296 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036707186 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.023827162 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.040229703 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026739892 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037677017 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020280612 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029676917 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022549033 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.021627623 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020431901 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.050152418 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.027676216 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.062965698 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022434071 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020027703 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.029762807 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.029188621 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.027619506 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020470366 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03612619 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.032075843 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.023208813 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.036637373 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.02282229 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.023767233 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.075441013 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020911701 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020065011 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020034114 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.021891834 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.023035677 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021865529 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.032833587 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.022112548 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.023851058 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.042787642 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021254598 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022179408 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.02153973 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.020529332 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020876579 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030267462 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022713629 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023644782 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033825985 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021736097 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.023774325 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.045799145 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.029396155 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020056885 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.020605452 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.021422465 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022215028 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.022854699 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.023928849 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02315129 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026020592 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028362789 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.02474595 seconds)
  done (took 5.095649417 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.225571364 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.210246262 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.080234242 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.2479073 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029974754 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.150441461 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.207596557 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.212525441 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022211549 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.065030189 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.059920946 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.17132733 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.161956643 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.175460436 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.17302867 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02307124 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.044596158 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.170701439 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.214173779 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.270306984 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.042080695 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029462007 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.046638258 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.046351503 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.03039949 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.029647494 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.0363495 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029877027 seconds)
  done (took 4.477557065 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.022928871 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.05623939 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025370382 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046040167 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.032681686 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022817123 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023603868 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022331152 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034358886 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.021770883 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022783253 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025433807 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.026198023 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024457444 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022651123 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.02948282 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.029322086 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.022306747 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025358925 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025103318 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032460644 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.038128464 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025357098 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021773673 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.02427299 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021730218 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.021462044 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.024557698 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.023321471 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.022067981 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019592866 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.029917776 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.034921332 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02352797 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021983841 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022103161 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022323445 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022214138 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023792149 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020868384 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020503619 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027929283 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020690176 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.021181526 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.027820651 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024713063 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023234249 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023675493 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024836982 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019518132 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024443715 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024710855 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023529131 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030419968 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.0239281 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024625674 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022754092 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.032497236 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026924759 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021251641 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022064315 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021397586 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023720787 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023116912 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.030719574 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023295573 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020744419 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022532326 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023376615 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.028406972 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021440604 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.027912855 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019736067 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022382008 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023055025 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024738407 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022921532 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.021161672 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021491013 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021387075 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.02277814 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022095154 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021352001 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.023708298 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020365212 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.021825144 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022053091 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.022199774 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.021077223 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020827539 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025737367 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023134705 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020521833 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.02376595 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027239404 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024279288 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.037568967 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.022268723 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022803213 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020072743 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.037095845 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023589312 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021811703 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023708813 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.029577621 seconds)
  done (took 3.906980701 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.046107502 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.021782391 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.040269987 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.053498998 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.033346039 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.02658872 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.03630651 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.021407767 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043220977 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.027660574 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030563215 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020817409 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03413244 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030495056 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.022282802 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031749059 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.023958216 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.039544346 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036259091 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020935947 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031754295 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033947999 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035533724 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038068285 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03754313 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.038452702 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.035391136 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024113655 seconds)
  done (took 2.191308281 seconds)
done (took 23.17593722 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.299718316 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.517250186 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.270385498 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.580100953 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.44121716 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.263632813 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.45336368 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.255453316 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.357001262 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.29443089 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.608266515 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.029414124 seconds)
done (took 60.691928541 seconds)
(2/23) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.263937065 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.404844245 seconds)
    (2/2) benchmarking "String"...
    done (took 1.472120204 seconds)
  done (took 4.13593224 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.568839535 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.29849812 seconds)
    (3/3) benchmarking "different"...
    done (took 1.315089619 seconds)
  done (took 5.438860269 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.299229497 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.752021657 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.521179503 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.256168657 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.262511438 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.620055952 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.07208413 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.671533983 seconds)
  done (took 27.414005791 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.210359511 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.533455927 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.431820122 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.524770835 seconds)
  done (took 15.00098128 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.578192885 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.61625678 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.611914713 seconds)
    (4/4) benchmarking "different"...
    done (took 1.755714353 seconds)
  done (took 7.914677195 seconds)
done (took 69.794120355 seconds)
(3/23) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.256300502 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.704636532 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.281114275 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.407326848 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.272514027 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.327199546 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.272262029 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.288860372 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.255664517 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.255777237 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.229013276 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.258300716 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.018611675 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.259155611 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.257735226 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.298154349 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.717392008 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.256011351 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.286468134 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.415884186 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.667440767 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.273085664 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.26507059 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.328589992 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.174007013 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.315193164 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.302345718 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.260531383 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.579633109 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.266782082 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.26792359 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.258365729 seconds)
  done (took 182.535152824 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.258766294 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.566533376 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.645988765 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.280385657 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 3.977770402 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.474806632 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.447461495 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.106629225 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.257445311 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.288536818 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.724857371 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.257065963 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.76130892 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.299957173 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.265946771 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.294677041 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.72393117 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.727222964 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.271010693 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.465070647 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.282397522 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.659305301 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.6161673 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.66867742 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.278850431 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.363664236 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.278761636 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.280833977 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.033313721 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.709158922 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.292863924 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.27463976 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.352265521 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.132997097 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.275896445 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.278412646 seconds)
  done (took 154.132802827 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.430419103 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.26180187 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.315046184 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.40823281 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.956335823 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.921563534 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.259312511 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.258416032 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.257241375 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.263262664 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.258214117 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.324539539 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.257150333 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.592327517 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.28345229 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.255742018 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.256424982 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.539118661 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.266361649 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.25616324 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.25523295 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.316073073 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.628442654 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.400963441 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.258269143 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.25915433 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.399492871 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.26450173 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.256124899 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.25484752 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.391659454 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.258596294 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.331735058 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.399425137 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.261611122 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.333249058 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.262216383 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.717736365 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.258564235 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.256145746 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.256952948 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.31483797 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.256027804 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.400941386 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.349999036 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.261066346 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.269883173 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.450850619 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.974031106 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.258901832 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.255667701 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.255912408 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.259049463 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.257304839 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.654448925 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.261295814 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.283779429 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 9.968093294 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.26611171 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.257033546 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.255537354 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.25551458 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.256851814 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.261705076 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.357251252 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.975189696 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.698913115 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.637085 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.010043054 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.257977429 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.2561372 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.255635431 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.890313817 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.366443686 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.259360443 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.255219704 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.338302512 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.256391768 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.255435849 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.317986311 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.320922816 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.25802535 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.40033897 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.258882491 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.25565119 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.700465708 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.630667303 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.266432517 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.271606535 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.357007331 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.258926276 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.255496469 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.261396953 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.31925357 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.257709267 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.265303351 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.338416022 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.259672331 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.258266723 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 17.921979064 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.477245818 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.256472246 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.321756295 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.508126948 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.52124824 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.259533431 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.255951064 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.270947096 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.257046392 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.265028972 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.264666555 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.256326984 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.257049719 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.265688931 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.255581477 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.255319997 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.255693298 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.27033989 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.256972491 seconds)
  done (took 343.999906616 seconds)
done (took 683.434042526 seconds)
(4/23) benchmarking "parallel"...
done (took 1.256869272 seconds)
(5/23) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.45427496 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.881919704 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 5.857249666 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.594224022 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.425237946 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.412862804 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.523436423 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.561138424 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.518399407 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.397678951 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.452408842 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.408754543 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.465384331 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.53895551 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.460703238 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.483440556 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.424072472 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.628737011 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.435284726 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.408460918 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.410028424 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.393790298 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.399907066 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.445845547 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.499228506 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.432363269 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.605646375 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.431894724 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.427584545 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.437982221 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.572792503 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.491375201 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.535019553 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.471738413 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.467150374 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.485224354 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.408683836 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.551004201 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.401896713 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.521532934 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.445919426 seconds)
  done (took 67.428627443 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.551749512 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.421866164 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.525442085 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.55232256 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.89357633 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.507180651 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.643434489 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.421921214 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.431363213 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.5257392 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.538823589 seconds)
  done (took 19.291903899 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.438653239 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.443100382 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.562186857 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.558782712 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.633478301 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.51991959 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.59618284 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.426505038 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.427810032 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.52834568 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.537616926 seconds)
  done (took 18.945326374 seconds)
done (took 106.921346197 seconds)
(6/23) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.730212447 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.348241287 seconds)
  done (took 4.336451013 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.285977788 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.273425292 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.269998982 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.270832559 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.26970583 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.268286909 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.310097721 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.280797181 seconds)
  done (took 11.48699554 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.268823454 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.286159845 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.268054819 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.267015205 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.26878688 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.26791221 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.285315295 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.267239597 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.286443205 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.267314794 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.268599757 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.287716583 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.287378278 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.285420717 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.284881608 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.285125582 seconds)
  done (took 21.69067928 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.266866953 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.26714612 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.267753708 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.268039517 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.269186929 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.26721043 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.268639886 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.273444428 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.26967371 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.2682083 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.267757411 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.269465296 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.266516355 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.267090641 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.267518873 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.267420252 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.267995722 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.267354859 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.266958616 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.26978552 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.267328618 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.270166173 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.26937295 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.271001982 seconds)
  done (took 31.69995726 seconds)
done (took 70.486052652 seconds)
(7/23) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.593327765 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.770693712 seconds)
  done (took 6.622158602 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.28127074 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.279698871 seconds)
  done (took 3.859980997 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.629753275 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.289582138 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.819149808 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.544246637 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.291017423 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.293315543 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.727826269 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.291801317 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.293133447 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.290794208 seconds)
  done (took 15.727373133 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.302205676 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.453672728 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.444299405 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.389745062 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.440710909 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.322194009 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.321969126 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.302569649 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.484515128 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.307841268 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.421612014 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.4674439 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.417904673 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.496658102 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.323531638 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.456870404 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.479049294 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.426747618 seconds)
  done (took 26.516817258 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.29081556 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.293974185 seconds)
  done (took 3.843701301 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.418533401 seconds)
    (2/7) benchmarking "second"...
    done (took 1.320603859 seconds)
    (3/7) benchmarking "month"...
    done (took 1.40009341 seconds)
    (4/7) benchmarking "year"...
    done (took 1.387146011 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.323032064 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.301446399 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.320485498 seconds)
  done (took 10.729129952 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.708516831 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.305838602 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.334166099 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.734757693 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.863027635 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.144422636 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.876361307 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.14933345 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.96859095 seconds)
  done (took 17.34287726 seconds)
done (took 85.898887347 seconds)
(8/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.369648084 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.282343153 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.408370053 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.326279384 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.333503145 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.618095816 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.263144631 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.680495719 seconds)
done (took 37.543057093 seconds)
(9/23) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.284641853 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.258643439 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.287025002 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.287612141 seconds)
  done (took 20.090274009 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.25750859 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.513172836 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.286492017 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.942571134 seconds)
  done (took 19.262507807 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.551241081 seconds)
    (2/2) benchmarking "read"...
    done (took 1.620231461 seconds)
  done (took 4.43721769 seconds)
done (took 51.335153676 seconds)
(10/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 6.258828564 seconds)
done (took 7.515600549 seconds)
(11/23) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.341628379 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.34951458 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.340514354 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.343285449 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.340073467 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.344810547 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.269555889 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.342888911 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.347199033 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.342814996 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.343755565 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.168784391 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.341651397 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.657364373 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.26832491 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.169830724 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.287288218 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.34061227 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.660736261 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.340145718 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.287308245 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.344463175 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.3491909 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.34074963 seconds)
  done (took 43.521697251 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.370511493 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.338765828 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.376278378 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.368649067 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.399542148 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.370174289 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.367438723 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.313868739 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.371436454 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.340765424 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.308978561 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.393213347 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.332167585 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.394691034 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.330885156 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.392428858 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.376151812 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.312100101 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.331990761 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.400100998 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.368635999 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.312212556 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.390134467 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.332418871 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.382744738 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.31174364 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.342028354 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.339233721 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.329277545 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.383502154 seconds)
  done (took 41.939463721 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.310953819 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.282028293 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.293637999 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.357818483 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.282479591 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.294795619 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.293088823 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.282621802 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.281099486 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.297776264 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.299350022 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.292681125 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.292144829 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.295126905 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.281760156 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.295266475 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.311784449 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.443132867 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.282803731 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.281245664 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.326827965 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.292924409 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.282797035 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.297281853 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.297099894 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.29709931 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.282478109 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.293078597 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.293188766 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.296347668 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.296124426 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.326623051 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.310857785 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.301620747 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.377431592 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.331018908 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.295518339 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.308745347 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.292916607 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.281741309 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.282590142 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.284068597 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.292811401 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.2811723 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.339332266 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.292582321 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.295033661 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.292615996 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.282547217 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.283336545 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.281941811 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.295065391 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.293539968 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.294794888 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.281835977 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.295601066 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.282526368 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.292078708 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.295639891 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.282226462 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.282933751 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.336666735 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.297170802 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.292300538 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.633628858 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.297251924 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.340397612 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.282501523 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.292419396 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.471749886 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.297858074 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.473070864 seconds)
  done (took 95.512300675 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.341391047 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.372177928 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.362636166 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.360926847 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.370274508 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.338897122 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.370922488 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.730558372 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.874332006 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.38814146 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.73024243 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.370433605 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.876450185 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.388336109 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.383889308 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.360626487 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.389045876 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.370276171 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.339675683 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.390640723 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.382800147 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.369930201 seconds)
  done (took 33.122779464 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.338520249 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.186234885 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.312068085 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.220217193 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.238747226 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.249761505 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.336603978 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.213677182 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.33407977 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.31526922 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.31260469 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.336753591 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.188552001 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.312130947 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.315028399 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.180751472 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.334873749 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.172399223 seconds)
  done (took 32.156884087 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.467458147 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.407762423 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.375271186 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.318282785 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.501629948 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.473442189 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.367723892 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.444471493 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.339120486 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.410218742 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.443602818 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.339746342 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.473706458 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.317477353 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.336267622 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.501968239 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.376222648 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.317617656 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.398021622 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.364803196 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.467906913 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.397313626 seconds)
  done (took 32.098626245 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.334686842 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.340370783 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.356196571 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.355593365 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.318350468 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.331970787 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.354352995 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.313229255 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.209899831 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.33736719 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.312280414 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.334179457 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.171767553 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.343430527 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.383161812 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.313421441 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.340391798 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.342932753 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.338497225 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.316291477 seconds)
  done (took 29.706804296 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.339508746 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.310557276 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.320184325 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.340790589 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.317245992 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.312650058 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.343629059 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.314964356 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.319468266 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.513572359 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.312749502 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.309794841 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.344679818 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.31819831 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.320409188 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.34089885 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.339607752 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.339957342 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.312816242 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.324831499 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.514068611 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.311211173 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.338607352 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.31112857 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.312250629 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.310205662 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.312142865 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.317703601 seconds)
  done (took 38.682389007 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.356899531 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.330401978 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.315642013 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.35746541 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.357460155 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.348995363 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.35708398 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.357669574 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.329937537 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.313738142 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.369664918 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.329578915 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.328711034 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.358719336 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.330485704 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.372652853 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.872802934 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.357287191 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.348170819 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.2580947 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.372321831 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.869785797 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.372209668 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.316528399 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.25793913 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.371511842 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.358345624 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.356601449 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.370652988 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.320494253 seconds)
  done (took 58.577371313 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.298530031 seconds)
    (2/2) benchmarking "in"...
    done (took 1.298377332 seconds)
  done (took 3.855659074 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.310883493 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.391596563 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.32985571 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.4551663 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.460414676 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.447776417 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.440367366 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.356113701 seconds)
  done (took 12.45077993 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.297742221 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.675083763 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.395200133 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.295506277 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.300078195 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.089689111 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.01534766 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.55397249 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.447088322 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.904910957 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.155503279 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.490890853 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.947173853 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.34953711 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.380201222 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.836328493 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.917418136 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.781220052 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.681281608 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.380316251 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.326485815 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.331520218 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.350162542 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.302338115 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.364818423 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.024750818 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.520126168 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.552701886 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.819966779 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.452263066 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.318501237 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.334184541 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.300742459 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.948852872 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.35874105 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.295121848 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.971023776 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.353143046 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.442806828 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.291000171 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.87867459 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.977107183 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.290399754 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.020220129 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.338553495 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.299464296 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.295791382 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.295330219 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.242493723 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.585979165 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.941527906 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.986364581 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.400170694 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.29520457 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.910527057 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.367594529 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.348356777 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.021691859 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.685405238 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.987294848 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.329035879 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.865023893 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.687845557 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.444492707 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.299151452 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.264435236 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.811166952 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.265822264 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.395252015 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.358910195 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.139114984 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.398799319 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.362669952 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.310624008 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.045915213 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.538350324 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.303679697 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.300904797 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.313638094 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.300312906 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.948445996 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.442651744 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.806606163 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.399088106 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.249376445 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.890999932 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.363135393 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.378712598 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.383045294 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.868661187 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.209707283 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.804835795 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.260393721 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.410197106 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.74334359 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.38173068 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.311493996 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.295554066 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.829770877 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.202252613 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.399743972 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.293367681 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.345341708 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.997041003 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.303557034 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.42519329 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.39224164 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.36346795 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.989904061 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.386032477 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.301874839 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.386412007 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.938408639 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.217981511 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.310656326 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.474852722 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.95143736 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.163178703 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.812355338 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.274715656 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.049279837 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.980936574 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.389576043 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.811397211 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.326583131 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.165854842 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.833559259 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.464507158 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.982317609 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.364799542 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 3.909174866 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.417246596 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.294840978 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 3.642642579 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.317339442 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.297846031 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.31681399 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.372613463 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.297829635 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.298385895 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.254670704 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.183130097 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.943919195 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.370369876 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.275780461 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.375185732 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 3.978202384 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.075009158 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.64899176 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.399556239 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.296084479 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 3.932890014 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 3.738437069 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.507780593 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.367971364 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.295823449 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.293607349 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.825418445 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.662105719 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.34348401 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.373319085 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.778278387 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.21496572 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.305064473 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.303965223 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.490782029 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.46746369 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.305840644 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.82983937 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.440495117 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.972264623 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.504320707 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.338970502 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.370903238 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.31495147 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.295672273 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.294339403 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.78427326 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.581955447 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 5.243672816 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.542932447 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 4.96159413 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.328599889 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.974209102 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.335236602 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.981553339 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.15439553 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.396106881 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.360895665 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.368555521 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.303394112 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.481723912 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.648535172 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.113885917 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.612482835 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.072835286 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.892879344 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.219364339 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.614908295 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.4133788 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.398530466 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.624376348 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.426332802 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.295236379 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.292963131 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.268216062 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.135149529 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.420573 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.097566337 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.469139917 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.29374755 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.396003042 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.362838022 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.37450944 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.347004617 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.800296853 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.72685448 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.370115315 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.057623612 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.871886872 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.323451627 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.301591916 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.915609332 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.337193431 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.301530617 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.744776803 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.148187306 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.881110187 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.688691663 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.206371815 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.018331404 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.531324284 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.179279506 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.395145279 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.567855679 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.344764292 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.285135668 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.006905316 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.746761381 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.376710778 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.572283254 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.464446593 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.878853623 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.361389043 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.693039948 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.356139201 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.263502391 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.357452372 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.298159813 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.002340512 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.341936945 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.388159487 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.360631193 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.244077581 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.773855038 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.579248923 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.339057244 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.271327089 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.005885255 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.817590055 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.928320322 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.375470312 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.611004357 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.056205742 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.22342869 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.481684355 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.181782134 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.192079556 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.396894897 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.298865901 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.294824564 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 3.901375137 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.33106876 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.296410902 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.155539418 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.894697486 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.105513149 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.213284937 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.306903746 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.303239461 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.95053019 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.78580953 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.665715187 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.095589945 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.53663049 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.478089179 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.359223326 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.873367621 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.320352783 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.829557377 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.209352768 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.381140651 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.39769376 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.361769337 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.015742115 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.377709225 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.111803674 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.219714144 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.889501496 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.206941772 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.859422914 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.363449475 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.459341721 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.500348956 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.201825461 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.768862775 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.417456463 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.541898825 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 5.477056237 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.509633184 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.961398279 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.847751836 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.7957651 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.317540132 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.34515186 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.304531024 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.498576237 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.94167275 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.31517166 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.789935911 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.259555243 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.004282452 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.028633644 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.214032971 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.32317601 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.307122012 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.3840738 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.0354123 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.616692719 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.701281051 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.35014134 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.298771895 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.313370102 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.960238347 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.714781947 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.492405759 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.516219059 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.894534264 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.390016562 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.299863835 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.293778645 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.293118808 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.300976134 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.361343315 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.315249847 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.111422531 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.392286079 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.940249989 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.212317646 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.316875441 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.062695813 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.368165517 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.30135095 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.634994574 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.310111839 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.237604344 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.338690242 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.293340406 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.424571493 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.430405138 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.037274154 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.937548546 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.039512957 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.271180874 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.614206468 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.400785074 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.431659542 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.329388034 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.819374953 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.311199193 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.033945342 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.203772263 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.367913901 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.044934331 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.968733923 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.523804519 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.955601745 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.99470399 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.840840227 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.380092139 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.654997119 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.317877782 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.410547344 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.31266451 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.930316475 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.355938086 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.340913615 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.753273839 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.254434794 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.058392704 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.930866331 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.338911125 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.686403521 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.450922778 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.362865126 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.299455723 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.300076056 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.223517732 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.370189569 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.311886488 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.487809667 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.021039476 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.384115253 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.844121122 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.574633317 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.578779779 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.394276699 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.305773108 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.356887343 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.336701285 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.917800319 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.38004729 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.78042951 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.451959794 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.341378629 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.632217557 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.334945937 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.103279618 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.019488336 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.349610665 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.294294548 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.04015394 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.917271612 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.396105774 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.907972011 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.137659467 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.49179504 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.110743747 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 4.644805273 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.35454303 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.011629565 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.360581259 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.962215245 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.31022412 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.842152605 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.400966762 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.026996034 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.60073612 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.201662119 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.396624894 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.785693121 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.535751693 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.406858602 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.668550993 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.46929739 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.299151434 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.97329684 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.080367186 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.69116762 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.367620321 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.296546691 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.332189591 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.390235492 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.556780308 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 3.914589686 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.322693591 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.310926187 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.914472077 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.907758539 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.222301407 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.307778651 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.315063945 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.559678701 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.422324601 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.298172342 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.422414734 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.57216194 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.512576036 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.488457029 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.777079355 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.393553671 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.988457889 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.813509754 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.268318213 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.33859108 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.296796618 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.29805727 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.294108148 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.145637616 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.384229126 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.29975587 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.599044434 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.392120178 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.572588836 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.033358988 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.04230047 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.317324262 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.425393637 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.392495585 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.476354393 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.668895213 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.203587396 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.290699261 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.010264224 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.98571573 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.410763364 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.354515643 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.298540665 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.924012344 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 3.705407749 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.003887412 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.02149222 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 3.971000642 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.33134412 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.408336 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.346415422 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.901613226 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.393390908 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.317986861 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.480082038 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.514700609 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.124556998 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.37453129 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.183923951 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.350412769 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.315076008 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.99469654 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.360025814 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.305253791 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.296594822 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.733264277 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.093954354 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.365132496 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.580795274 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.126429318 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.367322743 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.924302517 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 4.985324105 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.935581999 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.318898252 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.593978234 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.775962157 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.409723924 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.969118942 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.756497704 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.309122871 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.251635258 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.362147401 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.365406828 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.305159156 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.296487666 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.143310938 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.396804843 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.296642537 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.487694809 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.012366647 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.303154301 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.338140389 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.015396191 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.412839559 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.300031769 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.582910162 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.412683549 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.31452912 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.297327214 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.439665497 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.556838211 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.39251317 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.295946237 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.07799172 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.386818536 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.013435402 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.911232129 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.477701463 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.360727136 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.295106897 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.298001951 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.5269513 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.911088577 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.431854845 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.332946591 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.005114747 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.505145702 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.960616726 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.175146024 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.479251903 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.675059736 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.35310463 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.294797583 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.116962993 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.054422583 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.981312656 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.96855779 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.953714366 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.333530752 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.370654704 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.91632631 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.313854767 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 3.711340399 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.339293909 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.314197817 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.295427339 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.300049528 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.496585926 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.966294908 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.359537865 seconds)
  done (took 1385.514173761 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.539318318 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.330543759 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.315451471 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.319034545 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.36823338 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.329274927 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.315533578 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.329503864 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.327265199 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.345379195 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.316020457 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.321447441 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.346282606 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.536437397 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.375895605 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.344490878 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.317330197 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.32923119 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.316840292 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.329483045 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.345830174 seconds)
  done (took 29.661655702 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.339174082 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.320071316 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.36920586 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.390945249 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.367098537 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.338743705 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.369153899 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.338964533 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.390865725 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.319697123 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.391087799 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.337498206 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.321895099 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.318845249 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.321742915 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.384867507 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.391469073 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.367562367 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.340276685 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.368311435 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.38641478 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.368250383 seconds)
  done (took 31.10391745 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.303058576 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.297504564 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.412939492 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.355558489 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.298273416 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.374636383 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.317194381 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.359003562 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.001185287 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.913581925 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.213009149 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.993078823 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.306069019 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.274261832 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.375971607 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.297522168 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.295920522 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.296001545 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.294489006 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.302778943 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.303061617 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.964539637 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.367080912 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.305620676 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.803393205 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.428531651 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.295148425 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.30303717 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.300210408 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.036573638 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.197082323 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.328355802 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.59202492 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.363367789 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.246901153 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.927726963 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.21181032 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.310394426 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.308175705 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.294625411 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.27973925 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.774043822 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.314956331 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.306324134 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.135978308 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.351880791 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.317925645 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.351959385 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.992258218 seconds)
  done (took 90.258390809 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.360863307 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.438416886 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.335230356 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.357576636 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.426074023 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.352775938 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.359279522 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.354756127 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.330580007 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.326201202 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.441960715 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.466143817 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.334732962 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.35440865 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.395887742 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.333747255 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.334106951 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.334447383 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.334022735 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.335186391 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.332307669 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.359891123 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.422442826 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.458808236 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.355309422 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.334721867 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.332188253 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.356280481 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.460298488 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.342422651 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.3551074 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.360465298 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.430125439 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.419102671 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.333589833 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.344150508 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.430010215 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.333721048 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.35690059 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.325181985 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.348859277 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.356512135 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.355493766 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.434971609 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.33664806 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.395965596 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.330455516 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.324596027 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.460793537 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.34632346 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.365131482 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.469392367 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.358407472 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.332374452 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.355417758 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.421049277 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.329235017 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.327773423 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.345764217 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.45945229 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.323745066 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.358373169 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.467725902 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.344932859 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.353355582 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.46878306 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.398778692 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.358396794 seconds)
  done (took 94.540369637 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.349889033 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.400811264 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.449502586 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.451378035 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.403397853 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.392257613 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.40386242 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.401170683 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.402823006 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.413419613 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.402213789 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.363537077 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.375132953 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.366247883 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.403291142 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.388189244 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.385931038 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.390055223 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.403493042 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.405485928 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.385680302 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.448447663 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.401711747 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.449763277 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.611185338 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.375614977 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.401037217 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.403537479 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.451381021 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.402032443 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.608761941 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.402787619 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.403367033 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.451118234 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.607763619 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.399263834 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.34923656 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.401177818 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.403969779 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.401081232 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.375916171 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.451689413 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.39754614 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.375787487 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.391128762 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.398900741 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.45113576 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.609644619 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.365492042 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.415247536 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.402368538 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.450477725 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.398078223 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.39097699 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.449296699 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.381793325 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.44936654 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.450818499 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.404068009 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.450029781 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.450679076 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.37870301 seconds)
  done (took 89.263512716 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.383506823 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.384094493 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.39063864 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.308720102 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.334931642 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.403037329 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.335255063 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.333751592 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.382830566 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.383067688 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.24904567 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.388673586 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.475008229 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.249622076 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.404202252 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.473351519 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.389692951 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.406360323 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.382687208 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.401303464 seconds)
  done (took 32.723172145 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.336886861 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.410219822 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.347375193 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.450869774 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.364111665 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.391586666 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.356744177 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.144074431 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.204841676 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.145591375 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.436019518 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.434611268 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.203992435 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.449681849 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.41095786 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.393016147 seconds)
  done (took 26.743208153 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.341970006 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.353441795 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.311752754 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.308331827 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.342047885 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.307807862 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.355338796 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.300953524 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.350192738 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.685439356 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.32690132 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.353247767 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.361611205 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.304723885 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.307315387 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.352203241 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.350821224 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.308244161 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.357512333 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.305997074 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.781009576 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.309132811 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.35441181 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.319142682 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.342299035 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.779637662 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.313775532 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.344538397 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.305933952 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.3537832 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.342350334 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.684035788 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.344365085 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.309057212 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.307488763 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.306381535 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.357910283 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.35456204 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.354188941 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.358785347 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.322322167 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.342956252 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.361960816 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.323058564 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.347737643 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.352803508 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.347497303 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.670199697 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.306918714 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.342706948 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.35646274 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.309795224 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.32137831 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.697820155 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.32889617 seconds)
  done (took 76.904500904 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.34084493 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.34937635 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.316836945 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.332853133 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.354395815 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.318654445 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.340767114 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.183124356 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.319584245 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.33669475 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.35409073 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.210901837 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.322303122 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.350024524 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.355246836 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.338254125 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.317708114 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.383301003 seconds)
  done (took 27.08691251 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.335578086 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.376770602 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.338287335 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.33587665 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.336129584 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.385230351 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.319605401 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.337279111 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.743916406 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.338410514 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.795777745 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.338269972 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.743092406 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.337510694 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.376560007 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.794702672 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.335578285 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.321826547 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.334607656 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.317089172 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.384304213 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.321452171 seconds)
  done (took 32.511636295 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.297479552 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.307064953 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.273298507 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.272669143 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.27319059 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.290456468 seconds)
  done (took 8.975629536 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.333606014 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.365448865 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.316994048 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.346190494 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.367909044 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.355478395 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.356249245 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.355670242 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.370684855 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.558856863 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.358214566 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.374398135 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.371519852 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.402255705 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.364040353 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.367323199 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.35662934 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.358436474 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.327894303 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.382489372 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.363885158 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.369889262 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.361335212 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.357674911 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.354147109 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.403055222 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.36915636 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.560461584 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.355868772 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.369491074 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.363487379 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.353656749 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.374794692 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.553104879 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.345601029 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.372445846 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.356086326 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.382958567 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.363243277 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.39757743 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.337338096 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.365929602 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.36925308 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.364142028 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.370420413 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.364782849 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.364367159 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.354101589 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.361314156 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.58335564 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.36745353 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.400477277 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.366006656 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.375185413 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.368812905 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.577626895 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.557980686 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.397842745 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.362656691 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.558877667 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.400908413 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.362780419 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.401577616 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.559142227 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.364895532 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.40110258 seconds)
  done (took 93.054492734 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.400103141 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.316997796 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.35366651 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.560282496 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.399883887 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.359017953 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.36169533 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.350556162 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.351076077 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.3361277 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.379964491 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.358793706 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.402913631 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.402900361 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.358578655 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.358975743 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.358647086 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.396087849 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.335258541 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.577218556 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.359111734 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.401259706 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.400890131 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.398926478 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.553722043 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.367290696 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.354716226 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.358594042 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.359742709 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.358257189 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.369072319 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.359025744 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.403246462 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.316667826 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.40046528 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.360349254 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.359116895 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.368286335 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.358951765 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.367138999 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.403487548 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.378767481 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.360835269 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.35942958 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.554234324 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.351175983 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.351793473 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.335127431 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.359170452 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.335723252 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.555258683 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.552922936 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.562895271 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.399477458 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.358096184 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.359014604 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.359326344 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.356045585 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.358615946 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.364453072 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.399662997 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.358575721 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.574246624 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.358082683 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.353945785 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.403615297 seconds)
  done (took 93.02330674 seconds)
done (took 2534.249001996 seconds)
(12/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.302358176 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.371008778 seconds)
  done (took 13.935221759 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.273844762 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.275800066 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.469032232 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.275903945 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.287998746 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.323102049 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.288233019 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.273159273 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.274035488 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.376229795 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.277699422 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.445969453 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.400965322 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.273160126 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.295900747 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.276299097 seconds)
  done (took 42.363790732 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.811652951 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.3447137 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.864858461 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.754427252 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.980103379 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.006874427 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.286925288 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.270278281 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.495316984 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.645979473 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.470175166 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.694787779 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.782673045 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.946702799 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.763322304 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.823783202 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.823447783 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.899192652 seconds)
  done (took 52.929551782 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.269086514 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.365296331 seconds)
  done (took 8.90954914 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.267651969 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.279794602 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.267475904 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.271830392 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.285247866 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.297402041 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.279196636 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.285702302 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.297770202 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.265644074 seconds)
  done (took 64.071163755 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.833559433 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.678773156 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.573974719 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.616797942 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.186479018 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.622889679 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.419325559 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.62224254 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.348009035 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.262635536 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 3.997179348 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.652040081 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.618300168 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.84913171 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.724993295 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.409273851 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.579209201 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.749806191 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.586880782 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.201918773 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.382525334 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.97242261 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.654547841 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.035591801 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.276388585 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.032297973 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.309016659 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.37450718 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.35136642 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.775607774 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.005633792 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.282860331 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.983197776 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.440976842 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.292311431 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.761866266 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.834948453 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.445766977 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.485816342 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.511991735 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.612823457 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.038177577 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.374020534 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.999453505 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.473070083 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.201847178 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.093996595 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.55926844 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.366616685 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.440931643 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.557913361 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.436006645 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.462887784 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.438337491 seconds)
  done (took 146.064160079 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.261523848 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.404383286 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.421014527 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.265032485 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.504874065 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.454392716 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.721466445 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.586687144 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.273394086 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.464622012 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.407897692 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.359524209 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.266457078 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.266997431 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.265298284 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.264612324 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.42801337 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.656969055 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.276706596 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.262422302 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.470754902 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.415196008 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.375499435 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.266757396 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.415793524 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.489642783 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.659018232 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.353891835 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.751768374 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.264339669 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.619095501 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.586078457 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.267342768 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.192551412 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.606398972 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.475526285 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.605194157 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.270416165 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.262592607 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.263288655 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.927797075 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.44955112 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.485330611 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.41040924 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.510430941 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.493393597 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.784073947 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.264547218 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.804401651 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.435961872 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.47283632 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.475399346 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.533218557 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.270318261 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.202283268 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.263183566 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.81159438 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.501306313 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.49022716 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.351906741 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.265755102 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.262643153 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.262817865 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.487587369 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.265220857 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.343100608 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.268636407 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.262651267 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.344305073 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.352218605 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.479803567 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.498424528 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.493863614 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.562582456 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.732893462 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.445895823 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.58408823 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.47414927 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.265279976 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.262058011 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.574900753 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.855570116 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.396840607 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.48441263 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.492657629 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.462777486 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.851202136 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.26282354 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.395873801 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.439222677 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.479319475 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.511842445 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.538946607 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.21397755 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.262798857 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.262299036 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.248331195 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.398395571 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.326778918 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.41517189 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.512003646 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.661482136 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.51822111 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.541530189 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.369275096 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.268591343 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.853911382 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.263643841 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.471040474 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.556492318 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.2723052 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.266504849 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.416716974 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.058618633 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.264224679 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 4.724837021 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.579629595 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.274491515 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.421612463 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.265338375 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.485734412 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.218718926 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.476145919 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.496090929 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.523932088 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.450725121 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.509776977 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 4.454764267 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.497254616 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.519752522 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.605420841 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.477891254 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.480249688 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.264829682 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.552308163 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.265953047 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.262680363 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.436117447 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.024912441 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.4261965 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.266039346 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.496977469 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.419226311 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.560211117 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.27787647 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.505011928 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.494768332 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.515351082 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.277599081 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.398651622 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.26424462 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.104129547 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.429598676 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.263348386 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.263320168 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.625476826 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.264871488 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.424490253 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.47609188 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.913757962 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.634390757 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.683632494 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.628226059 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.565023945 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.452830639 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.473481554 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.829584306 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.40322284 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.815102764 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.463410645 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.262581378 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.480727676 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.449450353 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.267485393 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.263714901 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.021113615 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.969125067 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.263487365 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.427392354 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.857854995 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.42680701 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.445003512 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.269294477 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.552980171 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.279315854 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.110551358 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.40849451 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.240451386 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.263201167 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.264352999 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.265530987 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.26693069 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.458174109 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.50754185 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.585583129 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.402077363 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.546808481 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.515479235 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.476033494 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.525092506 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.275048566 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.473936529 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.266107439 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.595231594 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.273455809 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.37577469 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.533291441 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.267647376 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.45303592 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.463579912 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.037614756 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.543991508 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.224931502 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.265902509 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.754214069 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.407266187 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.577272872 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.267392851 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.26395247 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.550619508 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.370426471 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.451907097 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.235694759 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.315359098 seconds)
  done (took 750.917212073 seconds)
done (took 1080.452692209 seconds)
(13/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 6.274312322 seconds)
  (2/4) benchmarking "arrays"...
  done (took 6.383230568 seconds)
  (3/4) benchmarking "structs"...
  done (took 6.361901843 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 6.380710247 seconds)
done (took 26.664611444 seconds)
(14/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.26342744 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.263741654 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.26444489 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.265958076 seconds)
  done (took 26.321654522 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.895661856 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.91902204 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.609396855 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.454449716 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.096158728 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.556998879 seconds)
  done (took 11.796236749 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.247000066 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.264208999 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.263948632 seconds)
  done (took 19.039685746 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.770787882 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.776965582 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.40606504 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.354660366 seconds)
  done (took 7.573689149 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.313435366 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.306936381 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.306848943 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.308138608 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.304282753 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.301769472 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.319866454 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.308675628 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.31116928 seconds)
  done (took 13.050397466 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.081110469 seconds)
done (took 83.166423171 seconds)
(15/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.530152977 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.462944309 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.267695016 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.415354891 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.388592683 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 1.947116859 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.496892462 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.37327775 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 1.35726609 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 6.262569 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.325747062 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.497138887 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.583306945 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.608963531 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.111757768 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.063494955 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.386088568 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 1.947179102 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.590124559 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.503597199 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.299192981 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.307619689 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.335575124 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.530196466 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.401822595 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 1.950338879 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.294849863 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.362046361 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 4.920583994 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.305463543 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.996181174 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.337633635 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.456168764 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.124371064 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.016346231 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.329550497 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.353094744 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.629742186 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.326955508 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.497310808 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 1.946805546 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.362175185 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.085747315 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.993259045 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.573481294 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.269807922 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 2.060723817 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 6.268291708 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.396612332 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.62332142 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.47152779 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.347965479 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 1.358035904 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.262885524 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.437149908 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.556176189 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.285374559 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.976485129 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.369614956 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.436114525 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.409257709 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.589633413 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.279288578 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.708298043 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.337354805 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.358447666 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.264525985 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.244579288 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.731666688 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.062273135 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.241830345 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.356524826 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 1.52661879 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.304113319 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.263982479 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.060331368 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.292461185 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 2.370647072 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 1.953438887 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.14642324 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.740612086 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.600532559 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.360611533 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.722710838 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 1.437196457 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.325826459 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.304372854 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.310342755 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.979947601 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.341241741 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.264589855 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.28224162 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.491154661 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 1.355725915 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.087202644 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.26547735 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 1.419034889 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.220201866 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 1.702403424 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.385752016 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 1.96084879 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.265722067 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.393526001 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.486455492 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.354398013 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.214666272 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.226195026 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 1.96678241 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.074381443 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.592351076 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.208621638 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.594137013 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.665539169 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.22444649 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.500081311 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.428509732 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 6.503307609 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.267526223 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.274616069 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.986823395 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.338259883 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.59348846 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.384927161 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.713846584 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.330794743 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.306047744 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.432714534 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.486831301 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.951132119 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.312826358 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.372313345 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.264112877 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 1.970668063 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.378186155 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.196171072 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.356059433 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.602668798 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.27023004 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 1.944905509 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.374058698 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 6.269682995 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.711306773 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 1.951821346 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 1.945903808 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.266036585 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 1.946301455 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.49001958 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 1.605403361 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 1.944466196 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.034552815 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.329440731 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.289724642 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.390195478 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.328856214 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.355221619 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.269888573 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.517236625 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.48107922 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.265380147 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.349498836 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.267124178 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.423429162 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.108987847 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.272568096 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.653931164 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.30833261 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.464637368 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.612336076 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.267082081 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.367458049 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.386075165 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.372042841 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.360445699 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.484969645 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 1.53739788 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.375005713 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.265071419 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.503368434 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.136928746 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.427904629 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.495201753 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.392160568 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 1.527812316 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.452280412 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.295900801 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.07174887 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.56281355 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.690228208 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 1.438056971 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.759250329 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.4209166 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 1.950136792 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.066845755 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.391925786 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.598172898 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.562229588 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.945786823 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 1.948390836 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.925083035 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.372503535 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.15106745 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.270957269 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.356928586 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.334641583 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.334452275 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 1.959463867 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.267093343 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.286060706 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.403983468 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.31398696 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.256133447 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.094741635 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.752696025 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 1.962449952 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.066224841 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.835835507 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.488335384 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.361676004 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.931869326 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.634793032 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.271227804 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.494581882 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.083455461 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 1.958223596 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 1.425516626 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.605161231 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.117211948 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.305457589 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.266172106 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.401892563 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.087889953 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.871490667 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 1.970677775 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.305889191 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.527683344 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.005961471 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.480213764 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.393532536 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.571245014 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.26174388 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.322512042 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.540530571 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.490902758 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.353690141 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.474006853 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.480913025 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.683430977 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.341989936 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.248279054 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.058843725 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.335907213 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.475366606 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.268058593 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.17839353 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.085460818 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 1.947344197 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.597477091 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.488444318 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.091474542 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.423055298 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.421797006 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.478851014 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.267387362 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.079378852 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.306448555 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.59743519 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.455108394 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.082694004 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.306124584 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.317147603 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.591898625 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.271476487 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.587711712 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.988015268 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.379840685 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.397120098 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.372249658 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.100211169 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.204728691 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 1.94880723 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.329427604 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.457579895 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 1.451346174 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.073210898 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.37748454 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 1.945190157 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.167529081 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.43476487 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.332623518 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.01480328 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.409415196 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.411478455 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.435754822 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.418886583 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.964064002 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 1.60194195 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.611619371 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.800571273 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.264579941 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.566207506 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.314033739 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.310458577 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.559908343 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 1.947533009 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.401452427 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.466903772 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.164507312 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.355276798 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.265713272 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.317033653 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.664239224 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.879698387 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.298144978 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.934171138 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.307718939 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.265266056 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.588761496 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.559296988 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.357142258 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.409873883 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 1.279027514 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 1.945064581 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.384835415 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.636524599 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.426821434 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.270021419 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.26859079 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.755630701 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 2.443490541 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.433162073 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.450723086 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.739775225 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.266278635 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.254104053 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 6.266699966 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.058470567 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.336102842 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.018090391 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.95138364 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.608159627 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.316526248 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.385885332 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.39868565 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.439998698 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 2.455036748 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 1.954856661 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.134697715 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.538303012 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.308601779 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.621669343 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.408583732 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 1.95442267 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 6.265764282 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.498145024 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 1.946497455 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.37942499 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.375770662 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.267859831 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.309915564 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.439944257 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.320918527 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.62878262 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.310685857 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.595803028 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.351033057 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.654681237 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.298266473 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.449760797 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 1.383998965 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.6034319 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.469668406 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.570445429 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.387946609 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.31305267 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.459984174 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.352777141 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 1.94614483 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 1.292582683 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.32666876 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.397060217 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.658951435 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.898627181 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.595600178 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.141954209 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.421224544 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.11812647 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.124572559 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.961583591 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 1.497365495 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.26676099 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.988288161 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.391862948 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.442677482 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.649878877 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.658570595 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.212263081 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.642562002 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.385876221 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.091135972 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 1.443836162 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.264288934 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.217210776 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.264981049 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.495919794 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.295423596 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 6.353804667 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.314911302 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.355356382 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 1.451912536 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 1.290708965 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.342673886 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.265182916 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 4.383998585 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 1.30690521 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.39399812 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.625085238 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.130966795 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.11583558 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.355626267 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.448641233 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 1.392742053 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.476450824 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.530730507 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.921721106 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.371706789 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 1.945372077 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 4.33518901 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.193445455 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.420062777 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.328961806 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.46226657 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.268024022 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.616525264 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 1.389826472 seconds)
  done (took 1110.498916753 seconds)
done (took 1111.936053136 seconds)
(16/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.314177594 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.281347605 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.338303468 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.291304478 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.28055397 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.295510863 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.343308241 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.327544797 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.302251247 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.298658214 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.373059045 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.302221387 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.296309542 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.38701917 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.283357228 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.30027649 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.284937186 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.295832106 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.349422931 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.324706104 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.301186423 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.28999956 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.319601649 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.305738766 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.287503462 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.290210914 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.305199079 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.307137925 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.352372128 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.30744466 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.300362654 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.281999111 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.307977666 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.312068009 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.316964763 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.365075739 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.312373844 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.300620625 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.296043557 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.31139084 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.379931479 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.321250433 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.27944385 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.31243934 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.303754617 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.290953149 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.331560759 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.285457959 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.301555699 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.310588311 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.28542539 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.36254264 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.28384575 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.42734144 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.301929875 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.284168881 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.319168009 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.318596519 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.293384895 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.295494548 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.316590379 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.341647906 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.337507722 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.291777045 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.283768305 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.327195985 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.303480486 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.310573432 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.325008186 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.308286058 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.300419771 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.288926678 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.39290909 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.297270294 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.288249888 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.304193074 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.331985448 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.303169027 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.424819093 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.308619226 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.290060397 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.297134685 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.328525728 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.405721075 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.298046836 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.292745332 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.285241969 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.299196065 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.302109907 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.281000549 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.291104618 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.303449529 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.338359394 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.280626067 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.284533208 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.302605868 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.306986593 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.410984422 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.323007037 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.395126174 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.32393536 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.29822003 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.303517769 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.307065554 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.311842091 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.338638931 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.325757217 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.285669395 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.29053102 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.324377652 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.284846164 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.351553531 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.312207069 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.314200081 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.310561674 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.36491733 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.328528888 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.288236387 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.299485618 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.315870956 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.28890325 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.351263687 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.289870003 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.324625157 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.292791742 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.295795114 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.283162197 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.285194556 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.443627688 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.356512727 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.317198026 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.376284168 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.30599031 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.304581346 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.320059499 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.293291376 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.293263441 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.430045141 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.37568753 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.292334483 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.301416619 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.303273815 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.310181202 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.29410088 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.282942525 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.29934136 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.287109954 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.283716526 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.29088311 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.321853976 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.408226123 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.283770905 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.30056437 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.292484954 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.293117682 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.30046646 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.303050922 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.28753516 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.296808624 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.290792459 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.33968728 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.323446466 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.307444076 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.301574352 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.31411444 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.309129106 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.343018547 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.294167933 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.282815858 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.426076481 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.35801894 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.309608879 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.316610259 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.28502136 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.315109585 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.286501631 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.280070302 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.344255582 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.447462941 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.299335918 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.294113735 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.306586021 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.283938649 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.297997394 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.329247783 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.30905345 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.387897309 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.302088055 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.308247173 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.37844696 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.304719453 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.287682571 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.30079182 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.330328814 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.404807882 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.323646459 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.311864297 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.298689095 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.308878485 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.303357157 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.295441598 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.307846066 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.409695389 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.324476107 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.297320352 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.361670837 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.313614269 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.287747323 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.437390594 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.286451611 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.398413601 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.302567981 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.297352579 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.29782687 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.325717254 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.287035744 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.292179897 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.29860204 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.445167549 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.310684951 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.2981398 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.316019335 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.344395134 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.297115011 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.293399486 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.296109298 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.309565316 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.285245213 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.345848741 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.296801381 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.318812848 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.430511626 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.309185972 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.341898762 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.294731087 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.317363587 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.337799421 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.322063948 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.297074395 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.303894208 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.323677872 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.313057301 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.278492598 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.282970754 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.316215749 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.320069002 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.311815481 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.289048415 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.300028766 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.284788214 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.29899437 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.388561208 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.297828329 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.306013013 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.405992792 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.31359278 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.312668257 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.320959464 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.359073262 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.316317438 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.308055807 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.28678063 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.312583165 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.303519073 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.303415401 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.311597645 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.319248923 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.287023777 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.314972572 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.3001065 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.340575495 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.286028159 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.294031443 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.30012332 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.301554025 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.293318159 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.292139832 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.283597528 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.298478225 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.279345655 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.305108412 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.302131488 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.316262204 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.307251196 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.316243036 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.299337241 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.425614579 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.301754477 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.285333687 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.437553793 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.292448927 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.408537893 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.29562028 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.292674447 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.309949816 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.330883478 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.308363124 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.321943971 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.313791008 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.342884507 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.439097313 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.325840906 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.284286377 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.331051295 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.358510715 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.30110661 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.288337865 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.297370949 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.324078053 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.397189885 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.298500358 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.352975772 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.300482551 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.292254479 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.44871026 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.300508831 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.331476877 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.30878425 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.29966092 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.347952531 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.295941454 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.302747413 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.295137834 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.444473057 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.373967348 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.319934204 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.306250322 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.32416037 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.321799454 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.287048113 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.337035484 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.3149577 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.298615141 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.285245909 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.328659354 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.328045624 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.291126485 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.302965016 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.429277911 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.301495965 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.305097447 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.309166075 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.285297225 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.282017088 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.294131142 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.350717146 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.29243086 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.296314372 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.298166027 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.308641217 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.295063358 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.30268749 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.329000104 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.335267825 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.288118225 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.464152574 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.33980854 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.299721429 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.31277238 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.280163519 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.290960477 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.285763204 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.333259256 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.324928058 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.302916134 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.299224142 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.29894623 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.307404402 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.304284374 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.282355872 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.2981468 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.379675421 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.308079119 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.317873883 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.323076586 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.314585274 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.305390634 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.304508629 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.305525974 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.308513549 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.300562547 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.290309029 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.345568325 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.320247489 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.302489737 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.444918929 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.311222097 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.295287912 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.322705158 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.291611119 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.303287172 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.310856366 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.325468901 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.286384234 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.298996759 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.290765398 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.308782924 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.3130767 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.311667595 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.298101835 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.292592749 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.305327876 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.292172071 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.289016255 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.349543646 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.295671812 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.305334311 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.306226553 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.28920027 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.302889584 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.34686554 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.404694638 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.331845982 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.413541795 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.405379849 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.425514729 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.308124948 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.299300911 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.295437048 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.336413347 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.327565161 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.312402795 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.318503535 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.285139242 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.31057965 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.339563629 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.347842122 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.296894031 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.29739536 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.299006086 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.286032305 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.311231807 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.299800301 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.447416195 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.347210356 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.290627916 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.299779971 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.344210035 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.336671613 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.321003733 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.32034005 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.297839847 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.319693587 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.299385035 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.387665504 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.307598004 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.283037593 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.30379615 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.303907308 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.325847227 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.325875566 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.286140097 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.29311056 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.282918937 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.30736461 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.316205388 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.309164346 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.342099439 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.299325877 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.323053142 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.292605559 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.328157705 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.30283879 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.293707926 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.3202567 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.288447859 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.286734449 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.306133006 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.463950204 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.315394462 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.293074697 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.285653003 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.317493581 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.309941033 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.333237246 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.313036779 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.286386898 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.309276594 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.301262245 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.316149072 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.304327469 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.428470838 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.306675057 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.339529061 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.285033413 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.304414308 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.426091816 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.313517476 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.299218078 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.303413532 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.289771197 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.309342316 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.304109818 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.299793366 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.303215546 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.346104641 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.338489385 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.294856173 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.463539357 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.302616028 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.289332375 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.303522008 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.299368645 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.303907503 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.299285057 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.291587131 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.307507309 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.296131776 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.301264905 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.28583757 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.339395346 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.30643843 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.294814447 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.286011436 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.329588232 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.294311475 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.287338807 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.463987177 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.323830683 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.332880644 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.297866864 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.289667038 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.299351803 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.28843525 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.320482203 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.292203085 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.308122038 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.288064723 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.306588759 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.330842757 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.310358131 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.326746169 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.288412255 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.421797044 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.292943919 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.302564439 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.341193384 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.288389606 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.313072589 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.303760817 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.321814854 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.304524419 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.339438678 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.299937603 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.365625845 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.303205442 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.287207704 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.302825484 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.310712497 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.318045185 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.303690836 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.304815905 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.299599649 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.304847697 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.303397321 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.333390228 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.317938699 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.289971928 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.359414349 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.444808488 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.30952826 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.30293792 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.298429998 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.295129947 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.288129862 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.396892212 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.341499608 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.412657011 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.301192876 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.297039284 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.338121363 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.40427903 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.334701121 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.287539478 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.297336398 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.328995911 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.309265738 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.300700535 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.31141052 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.287612191 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.309643482 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.305333736 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.306674091 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.320441254 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.301897741 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.311452105 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.351727894 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.405921666 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.302507196 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.350090094 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.294716934 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.387989784 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.31593867 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.412403979 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.311669482 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.302104366 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.429839446 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.310652709 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.306916426 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.304341156 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.282926411 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.314260355 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.314866831 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.311095003 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.288041846 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.290428998 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.30126589 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.280647762 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.296488099 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.321882143 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.326871298 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.303239781 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.285399422 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.303802867 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.333877031 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.306984711 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.309275694 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.399298888 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.305651278 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.285768196 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.310900213 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.30166368 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.304681735 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.282513107 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.33245285 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.30146232 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.306480385 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.322934799 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.429503524 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.290348198 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.302098668 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.28108159 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.299827131 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.301949316 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.343490393 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.297317739 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.304946087 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.334616838 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.285768502 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.327932967 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.299697882 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.351206599 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.313673748 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.299506568 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.306108393 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.308530872 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.297258403 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.291211588 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.322899653 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.334519368 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.304028897 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.293843401 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.286990748 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.303488986 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.307380154 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.300177551 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.290293 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.298786985 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.296301154 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.439914181 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.292768812 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.360315815 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.355260111 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.292535403 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.285205572 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.305521069 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.44944177 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.325975098 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.330590751 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.285861997 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.306366738 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.303777406 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.299392249 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.290979064 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.338137121 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.307943106 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.301171363 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.392544931 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.322694822 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.328940673 seconds)
done (took 897.234249327 seconds)
(17/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.595788351 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.267626954 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.536837602 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.52148479 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.624274761 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.586347886 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.355841201 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.67410194 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.338640293 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.661295492 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.490150851 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 6.267457235 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.266910968 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.492853432 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.620888064 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.532104103 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.338377865 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.497248973 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.67190682 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.61531312 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.267480269 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.491393795 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.452126249 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.642504072 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.270799452 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.267716759 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.615980919 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.430805763 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.5186527 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.268033217 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.267845973 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.506106871 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.615201384 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 6.269243934 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 6.269187464 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 6.268594019 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.58072326 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 6.272688352 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.572152391 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.61384215 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.498450119 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.270294828 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.267056499 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.267497337 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.475713298 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.521995055 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.353780206 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 6.268584572 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.268210326 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 6.268256397 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.510044384 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 6.267745511 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 6.268060085 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.519288235 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.492367332 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 6.268840291 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.654913262 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.646410863 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.615318565 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.533462708 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.571603025 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.658088987 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.636598129 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.436294701 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.2679219 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.53434018 seconds)
  done (took 207.027414282 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.611576067 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.534458723 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.611710372 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.209453257 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.716025489 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.60889024 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.290948301 seconds)
  done (took 13.851607936 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.205526246 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.331057464 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.498626489 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.495073634 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.338340525 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.436821536 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.398100221 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 6.267854071 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.488757765 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.361481037 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.60770909 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.492154163 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 6.26702067 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.268416847 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.39690478 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.53845149 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.261458082 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.388798325 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.607498653 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.607231278 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 6.26654314 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 6.269546148 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.450717152 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.316832948 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.333276153 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.372326616 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.329930709 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.177892228 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.327556785 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.319307121 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.337429047 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.417516596 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.330872906 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.268512945 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.314348916 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.613450056 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.335004979 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.336074018 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.455686052 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.273890382 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.315364451 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.347766976 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.459069531 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.336695472 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.321254537 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.49203729 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.324260705 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.359348781 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.318918596 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.327362575 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.471533141 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.330638697 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.31428191 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 6.267891495 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.52622925 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 6.268979144 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.3878895 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.335965276 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.329187876 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.38950466 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.330589006 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.606120428 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.489753495 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.315018708 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.502213637 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.579162978 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.325450805 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.329222144 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.316759238 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.519683782 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.326373003 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.49405513 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.330343576 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.37449063 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.334031857 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.440333747 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.489011104 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.029811724 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.003696894 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.267722259 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.508195414 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.319648795 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.621342907 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.148403032 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 6.270221746 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.315239412 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.335703178 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.81385778 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.166216224 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.331748784 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.573650615 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.335019155 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.387762757 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.372571 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.317083671 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.380700135 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.463248373 seconds)
  done (took 199.77334112 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.363274808 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.054465843 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.590151177 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.053760517 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.096177018 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.429839765 seconds)
  done (took 14.860522203 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.656057656 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.97256721 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.358282082 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.344760576 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.378529033 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.303110193 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.306379747 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.399395721 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.231904834 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.344207765 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.308275336 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.324155571 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.306397259 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.439032199 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.311389886 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.335134675 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.306212728 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.355134667 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.32924835 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.387049918 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.315629233 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.373281924 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.390319689 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.872744825 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.13675567 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.342065557 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.114160812 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.346796544 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.330071667 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.430088001 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.435476773 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.305929782 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.862337778 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.089441142 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.907611554 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.87037831 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.240829506 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.335436693 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.338075737 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.303088229 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.322918192 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.386859035 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.348012586 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.321587208 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.521514333 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.610793272 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.15551435 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.564543604 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.305789145 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.321785979 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.324445172 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.35919589 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.30854743 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.32626554 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.792638153 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.848123453 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.08115658 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.317252576 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.376938625 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.872760949 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.193596088 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.319371603 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.579971187 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.061725119 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 6.266844829 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.327327029 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.871345296 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.234511775 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.401947114 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.344765969 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.323236896 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.353262849 seconds)
  done (took 127.081815523 seconds)
done (took 563.863638036 seconds)
(18/23) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/13) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 32.799968598 seconds)
    (2/13) benchmarking "construct_ssa!"...
    done (took 32.684719237 seconds)
    (3/13) benchmarking "many_global_refs"...
    done (took 31.783292807 seconds)
    (4/13) benchmarking "many_local_vars"...
    done (took 33.306806196 seconds)
    (5/13) benchmarking "many_method_matches"...
    done (took 31.837128032 seconds)
    (6/13) benchmarking "REPL.REPLCompletions.completions"...
    done (took 32.47617601 seconds)
    (7/13) benchmarking "many_const_calls"...
    done (took 32.117609097 seconds)
    (8/13) benchmarking "domsort_ssa!"...
    done (took 31.566901169 seconds)
    (9/13) benchmarking "broadcasting"...
    done (took 32.698539901 seconds)
    (10/13) benchmarking "rand(Float64)"...
    done (took 32.072787258 seconds)
    (11/13) benchmarking "sin(42)"...
    done (took 31.980500358 seconds)
    (12/13) benchmarking "abstract_call_gf_by_type"...
    done (took 32.326362984 seconds)
    (13/13) benchmarking "println(::QuoteNode)"...
    done (took 31.784961031 seconds)
  done (took 420.705063955 seconds)
  (2/3) benchmarking "optimization"...
    (1/13) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 34.87724852 seconds)
    (2/13) benchmarking "construct_ssa!"...
    done (took 32.314506989 seconds)
    (3/13) benchmarking "many_global_refs"...
    done (took 31.523122307 seconds)
    (4/13) benchmarking "many_local_vars"...
    done (took 35.546751862 seconds)
    (5/13) benchmarking "many_method_matches"...
    done (took 31.849096742 seconds)
    (6/13) benchmarking "REPL.REPLCompletions.completions"...
    done (took 34.151263583 seconds)
    (7/13) benchmarking "many_const_calls"...
    done (took 32.591629098 seconds)
    (8/13) benchmarking "domsort_ssa!"...
    done (took 32.352410086 seconds)
    (9/13) benchmarking "broadcasting"...
    done (took 32.564169038 seconds)
    (10/13) benchmarking "rand(Float64)"...
    done (took 32.496144915 seconds)
    (11/13) benchmarking "sin(42)"...
    done (took 31.334361613 seconds)
    (12/13) benchmarking "abstract_call_gf_by_type"...
    done (took 33.168228969 seconds)
    (13/13) benchmarking "println(::QuoteNode)"...
    done (took 32.74401737 seconds)
  done (took 428.78738228 seconds)
  (3/3) benchmarking "allinference"...
    (1/13) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 33.273622788 seconds)
    (2/13) benchmarking "construct_ssa!"...
    done (took 31.829271592 seconds)
    (3/13) benchmarking "many_global_refs"...
    done (took 31.903617468 seconds)
    (4/13) benchmarking "many_local_vars"...
    done (took 34.095871113 seconds)
    (5/13) benchmarking "many_method_matches"...
    done (took 31.907251144 seconds)
    (6/13) benchmarking "REPL.REPLCompletions.completions"...
    done (took 32.910080976 seconds)
    (7/13) benchmarking "many_const_calls"...
    done (took 31.448044659 seconds)
    (8/13) benchmarking "domsort_ssa!"...
    done (took 31.42654837 seconds)
    (9/13) benchmarking "broadcasting"...
    done (took 31.708261169 seconds)
    (10/13) benchmarking "rand(Float64)"...
    done (took 31.341316452 seconds)
    (11/13) benchmarking "sin(42)"...
    done (took 31.491780717 seconds)
    (12/13) benchmarking "abstract_call_gf_by_type"...
    done (took 32.067471542 seconds)
    (13/13) benchmarking "println(::QuoteNode)"...
    done (took 32.030248989 seconds)
  done (took 418.709025791 seconds)
done (took 1269.470353836 seconds)
(19/23) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.320348666 seconds)
  done (took 7.589269328 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.31151388 seconds)
  done (took 7.656780441 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.268324698 seconds)
  done (took 7.538187066 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.269176303 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.31240378 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.28298613 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.273692577 seconds)
  done (took 26.430278565 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.382475438 seconds)
  done (took 7.652381277 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.269278954 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.278346027 seconds)
  done (took 13.850617735 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.335964254 seconds)
  done (took 7.605717862 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.557510844 seconds)
  done (took 7.836136282 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.282844315 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.275171809 seconds)
  done (took 13.853593158 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.267562827 seconds)
  done (took 7.537733772 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.410782851 seconds)
  done (took 7.750621183 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.273315196 seconds)
  done (took 7.623015643 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.307196326 seconds)
  done (took 7.578348449 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.571795622 seconds)
  done (took 7.840760174 seconds)
done (took 139.640789652 seconds)
(20/23) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.267826993 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.27003907 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.272001886 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.270318266 seconds)
  done (took 26.349358631 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.566194441 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.567518662 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.53982287 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.539368825 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.513691547 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.512914784 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.566450358 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.56586102 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.511970763 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.539700664 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.566822466 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.539735972 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.539812564 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.53952625 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.539501346 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.540013507 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.541322691 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.567217319 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.513670829 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.537971314 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.539722251 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.539941355 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.919313193 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.94517242 seconds)
  done (took 39.063940406 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.466587546 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.615288647 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.43924306 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.643985169 seconds)
  done (took 7.433932524 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.319274049 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.545648343 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.589988585 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.597351296 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.503086981 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.374456994 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.591727321 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.399466151 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.399174921 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.396879806 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.857312685 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.410749303 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.435566242 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.600915497 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.373352393 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.307635003 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.309730458 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.390988595 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.53949667 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.441880839 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.50231272 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.592979172 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.50328885 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.590359371 seconds)
  done (took 36.84393141 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.086827969 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.870591888 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.172835856 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.248422047 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.497197916 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.331266834 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.129106573 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.138013152 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.469198527 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.152766835 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.002457752 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.154263254 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.259824755 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.177835184 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.095576497 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.364350119 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.404476666 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.131458209 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.162535901 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.152749616 seconds)
  done (took 42.272339843 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.270955625 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.630140876 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.559486134 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.552307479 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.269386919 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.297063328 seconds)
  done (took 23.848932708 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.335722281 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.379513279 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.464506118 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.46723283 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.391788185 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.376319926 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.5656881 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.434248577 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.807109961 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.595695559 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.232221791 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.567206138 seconds)
  done (took 21.888223446 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.26841741 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.293530726 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.269164373 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.408742992 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.9697888 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.054270514 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.148718226 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.26832422 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.196464918 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.428796821 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.042912778 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.396241026 seconds)
  done (took 41.023265799 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.501922287 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.591501166 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.57488427 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.110182047 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.696335097 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.312940501 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.251125432 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.866412836 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.075180897 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.216160418 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.706085315 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.307935181 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.3074024 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.281797925 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.616148926 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.606077741 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077824143 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.089642752 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.584143077 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.299689632 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138845979 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.360594259 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.275977612 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.679157731 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.581964776 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.272792421 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.5008223 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.458322524 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.243388335 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.550157575 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.541988425 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.716033363 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.489588907 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.543144399 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.649194717 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.304693046 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.361189275 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 4.671148888 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.690572176 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.560138297 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.368910994 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.384649404 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.397395357 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.222519823 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.553287315 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990639139 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.270180749 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.443702745 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.343626706 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.016985105 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.609850109 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.957915198 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.555835525 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.75938865 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.400784705 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.602499 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.109104552 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.628486745 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.500409928 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 3.952912502 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.467833615 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.347141773 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.500892358 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.283534196 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.099786891 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.578195148 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.804998716 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.3828773 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.979746933 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.607324134 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.66643953 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.022528039 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.039155097 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.336719424 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.723564005 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.069622659 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.561208036 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.272544843 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.449682501 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341220082 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.214664097 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.37808155 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.846402466 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138256348 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.394124203 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151945746 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.269669371 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.277902164 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.286024706 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 3.994157096 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.71419398 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.337889924 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.342290442 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.475905224 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.410007038 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.359348869 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141499272 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.559349604 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.281846702 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.861306653 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.511175078 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.326818225 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.605830809 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.799960413 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.587379674 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.754195743 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.73628811 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.307928347 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.611226498 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.849428102 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103791859 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.508313308 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.657185467 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.576871151 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.269181953 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.169100509 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.519912812 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.001954295 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.357153363 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.272087725 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.279042925 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.633496625 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.491292808 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.444011328 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.505101687 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.27224993 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.053298905 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.270412653 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.646074191 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.269881488 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.452844134 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.627361636 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.280311478 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.418883701 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.351012996 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.044563546 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.611920981 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 5.162646191 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.642536834 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.534652683 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.211576095 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.00165842 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.177101244 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.106438245 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.639151713 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.505887278 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.600064045 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.905081307 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.413459717 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.286245523 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.054299793 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.434253064 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.284624396 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.754383484 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.263177886 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.890456996 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.726757864 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.486288643 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.270200019 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.444835674 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.54280118 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.533558172 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.687511519 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.392267942 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.15803208 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.522118146 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.591124753 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.271008819 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.281651377 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.553165429 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.512414991 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.653327301 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.462858347 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.678538478 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.685336695 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.589910247 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.500911359 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.619656234 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.038909705 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.797990844 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.55565994 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 4.708490736 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.324968959 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.61507239 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04225157 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.761133826 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.600539633 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.741612239 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.777811302 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.76493377 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.30886426 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.46548063 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.282552888 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064521337 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.664236137 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.225348782 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.624676624 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.327868002 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.418760805 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.762407919 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.323570415 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.432642315 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.165864054 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.729239252 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.631993479 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.561281208 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.343787707 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.725759877 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.601276806 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.787260387 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.482136019 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.079822441 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.367069896 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.41487296 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.271055416 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.609135409 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.225252664 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.883660772 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.764639009 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.656741736 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.986504758 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.097129676 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.544363686 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.277801091 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.37343966 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.574382837 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.029544003 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.383398105 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.668572951 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.514765171 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.578158936 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.270647906 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.279736507 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.979462399 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142954277 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.980863517 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.665843195 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.255567612 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.809979119 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.351516329 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.306026278 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.387575696 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.315818551 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.025228725 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.745329371 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244997767 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.494902074 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.803729401 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.095645788 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.025773787 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.591239141 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.269840515 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.640175108 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.333854705 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.460810957 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.834013847 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.37141308 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.209042069 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.627531027 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.80451588 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.082908931 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.724905515 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.504881942 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.519243779 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.489800859 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.630227135 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.591704235 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357933006 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.278749278 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.102767602 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.310610521 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.61011497 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.270910972 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.593199941 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.549648727 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.607229235 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.866711981 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.626354312 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.161213713 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.657643255 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.575861036 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.411787302 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.621378044 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.792683939 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.74578737 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.309821883 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.418450659 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.282864935 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.164130454 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.68147127 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.556868933 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.642348386 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.37280283 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.617414006 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.637370962 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.031554147 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.553367214 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.542530259 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.003817754 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.537926597 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.271141492 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.621825858 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.722092928 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.279033137 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 4.689889312 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101988369 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.617067779 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.106848636 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.012002611 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.381837396 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.487315571 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.985624296 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.484077814 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.420132882 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.587279811 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.142129205 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.505145181 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.507600648 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.533414105 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.13095519 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.649163518 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.660710886 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.802918306 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119188115 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.732354197 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.271375537 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.50160914 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.109217986 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.957127913 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.438321134 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.582382754 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.375885806 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.501610816 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.559973988 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.316143471 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.713511551 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.344382917 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.349765615 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.21693344 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.256662644 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.709689355 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.869491033 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.859511204 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.821915247 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.88240497 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.243521822 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.344382968 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.133260592 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.995715431 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.974054201 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.026987489 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.996275842 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042733666 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.731924487 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.020853453 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.483986361 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.10556112 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.509198088 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.502501218 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429162241 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.339740958 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.790893496 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319240407 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.980732695 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.382610293 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.489223028 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.040654446 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.579166979 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.642121925 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.591242194 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.734185112 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.639161098 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.504275288 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.282460489 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.271285687 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.435258111 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.55070776 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.289848368 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.607438879 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.586899616 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 5.175085269 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.499839733 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.495250239 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.205081254 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.688801001 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.690540005 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.486067801 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.617994234 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.632187147 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.547059954 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.741142025 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.501489481 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.656553858 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.63193016 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064488825 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.993745592 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.607726437 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.102643504 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.282407842 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.495012381 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.270958969 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.128636839 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.743381608 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.607970468 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 3.9819525 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.733146153 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.766951152 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.462049201 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.313030571 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.270206759 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.496694855 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.497302337 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.224535252 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.793467785 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.568831828 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.477403031 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.356337055 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.056256348 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.281441419 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.502105981 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.386913103 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.133703838 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.81444148 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.989854205 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.817292322 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.789651191 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.402560623 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.136230414 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.281863269 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.176443959 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.411236589 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.620794972 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.860302287 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.4610752 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.615823115 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.49257307 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.28342148 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.600359403 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.090768526 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.525326723 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.821750996 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.642433431 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.61453342 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.516915936 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.563661448 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.398403801 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.47947728 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.559661414 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.28084851 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.495445715 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.648514281 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.621644462 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.643806014 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.269723042 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.694925236 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.555755236 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.098397883 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.446240983 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.478433829 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.737560537 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.477130669 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.054673053 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.443985075 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.093383747 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.233720748 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.376206081 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.535448218 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.270371242 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.238459029 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.503220783 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.502983872 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.46936654 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.572662915 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.801109105 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.102824087 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.373643298 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.816748394 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317199311 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.957070352 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.196461264 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.739718518 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.270846411 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.652905214 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.889174574 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.490751548 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.442223028 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.216747467 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.387924954 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.449770127 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.644939059 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.280385486 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.719043894 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.671676033 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.272826597 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.568280279 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.301643357 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.108489538 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.21706084 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.250478091 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.27149727 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.111818071 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.344667172 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.02205667 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.333269842 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.275795669 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.28467903 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.658106125 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.215461145 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.272699128 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.97892511 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340981399 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.274635085 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.60963639 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.06073798 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.442740799 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.281421297 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.348481952 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.279512017 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.502462913 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.801170067 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.4557368 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.983284828 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.492442148 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.274901436 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.789311111 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.807629821 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.548215683 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.4147472 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.62529508 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.55998053 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.730660411 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.468328421 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.33498924 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.599255319 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.067444349 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.677544523 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.558618578 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.319274687 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.502457921 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.470607888 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.579944243 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.375243866 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.677231646 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.16475482 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.570999351 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.244687402 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.286179968 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.231431663 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.572362022 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059186697 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.271467666 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.1460321 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.502042117 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.093850796 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.881546695 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.419716771 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.108900575 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.305164661 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.140581229 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.672016307 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.451789544 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.271074519 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.479702221 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.61474528 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.280169027 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143416309 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.099977745 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.505121509 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.593363506 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.286085884 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.49107933 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.624328425 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.21472485 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.253618798 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.969286874 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.634847555 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.285049494 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.721690014 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.213927031 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.000343076 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.629881916 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.635787789 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.224282565 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.353875652 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.122792166 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.271715614 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.271625157 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.604565924 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.419206258 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.401163972 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.564441862 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157356682 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.574440447 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.658974757 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.166958808 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.465834233 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.599684469 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.496610869 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.837596444 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.098018382 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.799756788 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.177355942 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.407270994 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.237953356 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.455511681 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.321534416 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.34382318 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.6163837 seconds)
  done (took 1850.084499253 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.310914693 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.307844657 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.343038864 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.348630802 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.313719072 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.311830789 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.307151966 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.30739745 seconds)
  done (took 51.824426268 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.654694259 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.293902302 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 4.479465605 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.459481184 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.286688512 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 4.15022298 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.446664325 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.350795603 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.467975001 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 4.057210155 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.358994785 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 5.129263971 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.322388048 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.294369469 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 4.447291688 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.590087112 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.270093038 seconds)
  done (took 87.347799385 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.299821565 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.203877351 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.281697437 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.191300498 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.294691946 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.331308601 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.270582879 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.273504765 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.524472941 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 6.573037725 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.297363257 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.312246756 seconds)
  done (took 80.146191379 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.317833946 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.320909942 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.316377067 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.31934842 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.316050533 seconds)
  done (took 7.863772846 seconds)
done (took 2317.287467182 seconds)
(21/23) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.531838346 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.578726733 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.731751651 seconds)
  done (took 4.583119579 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.427795214 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.479810084 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.618473751 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.639533815 seconds)
  done (took 7.448687697 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.535361507 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.662009297 seconds)
  done (took 4.470360423 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.570633022 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.298983422 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.64753604 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.271209056 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.271843083 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.273360919 seconds)
  done (took 20.094815969 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.317327722 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.320851909 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.319472857 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.311573679 seconds)
  done (took 6.542289217 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.273008998 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.076003158 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.274456685 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 6.275511461 seconds)
  done (took 23.171816015 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.570575729 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.334541739 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.051647592 seconds)
  done (took 6.24573827 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.922969222 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.424798842 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.908573224 seconds)
  done (took 6.527789064 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.487289767 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.052489626 seconds)
  done (took 5.811722418 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.440765684 seconds)
  done (took 2.714855343 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.128733106 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.596033181 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.780845498 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.98488153 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.93136517 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.508925255 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.589409239 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.485118398 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.69549182 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.690149894 seconds)
  done (took 18.663848347 seconds)
done (took 118.595409422 seconds)
(22/23) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.512277664 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.773288677 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.529337857 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.430446474 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.399670446 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.530518997 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.604860823 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.642458083 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.157646995 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.160856328 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.438730069 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.40309165 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.604572491 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.770616273 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.602491412 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.769051343 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.39379686 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.508691052 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.114083184 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.123399847 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.610868844 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.152641049 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.500183793 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.154546657 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.39983163 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.292792799 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.500321981 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.774979156 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.04656309 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.500762945 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.298424743 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.054441826 seconds)
  done (took 147.029439563 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.610279699 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.277898684 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.277836025 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.272080556 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.337081511 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.279193583 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.276113706 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.272231467 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.310321408 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.314091106 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.277540909 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.340717708 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.278966393 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.272220109 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.278807706 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.272144508 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.411989387 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.619209085 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.27868402 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.27698217 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.279243413 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.24032998 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.277281771 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.238185585 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.424029814 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.279018626 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.645349737 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.277177886 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.277124426 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.645794884 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.278762416 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.272526093 seconds)
  done (took 183.950291598 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.147565514 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.274350084 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.27783714 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.273232305 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.277475091 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.279713057 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.274251755 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.273261602 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.75116414 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.736631539 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.277032624 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.277032735 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.278625863 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.274250081 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.280154921 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.273330602 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.277332639 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.153598067 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.276936202 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.276888972 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.276054767 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.811919007 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.276069594 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.819062224 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.277903824 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.279949384 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.210355249 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.279308686 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.278941493 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.214791714 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.278359369 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.272506825 seconds)
  done (took 199.765533374 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.520899491 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.317396054 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.118365765 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.937010124 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.146765991 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.312684372 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.935021767 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.522224711 seconds)
  done (took 15.088401097 seconds)
done (took 547.111113072 seconds)
(23/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.658895801 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.073925526 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.419856769 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.506303581 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.566362928 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.562149566 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.50119052 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.612220568 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.915035748 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.60125278 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.681363164 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.48610304 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.965772379 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.492609009 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.417468393 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.643157942 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.650678024 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.878300407 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.42616472 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.02182196 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.461856458 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.981478495 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.62403422 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.9201768 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.691814714 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.989121169 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.25148056 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.643993381 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.478460498 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.440978357 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.222819404 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.484980162 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.421130558 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.417069885 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.653171086 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.648216911 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.448438502 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.992102599 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.415649707 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.820848378 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.003690166 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.812984343 seconds)
  done (took 78.180037447 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.320056552 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.369666892 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.420963643 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.382047995 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.884469741 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.384396873 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.472286481 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.461060298 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.379683943 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.451210367 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.476401083 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.889245813 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.480547835 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.837175739 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.466719714 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.485450245 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.384615848 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.849161123 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.484294182 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.460231027 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.339900637 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.416483157 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.341205661 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.449402487 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.335010185 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.361579511 seconds)
  done (took 39.873562955 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.348493185 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.458142413 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.502959446 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.171536686 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.502984516 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.273789957 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.465444476 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.461252907 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.597392033 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.483944025 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.395118967 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.435949731 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.463435114 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.52276395 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.852673278 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.445399415 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.499319479 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.457588728 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.464101209 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.983730119 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.588472051 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.389238056 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.466814604 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.849315123 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.058174389 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.490590103 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.328285433 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.761960221 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.819087098 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.437799366 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.415440916 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.446174577 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.62297289 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.509482624 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.418981718 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.337881543 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.335356572 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.397792728 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.056423178 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.462611022 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.463284821 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.957574992 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.570652829 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.745602263 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.78746799 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.525339906 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.674434032 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.40468744 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.415606857 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.642957209 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.704622289 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.439252844 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.504548785 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.474237894 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.413248796 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.514334332 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.467886842 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.612724485 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.311604174 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.596118662 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.384183996 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.575183469 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.468776992 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.789223737 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.532950534 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.480629912 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.107353047 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.072228415 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.572767889 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.62937857 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.947187085 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.387390894 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.345831689 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.394295581 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.461189345 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.693779576 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.560589277 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.578023668 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.626188722 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.449866324 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.354938169 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.767399386 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.255074359 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.407886684 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.472853426 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.326620084 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.40557513 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.606966315 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.446230625 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.727718922 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.757670739 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.622030784 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.343511077 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.294394138 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.089966845 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.673654313 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.321962333 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.329710046 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.496305181 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.759311441 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.386689217 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.107592781 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.774637428 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.860447175 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.427184882 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.298203309 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.600626457 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.788926522 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.640419764 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.312041196 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.074229752 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.050571182 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.673587574 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.503008358 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.312990081 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.736029547 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.41094939 seconds)
  done (took 237.95704515 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.272588064 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.275704066 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.275436927 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.27642103 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.271524449 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 5.124636169 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.307052016 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.273688495 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.703994205 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.3079418 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.274516152 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.277320739 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.274419947 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.271971386 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 5.908996847 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.052981398 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.884895753 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.272564042 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.273078033 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.274398755 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.92953805 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.277947059 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.273160825 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.272216889 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.273915299 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.272586038 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.274172705 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.312940591 seconds)
  done (took 161.017972938 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.334638418 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.616031325 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.353759314 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.391070436 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.362303624 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.357129304 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.761076852 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.433825083 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.397613899 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.349744872 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.348638399 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.528197486 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.60196719 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.809167452 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.41551159 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.44567183 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.913593296 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.463016739 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.352528108 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.352327974 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.457724342 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.610221132 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.539309486 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.543832275 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.474450654 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.548459078 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.39488346 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.339513735 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.440608929 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.75722947 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.359173865 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.646557643 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.464470196 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.334800439 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.764110974 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.603448394 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.795296212 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.884329825 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.503849573 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.314462735 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.32087292 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.536102782 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.583517773 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.374246087 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.331753208 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.8591629 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.359095985 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.670982687 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.358597766 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.313477101 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.407385315 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.412904623 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.524269376 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.491478082 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.490649376 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.456269301 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.83722741 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.306971827 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.421954845 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.587802554 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.314297313 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.739341179 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.670269272 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.383906759 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.34562511 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.085833693 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.402617684 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.780612354 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.81548972 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.367205226 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.624441949 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.497134836 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.323574787 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.57693646 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.495541017 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.756398814 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.787624339 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.43727002 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.401731053 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.384849373 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.576322662 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.324922049 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.782841393 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.418158788 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.317229233 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.740467915 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.638335361 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.319646668 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.341357119 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.439723242 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.480596207 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.492700432 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.549029671 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.403404378 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.08842321 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.551264016 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.601510361 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.348456894 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.440288082 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.33492816 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.447963331 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.512249959 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.328623899 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.570577047 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.699263052 seconds)
  done (took 169.226161817 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.855839973 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.349274994 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.491499017 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.85428022 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.597026341 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.457520002 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.466728222 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.373060505 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.532005927 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.45540978 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.519112413 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.39069622 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.23599221 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.043227293 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.348852128 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.471654096 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.398161719 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.814151744 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.551455823 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.666500939 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.41361914 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.91192934 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.590002486 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.713547307 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.671624329 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.732583553 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.888341932 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.425960254 seconds)
  done (took 49.498922153 seconds)
done (took 737.025870559 seconds)
SAVING RESULT...
DONE!
