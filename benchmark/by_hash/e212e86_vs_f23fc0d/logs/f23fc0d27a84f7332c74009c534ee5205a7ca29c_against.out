cset: moving following pidspec: 3091657
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.258330974 seconds)
loading group "shootout"... done (took 0.788839207 seconds)
loading group "string"... done (took 0.226934658 seconds)
loading group "linalg"... done (took 3.129083793 seconds)
loading group "parallel"... done (took 0.021620133 seconds)
loading group "find"... done (took 1.206403413 seconds)
loading group "tuple"... done (took 0.708157025 seconds)
loading group "union"... done (took 3.131899872 seconds)
loading group "dates"... done (took 0.156584187 seconds)
loading group "micro"... done (took 0.057923113 seconds)
loading group "simd"... done (took 0.366898115 seconds)
loading group "io"... done (took 1.470605187 seconds)
loading group "random"... done (took 2.289439589 seconds)
loading group "problem"... done (took 1.132168395 seconds)
loading group "array"... done (took 4.302236866 seconds)
loading group "misc"... done (took 1.1046017 seconds)
loading group "scalar"... done (took 3.431167015 seconds)
loading group "sort"... done (took 0.303938141 seconds)
loading group "sparse"... done (took 3.501566197 seconds)
loading group "collection"... done (took 5.922903206 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/19) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.479293424 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074440013 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.251475813 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.07282356 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.273273695 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.083895084 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086625871 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072959596 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.161598768 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.159200115 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.21184689 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.380268678 seconds)
done (took 5.022400168 seconds)
(2/19) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.298102596 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.032930468 seconds)
    (2/2) benchmarking "String"...
    done (took 0.123126051 seconds)
  done (took 0.737638089 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.137413734 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015721925 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022719811 seconds)
  done (took 0.751490282 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020415869 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.09851624 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021486092 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022149303 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022092239 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.02143442 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021308725 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021342267 seconds)
  done (took 0.805995801 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028963121 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022644988 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020787953 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022205436 seconds)
  done (took 0.670683713 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022744302 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.092330645 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.026826442 seconds)
    (4/4) benchmarking "different"...
    done (took 0.026635517 seconds)
  done (took 0.741108068 seconds)
done (took 4.615685789 seconds)
(3/19) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.193529507 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.755361911 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.867520163 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.174795184 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.339599919 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.286692081 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.075757854 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.234630378 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.142232121 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030942522 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.175448713 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.03616427 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.513814391 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.458348991 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.02637418 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.142512897 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.565002593 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038960483 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.068043967 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.160386929 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036017674 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038255517 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.04284111 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026109713 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.090728131 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.131551827 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.569229435 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.065010502 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.024015492 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048580753 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026710073 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031627735 seconds)
  done (took 9.031599032 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.158389289 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.141645771 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023606955 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.05750374 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.050107758 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024822447 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.03007566 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023221732 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042373147 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.085693714 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045243018 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.154063295 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021103309 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024399911 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.138544094 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.11205553 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037486415 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036875204 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022371332 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035976037 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.047791983 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.03434848 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032319536 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.031836312 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.066063865 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.08621307 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.040637792 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.065022798 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022588807 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033910721 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.05297309 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.061186167 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022708973 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021333157 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.063478852 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.042602661 seconds)
  done (took 2.629940278 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.679609813 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051211452 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.135955407 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.126897009 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.062732704 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.049323398 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.177717184 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07737064 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054496712 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024000125 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.20337556 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.641589559 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.165147965 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.028754455 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028023546 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.177113193 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.891345795 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.949615972 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023214386 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023538379 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.129636062 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025874 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.169459902 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021689551 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.133739646 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.697947355 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026423307 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024915532 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.053272492 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.255248702 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021008861 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.093930295 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049627485 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025013893 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.555347434 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021798061 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.074811507 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.040998232 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.051037575 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02209096 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023024237 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034008707 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021196396 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072397303 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035780427 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.492606743 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024593831 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.675910697 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.795132931 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.029043956 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.026360655 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.056773944 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019515749 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022898825 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.603355558 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.099046942 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022398448 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.281679032 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02514755 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023801024 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024022359 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054465605 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022826096 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024095879 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025956167 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.039861709 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.969350141 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.031210516 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041828428 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021589957 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022577748 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021136523 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.400076023 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029151982 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.02485639 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020576542 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026631283 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022712723 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02223157 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.064888886 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.048566918 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046438996 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026013725 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.02298735 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022327059 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.539602929 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.948334175 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02514178 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024275139 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479180332 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020755081 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022781035 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024352603 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.155524277 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.028282621 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020084737 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05636235 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024474674 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.12388748 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.538184143 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023618457 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019916425 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.30759785 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023661467 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.052072421 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073833755 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021974199 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.058327248 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022299708 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019719756 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025666696 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019542172 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023678651 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020736494 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021479018 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020651297 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022305224 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023314742 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022247765 seconds)
  done (took 19.477765515 seconds)
done (took 33.396674854 seconds)
(4/19) benchmarking "parallel"...
done (took 0.726211148 seconds)
(5/19) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.204599576 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049504501 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019367271 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.154907052 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043653786 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.12984145 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.16798684 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.123126742 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.044787247 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.044395519 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.044838046 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.173902489 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.181609866 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.045724186 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.113454064 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.182442684 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.045689507 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019639175 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.044766824 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.045398175 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.045378444 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019615078 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.044716297 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.045493743 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.113098986 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.044146372 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019426541 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.113175014 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.046061182 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.114940069 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.046857214 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.04709494 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.048119374 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.11635873 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.048354609 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.11684501 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019913487 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.048002649 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.048470434 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.049299525 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.048583928 seconds)
  done (took 3.804730576 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046150271 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038235201 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040302217 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018027703 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027943 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038366536 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018104052 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037976267 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041063319 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038454373 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038335273 seconds)
  done (took 1.095752607 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041357943 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038977224 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040217461 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018029097 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029654036 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038923549 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017967449 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038634198 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041144313 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038903542 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038987784 seconds)
  done (took 1.042675405 seconds)
done (took 6.582037518 seconds)
(6/19) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.147292863 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.117859502 seconds)
  done (took 0.91472933 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.558107485 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.202857632 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.125368148 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.245280446 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.118868373 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.148444612 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.653811943 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.153147308 seconds)
  done (took 6.910914093 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.075402169 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.140104636 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.024302115 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022809632 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023038806 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022948981 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024502843 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023221327 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022447069 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024889147 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024573773 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022633694 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023440718 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024511353 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022760371 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022895338 seconds)
  done (took 1.331893044 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027910977 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025422042 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026587309 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016929975 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026850442 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025458985 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026559553 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027870213 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026019633 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026388166 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024304599 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027410305 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026029595 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024760472 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027250583 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016939874 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027395365 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026589315 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028712304 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026956758 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.02598379 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024316689 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027588964 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025631378 seconds)
  done (took 1.290517961 seconds)
done (took 11.108465429 seconds)
(7/19) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.13960998 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029052867 seconds)
  done (took 0.82801761 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.122725586 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.12179015 seconds)
  done (took 0.914352775 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027980258 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015870636 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031492212 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023986712 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016198077 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015985314 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030326929 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016179157 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016030035 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016187436 seconds)
  done (took 0.883806236 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019208899 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022452471 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020774046 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019129788 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020772438 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017034618 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019203974 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017270451 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022480034 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.0163484 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019827845 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037622566 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019348873 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.038138108 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019295394 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019761027 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021142333 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019015433 seconds)
  done (took 1.061046438 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017741967 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016736873 seconds)
  done (took 0.70894435 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020244438 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016832296 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018452851 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018306569 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016509391 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015957592 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016534027 seconds)
  done (took 0.789240387 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.387993962 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.089306562 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.315491317 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024631649 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.03674818 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.231599822 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019603315 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023800894 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023612148 seconds)
  done (took 1.823048837 seconds)
done (took 7.682032995 seconds)
(8/19) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.044695337 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.142322087 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.14637545 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.43645455 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.034023781 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022524846 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.055643382 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.222371804 seconds)
done (took 1.790103238 seconds)
(9/19) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.484299724 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.233483166 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.187035194 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023689475 seconds)
  done (took 2.122531526 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.308839411 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.137125733 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.03085253 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022894822 seconds)
  done (took 1.191760068 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022023369 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027447967 seconds)
  done (took 0.736405465 seconds)
done (took 5.225509284 seconds)
(10/19) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.181949932 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.169396402 seconds)
  done (took 1.025263234 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.131652681 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.129557288 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.158115372 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.02370857 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.080997659 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.17466627 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.126034522 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026309781 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.02394814 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025291045 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023545816 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.024931103 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025133015 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023469631 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086112813 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026310246 seconds)
  done (took 1.799259257 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.072901089 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.266614939 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.067224281 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022901496 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.103047193 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028497369 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023759476 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.027934596 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028289871 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023089311 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069443749 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.043822213 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027013535 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.02796266 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023680733 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026923985 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027936967 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028336798 seconds)
  done (took 1.631016879 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.063852024 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.031062823 seconds)
  done (took 0.787027935 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.139240525 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.062316808 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.101964234 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.310196669 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.096160693 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.28934251 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102876582 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.095528354 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.070264605 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.092849807 seconds)
  done (took 2.045255652 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059419367 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.054719446 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.278923972 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054193953 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034019048 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.02902903 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.030153366 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.029592155 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030455413 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029427438 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.072440979 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.02799731 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024373313 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.06794412 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.047282131 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058717469 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023650576 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029017631 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032735945 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023542788 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027895391 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.029271351 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.131286435 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029228238 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.04850518 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.026945571 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028573167 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.0294016 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.029353841 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030265016 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030336238 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052171728 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029171383 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037492249 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028041681 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048527141 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024623088 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.04839854 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027133732 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024507427 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027067631 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030820841 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025044911 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030323077 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030652785 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029471733 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.02974748 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023681854 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.030540451 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027105811 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024581558 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.027941321 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.02814385 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.028727069 seconds)
  done (took 2.896804502 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075885466 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.065766209 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024123664 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073424576 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065021007 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024289396 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077299347 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.059620923 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076366363 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023631088 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023251773 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023264822 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030620434 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034999318 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075790588 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.068368198 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025269688 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023953071 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.067849789 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.067596987 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022825389 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078351559 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067968621 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.066601058 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.02245121 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023926322 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022718419 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023389217 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030112619 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030771403 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023066326 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032510521 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.034636636 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030115447 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022440076 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022742074 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022737053 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031007524 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03151583 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031311771 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029332952 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022426845 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02268286 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023347662 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023746637 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022260363 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.031432256 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030520428 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.031462349 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023418076 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023413304 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022792429 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023669004 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030275201 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029042552 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030578538 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032737134 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023237849 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023149673 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.02453563 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03308044 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03103059 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030938322 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024070255 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.030970042 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022912889 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03203519 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036052976 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022882571 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023525938 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023136672 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023133087 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02346328 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029127318 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.029914294 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023504096 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023389589 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022834031 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031023151 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029430085 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023182926 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031491584 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022868426 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023545888 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023941323 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024240604 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032567102 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031965043 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024101786 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023579616 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023559464 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02356309 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022797787 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031742949 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031570742 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031725567 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033003171 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023993503 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033269047 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031882054 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024035299 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030931878 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023803279 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023939443 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023841477 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030803287 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.030418621 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.032066412 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023746556 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023340992 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.03202126 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034276433 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023568104 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.030692908 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033530536 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031372149 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023057449 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034201514 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023666809 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033050444 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023888222 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03245119 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02393769 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.031383336 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023825315 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022949195 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023694893 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.033738409 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02411603 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023659107 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024042387 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023659291 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031456416 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034550313 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024331805 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031655671 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031514692 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024198057 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032637338 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023819216 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.03281306 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023859644 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02406721 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022929117 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034958703 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023452026 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024009999 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023707725 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033398046 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023442883 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033093728 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030367857 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023027434 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033320679 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032754025 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.03039269 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033449706 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024323978 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023785406 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023458736 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023838053 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032865781 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034513133 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024673474 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023859511 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030474916 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.033206863 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023231294 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030805554 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030800209 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.031183008 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024025096 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023873246 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034295637 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035168516 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031276726 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033185056 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032268766 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023665205 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030942896 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033390621 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023762579 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038154977 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023725095 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.034774529 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033828848 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.030403545 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033398137 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.0347628 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.033705537 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.033382734 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.035453195 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023316331 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023565721 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.176462055 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022956426 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023146014 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028816441 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023410383 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023437859 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034678368 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023205783 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.030632352 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022517853 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029443687 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.0223152 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023358653 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033330687 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022754574 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023336116 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028626027 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02287935 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028377764 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031424289 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028450364 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022649952 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023256705 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030981831 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029879448 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022637272 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022528031 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023161604 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.02991368 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.02934629 seconds)
  done (took 7.634420557 seconds)
done (took 18.499607657 seconds)
(11/19) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.141599195 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.072105619 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.137787047 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.082918599 seconds)
  done (took 1.121469336 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.056806911 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019430248 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.135627601 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.146753094 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019665865 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.129578562 seconds)
  done (took 1.214069407 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.253738999 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.150747703 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.157707421 seconds)
  done (took 1.270676253 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.149359921 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.276623131 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.541432215 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.14284732 seconds)
  done (took 1.825409876 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.162480352 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.156149453 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030388288 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.172956395 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.037205605 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016027404 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.101007253 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.016812908 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.049463811 seconds)
  done (took 1.511460836 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.093093473 seconds)
done (took 7.743868803 seconds)
(12/19) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.225238405 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.131573746 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.14435742 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028003131 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.121655691 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.125165983 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.143065607 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.03007127 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.13300377 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.299688112 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.179577221 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047861854 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.147200926 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042264272 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.25476193 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030670519 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029351586 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024463599 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.139102597 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.13055375 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.23424116 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028059726 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.095635259 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030403112 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.100103507 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077787709 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.185298569 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.304919024 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.264907025 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030843591 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.117803517 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.04170971 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.114273144 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.120999189 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.127934612 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.047852076 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020018695 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.239950351 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.102799667 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.31423433 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.164478187 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027503979 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.14551657 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025534203 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019736354 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.141570874 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032706947 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026580398 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.042193688 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027059786 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041612038 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.02809621 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.128901986 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023717618 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092236912 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.132941482 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.18149293 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.101551653 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026011646 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03867056 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029897791 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.156249034 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038340253 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025772459 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.032126496 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020159126 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.131810146 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.040004607 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020525829 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030823013 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029021127 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.096290582 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.147605515 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.063839382 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031792925 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.105760673 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096678463 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.158019371 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048837017 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029351399 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019571035 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.18885881 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025499798 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.03792473 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026810609 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052058956 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019853547 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035268574 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.165768108 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.146026868 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.085108817 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021117884 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.239397095 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022051656 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045970141 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021390812 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020539826 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.185154651 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020372524 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020549482 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030446386 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029153845 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022424505 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.165994998 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.101607276 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.186969251 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028042066 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020247687 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026251109 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021978093 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020149711 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019968578 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.111151367 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.036783801 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019339883 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.101813133 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.116089531 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.03100203 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.035653875 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.082061739 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023167842 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029456954 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026772113 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.132283051 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026286055 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.129268908 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021243607 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.041383524 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.113115539 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.095105671 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.099408426 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019466559 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.135451645 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029236202 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019093999 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026681439 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.045796755 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028897217 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.036248867 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027597375 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.135483317 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030250231 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025246274 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.113516506 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018964239 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.104033172 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.09721645 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.126882531 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024525659 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029993156 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091213304 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041600507 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048032141 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041141067 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024123068 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019660219 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019360977 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.03241936 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018814021 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019608126 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.032056104 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026131499 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.035346298 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.232258753 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029245263 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023861846 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.24442045 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031875028 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.090346122 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039577129 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020201547 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.100589217 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021691135 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.040281426 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.082036962 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020260178 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096569206 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020370308 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020027809 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025916945 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.02172006 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029492032 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032847268 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020279225 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032814539 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027487059 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019977904 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.100201458 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022079989 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.185055322 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.098139159 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093314575 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020139788 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.038502097 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019782979 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.131072757 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020161307 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067771273 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.110274354 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.034342178 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040253359 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021302776 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.097744404 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033917083 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.024999208 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.098335354 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.128714876 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.089849708 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026242301 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.238550013 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029006656 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020002388 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.025763815 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028942511 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020673029 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.099890482 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.02492601 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019700718 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020045946 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022068229 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.0192974 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.04368644 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019455773 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027964786 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.025698705 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.02304234 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022158552 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019237072 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028266915 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.099561812 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.118426002 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026085874 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039682831 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033649223 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031236313 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.066564601 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.027889666 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.157395779 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019407308 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029667862 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040413084 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019639467 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025115859 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025444706 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.03695731 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023430702 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021231235 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028981819 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020248964 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020244631 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.019913116 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020157923 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.02874142 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021316635 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019549291 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019495934 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.035802106 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024896172 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025430492 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030639366 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039828258 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.468173864 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02154828 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022424843 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.032548805 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025518277 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020404607 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.02156824 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020096124 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022193013 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020189571 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019589353 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.163630933 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.026006597 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020828134 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040415115 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.026009768 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.030002486 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.118301266 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036898004 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025421215 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019480647 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.253218206 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.092744696 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040815963 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039167865 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020447847 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030957783 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020336918 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020841444 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019465869 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046190193 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025804113 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020391102 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019463667 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019722651 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066884097 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028333524 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019759581 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028296865 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020235717 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020110153 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046628909 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020717133 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020135224 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037664187 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032369132 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.105199857 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032494623 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.0233616 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.069975011 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019574448 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020167299 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020443233 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.10560669 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.04905736 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021859424 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020159929 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027613285 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029293677 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.072294975 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026295698 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023158588 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027734161 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019456992 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020378691 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.046280355 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.227860941 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.02325341 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023897544 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019849419 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020189491 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.096940524 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027699019 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025023189 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105452781 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022142165 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.02806993 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019191832 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.482600231 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.024830866 seconds)
  done (took 22.351851723 seconds)
done (took 23.076016111 seconds)
(13/19) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.14753109 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032839231 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.039811876 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028337483 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031526098 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031259668 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.041704952 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029051962 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032211352 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.039434272 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.140501181 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019891885 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027139549 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.033382163 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028140375 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.031963525 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.030865628 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.031580126 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020243681 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.031867711 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030644749 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.030490862 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028418714 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.031253393 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020225565 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028093474 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.143292238 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.034224441 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.029956934 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.028930594 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.02718426 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.041228454 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027166869 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026600689 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028766961 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024981161 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029350428 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026008395 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.142882266 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025272356 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020149779 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031117396 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.02670401 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027345027 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028148265 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.03045065 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024857946 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.031998807 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.027709195 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.039000906 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.14222848 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028256291 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.029774344 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027881597 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024932874 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028682897 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.029499772 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.029864108 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024853626 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.038334012 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028105454 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027433208 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019542081 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027976955 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026814885 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027176403 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.01876842 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028247479 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019642371 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019582372 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.027850794 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027932507 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026370316 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024634224 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.027675326 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019486555 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.027392648 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.038448987 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026444646 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028068254 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.01996316 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025002854 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024533402 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020038996 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028261171 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030371911 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.028493428 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020008311 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.027758526 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.038646686 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026099672 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019498499 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030304826 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028154824 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028009695 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019619528 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.027911445 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.027951477 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027373133 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019486394 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018759666 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028038917 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024723555 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028054709 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019926462 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028008821 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.027941674 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018865606 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027945232 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026617491 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028430551 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.030234856 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027915441 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030652715 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020022968 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018763787 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029226234 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019834141 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028233992 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027491249 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024940732 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.02723353 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020066282 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.02728535 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028020098 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025559411 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.0199317 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.01999875 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019879342 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028116005 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026601771 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.01882564 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019513971 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028212499 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027975306 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.027445947 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.027809835 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.027979204 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020009786 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025524653 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024927538 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028029642 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.027525444 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019876232 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.027575208 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.027487553 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.033133438 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024977596 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028147259 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020116816 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027955637 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026554631 seconds)
done (took 5.519795273 seconds)
(14/19) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.075757387 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063136095 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.170586381 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.138630613 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033018928 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.033695603 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024790467 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.039977059 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.026607982 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045028134 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045291669 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042748086 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.156134546 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040620006 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019962002 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.03173177 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.022018264 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.046856674 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.139973605 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.04459913 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.06202337 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.01868182 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.035392198 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038313596 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.032298824 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.038311135 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.043983779 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020939828 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037562047 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037033146 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046740462 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.02243856 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020351664 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039071361 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.035951713 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028579606 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.019702228 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026567079 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.031698126 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019932323 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.063628083 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038345967 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026768702 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026941182 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020771373 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.034932199 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020734341 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.027812972 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034039102 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026296392 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032364731 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.036368804 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022025192 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.037888644 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018986325 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027465851 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.027161365 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.019777237 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020694012 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019886041 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.019794538 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022847798 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.032596441 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.038699503 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023922619 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027400113 seconds)
  done (took 3.436007689 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.046293063 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.066272858 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034200005 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034753599 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019684631 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020191142 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020191062 seconds)
  done (took 1.068091728 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.091754488 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135142579 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138589273 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.13986068 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.152567168 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.136718347 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.142469981 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.05032883 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.05511228 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155728024 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.146914259 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.141171768 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024138304 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03268531 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052276362 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.14408776 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032973759 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.139965452 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.136100063 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.142822958 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025328669 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051925086 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.03336755 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023428873 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.145913753 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138333904 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024210089 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.061812281 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022939999 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020743219 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02078155 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.04308319 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137411671 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035846234 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021060804 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.01974214 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.13512777 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021353589 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.138451519 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027903112 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.135446308 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023330466 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023577399 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.02127122 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022122607 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.135750544 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022172839 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020870955 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020473827 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.14017223 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031969579 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138174306 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022352334 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025911465 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.02788244 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027460056 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.143920288 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.02156044 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.140967535 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.146523218 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02303348 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.144157704 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.144287742 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.141001452 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.14621727 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030207933 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.141834719 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.137607065 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021097914 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028931106 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.138248426 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.146922876 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024986557 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023410873 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019501144 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028324955 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.151444679 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.151604797 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.152448217 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035399767 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022829848 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021814535 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.15277976 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.153300962 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026971258 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021561104 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021773373 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037082413 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.045927864 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023680095 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026112656 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021497718 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031955678 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023770336 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023100667 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.14599113 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020594041 seconds)
  done (took 8.091993842 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.039383182 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021237596 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02089531 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021306938 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021537286 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021316736 seconds)
  done (took 1.076587439 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048734451 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021836468 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.034323447 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021555252 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043955052 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.129858758 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.129736577 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022826998 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.038165466 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033722786 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.129475706 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.132771807 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.131853149 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022757714 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.129410764 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.03336514 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.129856694 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026198736 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032598541 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022761314 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.032089755 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022355681 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022561281 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.144294285 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.016768421 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032880767 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030975213 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032800761 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.032301104 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022439522 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022288884 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.016417017 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.027384079 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022384794 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.130531046 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.027674873 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021744925 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.017507675 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025890711 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.016466266 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.133752514 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023053064 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026255331 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.017600542 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022477056 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.027488964 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.017610301 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.031611707 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.131578054 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.017757573 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.017482792 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022003789 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.016459317 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.017376535 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.027508637 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022434389 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017525502 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.131964991 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022669593 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.027708879 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021833646 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.016610618 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022488444 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.016481 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026636799 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.017561937 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.027526308 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022769713 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022768427 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021728552 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.01755828 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021733705 seconds)
  done (took 3.90204344 seconds)
done (took 18.401912317 seconds)
(15/19) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.454187568 seconds)
  done (took 1.291384559 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.972532841 seconds)
  done (took 1.820344779 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049893866 seconds)
  done (took 0.913528333 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.298704426 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.506743011 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.712649201 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.089371337 seconds)
  done (took 2.455468297 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.838005412 seconds)
  done (took 1.711737987 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.209505007 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.174750125 seconds)
  done (took 1.273082089 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.473679735 seconds)
  done (took 1.332387236 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.309100615 seconds)
  done (took 2.176709106 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.19734032 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.132673681 seconds)
  done (took 1.197343699 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.594453755 seconds)
  done (took 1.459633336 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.442131309 seconds)
  done (took 5.309955915 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.190607971 seconds)
  done (took 1.116241093 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240331035 seconds)
  done (took 1.108307193 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.721366434 seconds)
  done (took 1.587567282 seconds)
done (took 25.628849573 seconds)
(16/19) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043267974 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.036877437 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.0368001 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034209641 seconds)
  done (took 1.008965185 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030476574 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024760002 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026974024 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027391758 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024772043 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026580556 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.027300486 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02374935 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024791535 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024105902 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.022639232 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024189834 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.02657512 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.02373489 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026236801 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027615513 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024059798 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024704996 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025887727 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023772139 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026639057 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.02400815 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024049541 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025468594 seconds)
  done (took 1.48009177 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034141733 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025472517 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.027328489 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024422495 seconds)
  done (took 0.9832066 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033035289 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030631126 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038772837 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.03910936 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030512856 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031151778 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.037304727 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.037837148 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.044353096 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.040280489 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021658869 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021406373 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.02060425 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035095174 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036932461 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015869192 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017139934 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.031363305 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.030377903 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.033134607 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023538691 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019297755 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030727927 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.031003635 seconds)
  done (took 1.598525072 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037172887 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.01946649 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.03517836 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043573528 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.043545991 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019266334 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032759626 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044283966 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.082648407 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019397364 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025375098 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019351333 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056465894 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019453332 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033934728 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.064632334 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.067447623 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023455264 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.04983871 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.01940987 seconds)
  done (took 1.633043905 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028410952 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024187099 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024902818 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019256466 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030324582 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026512354 seconds)
  done (took 1.032165974 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024000924 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021182911 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020978948 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025322105 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020883654 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020868078 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020858232 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019720487 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019734297 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020542608 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020546177 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020953175 seconds)
  done (took 1.127560791 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.162120837 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026586267 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.027749483 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019810706 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021470659 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020593184 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.035537053 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022383687 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.038339251 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020465555 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020838674 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022903388 seconds)
  done (took 1.310459121 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059349469 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063204576 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095655409 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072402693 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077031175 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049021241 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.192509357 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033260685 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.11295659 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087889325 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075201158 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044809016 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039093765 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023304458 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053794706 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070200766 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088000282 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026483373 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072157437 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.229528409 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083839759 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.083335481 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099224901 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076441317 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045554647 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100215499 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049841297 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055909773 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074954412 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079869094 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07439016 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.056281827 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024961003 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024549378 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111913213 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.056044088 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071881282 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.046355486 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058528233 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043295196 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080714081 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023996232 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037039786 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.064017134 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041073209 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088770654 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.048463397 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070908182 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035461888 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094921644 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084442088 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171004781 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041420644 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059377792 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097867068 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068694095 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088171558 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062766843 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03598114 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.076009873 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.065479442 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058137421 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065740462 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035444634 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135167262 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.195686359 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.076950681 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06649604 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.043683037 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047645577 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063448997 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08749249 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076354027 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.069501089 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081688628 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044986954 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080256592 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052748328 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.075925253 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054951751 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026016007 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.072479984 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079059076 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049883073 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052235204 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079290703 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046089143 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029437998 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.04278793 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.072210903 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03394952 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.061781465 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038665326 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.082333249 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087587208 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051474985 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068646968 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072263545 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032272523 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118012407 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062320513 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026780964 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07155716 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066917201 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105344743 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050523247 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029102252 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05360035 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05671022 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.113476434 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057911805 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034871104 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071521335 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098734098 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049656584 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.244190954 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050256323 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098735385 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070704738 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040800806 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030012333 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.049572406 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068270293 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066206281 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081181627 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051002676 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.038384973 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041390181 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077079045 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049414095 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034227779 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075130911 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.059624783 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.0296827 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045589246 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.031790165 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109474947 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.041370472 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.247853009 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084169203 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029574542 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058870033 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049194729 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057730776 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053214566 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070172463 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090540287 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.134840407 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04283273 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.036136467 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060697261 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094047079 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076943294 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043747613 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.037628058 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052011375 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06275769 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052533673 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073775327 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04622759 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062786661 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055315241 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091969593 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09674722 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054662699 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058970382 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058812143 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.066134081 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02894283 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111623716 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057501133 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076313711 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041239769 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095070877 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.069712288 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060428936 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040420494 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058179501 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.056455492 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059908018 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097282951 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.047045067 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026071752 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047538582 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101838526 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031327556 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073632024 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.044530513 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.046222042 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070466937 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.047874654 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03642843 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022514233 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080167757 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116263836 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.02453509 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07170987 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.070400112 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059257282 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.078905545 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.023814921 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084925542 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094177412 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083970336 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106851004 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154465515 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078826064 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073886646 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.231919515 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.065164424 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032953236 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.077141752 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085440351 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045446577 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044527216 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085782729 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070592607 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.08576766 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.064867301 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073076572 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.056367678 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058291769 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055745584 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.052161634 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093430802 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074109283 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.077067142 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037053843 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063468661 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070455305 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08962141 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03486179 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094165404 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.03843615 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09588674 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.032082772 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080322454 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030353164 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.122429612 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033569098 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053584048 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023744413 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.026497685 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096284952 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.075955865 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058786681 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052627572 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.088790588 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091296153 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031749275 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066415649 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068315583 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05798809 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068681428 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063078686 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042493546 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050090437 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062464049 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040001801 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.03627199 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083175667 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051075492 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091877157 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037791189 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029148229 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094180514 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066774419 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048868924 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030916729 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064177966 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.082110664 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047954788 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04120132 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07765845 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061193167 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101027732 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045822795 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057838561 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083551193 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036911763 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.052048868 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024461433 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.045410107 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031396207 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.24458067 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030106816 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068754469 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022757581 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08133341 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038281956 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.050048412 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0562866 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060516761 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085816871 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046841947 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090757589 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04159117 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.068281721 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060153231 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064624417 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039001395 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054318837 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056303615 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072342073 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.046068979 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072359622 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093313406 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054997609 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093866632 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043767926 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076302842 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059833595 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075463897 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065948177 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147339287 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09281575 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067700226 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06576527 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029312519 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049231983 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065126448 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063737466 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129504665 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078245662 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026094416 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057399562 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047459392 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060355409 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06202535 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033610256 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096105689 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054599347 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041308764 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06215621 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.043517764 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058461292 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029910953 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056122998 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.051166196 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050071696 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052692246 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069717127 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084766644 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065125026 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100567359 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.05764516 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045723003 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.074823274 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074509369 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072164882 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038602961 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039303924 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101634131 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.075073948 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.082989212 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054119621 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.222282237 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063876562 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05186727 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081523476 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058313798 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.076040601 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032803743 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029780468 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022277971 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025483247 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074859711 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062702022 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061235548 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056417225 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025641136 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057178627 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059070393 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02547519 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038263433 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046111065 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050949759 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.035174705 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057115289 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066761703 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.046550952 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053172333 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055534581 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093399265 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.051109518 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041858984 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0954987 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103786311 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041893071 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04700622 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025476226 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03305305 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077173276 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098502981 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102722112 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.033034112 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04025902 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.038129545 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040921981 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025326959 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041799234 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042710658 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058730875 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051175917 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.067603515 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058126775 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029208185 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061446058 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053651481 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046951501 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060804509 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071940752 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079864991 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.092702975 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06738276 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071850804 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030741496 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.034527365 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030819969 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034153572 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061302687 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.033453782 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03061829 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104206764 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.046536101 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066926654 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068503296 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042643437 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02983856 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090086399 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024088569 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09249594 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025441813 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035150658 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036733831 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033570263 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051681115 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101028321 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064414969 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.219823619 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059491393 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062081737 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139390149 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107867034 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038191168 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091628086 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02876376 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029515456 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029556304 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059640281 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041923659 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069315486 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093389495 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040636817 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052657587 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031160804 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092992391 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.048481178 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053199829 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038070782 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032344186 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092725663 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032777807 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.038120376 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042254026 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064420923 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.025958947 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054485948 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036990067 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033602265 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143996256 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.664783964 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050209358 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.028171309 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05010686 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094887107 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087076157 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050043336 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064657526 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.072582235 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058801265 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047973355 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06792913 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.155270601 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027857525 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0489635 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.051646103 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056468667 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063125553 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.050205937 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040907228 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.049286584 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039988331 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033235648 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067581705 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041336033 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052259843 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061420407 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037897717 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.043329889 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086037267 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.056913464 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.038619286 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043851077 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.06595312 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041561856 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062022594 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024002117 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065005831 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043848126 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076265919 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054305608 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065793758 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081492853 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049017652 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095669912 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.065916437 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079274477 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042072876 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.186393184 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075286987 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.04163579 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030627903 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093401959 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.046023196 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.056693581 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058677556 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.048452405 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060828198 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064665359 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06386812 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052511838 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031225061 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050145061 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057481774 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03835341 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032216173 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.026195579 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.02887445 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059820472 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037415805 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039320184 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067515746 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041263198 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054417468 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.050742491 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073945432 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042300989 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057814066 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063271145 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045335352 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086136848 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054546823 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081846456 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129075797 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086491614 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084163479 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087785847 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032097191 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.033447191 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02307726 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068458557 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033716158 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.040987601 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032879453 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087307508 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038152002 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065419201 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.21108843 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034427032 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047196907 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050307839 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023944255 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037600872 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063823117 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040465125 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034142412 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066353134 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035842088 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082224133 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062299127 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052881262 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049335413 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034806928 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064384237 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.059847632 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.084985534 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054532891 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029557451 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080948101 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061473088 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099897943 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029406304 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036053168 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086413309 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060489936 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09268147 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036807164 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120108139 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101465055 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.211252465 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085062339 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025620075 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042591151 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041571478 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.074258796 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037159957 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057728991 seconds)
  done (took 40.045143161 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.207859872 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.255960934 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.129301107 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.110107849 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.076774105 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.076837211 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.246564365 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.090885735 seconds)
  done (took 2.184171266 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024500764 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.052667758 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035074321 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.286349839 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.056150917 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.0211627 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.027853149 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036022804 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024568977 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020543496 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.058146713 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020729611 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024643488 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.442054655 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020063667 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025007011 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024670638 seconds)
  done (took 2.20670335 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.303120722 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.579351253 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.289823202 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.364515498 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103239978 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.559988171 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.0285482 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.033787603 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.623885773 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.161414162 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.096943297 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.174298025 seconds)
  done (took 17.310997284 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.03109091 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.148134594 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.146910399 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.02783049 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027324022 seconds)
  done (took 1.437315594 seconds)
done (took 74.301566797 seconds)
(17/19) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.041494769 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.122038788 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020745894 seconds)
  done (took 1.160574327 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.150526793 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.146650846 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.147541907 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.148222286 seconds)
  done (took 1.578444217 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030405878 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029622579 seconds)
  done (took 1.052739364 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.175979854 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.249528451 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043656938 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.039669255 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.0338839 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035445577 seconds)
  done (took 1.10616537 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026856926 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024661093 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024646772 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025159111 seconds)
  done (took 1.088263696 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.130008038 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019551115 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022121415 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023638833 seconds)
  done (took 1.182035805 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.039986109 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039002267 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068990015 seconds)
  done (took 1.138433761 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039738578 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038225857 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032935299 seconds)
  done (took 1.101986103 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.063058011 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049156511 seconds)
  done (took 1.100267574 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035913198 seconds)
  done (took 1.026610677 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.0472523 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051383225 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.208998716 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.175448069 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.213015441 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.195074014 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.032794217 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030150252 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.032199764 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.034434649 seconds)
  done (took 2.00747271 seconds)
done (took 15.043894036 seconds)
(18/19) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036330194 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.143646575 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.392975942 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040269954 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.608837339 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.390073107 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.684951167 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042823512 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053035535 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02184184 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038386621 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586570482 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.685736811 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.100545083 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670227429 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.096565974 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515213418 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022000301 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02119083 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02163802 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.66581672 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021404283 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021614122 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022058178 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513550586 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.286537646 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022378179 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.088908476 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021429679 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025122449 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269483311 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022449725 seconds)
  done (took 12.136089559 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026043363 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075430127 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.0263147 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037095355 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023449731 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023649596 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.039939245 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022102204 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.064114109 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02182437 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038793497 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021295006 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.02588902 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022761353 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041691774 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021668132 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023540479 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022179545 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021685501 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022057155 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040580193 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021336389 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021995637 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022236696 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022025636 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036385846 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022825472 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021704135 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022156562 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025519314 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026846156 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023108469 seconds)
  done (took 1.932359896 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077966148 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076716885 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027369793 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061483144 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072302112 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024738257 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.10383262 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043368555 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066672971 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022349017 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038882837 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021813594 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058296691 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023149328 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042633823 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021964565 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024267518 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022611354 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021725355 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022249375 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041170326 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021652901 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02208205 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022459481 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022493362 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037966304 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022722822 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021837294 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021936353 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025702659 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027353123 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02320082 seconds)
  done (took 2.188573899 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025729017 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025984687 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031661162 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.034890039 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020281272 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022896327 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024083255 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020394434 seconds)
  done (took 1.211042988 seconds)
done (took 18.477582571 seconds)
(19/19) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035665936 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.02210198 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025131244 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.078807994 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028584096 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.137325962 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.024673315 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027253099 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.02616461 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024983246 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027191022 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019531066 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024211279 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.024347935 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026092838 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020101353 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.140374937 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024597977 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.137641119 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.139498427 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022921304 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025822728 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028661753 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.138508624 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.13832789 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.138310973 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.02942331 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026068496 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.025787242 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023159483 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.136734868 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.138919821 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023028236 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.134450813 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020697041 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020300826 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024775592 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021945049 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.141656002 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029450915 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.02245523 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029159619 seconds)
  done (took 3.38297066 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.142891612 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.147609814 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.140397877 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032589537 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028812264 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031863732 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.146178028 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.02921507 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.02793596 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.145212163 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023751965 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027680036 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029915923 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02087285 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027511558 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.02420674 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029517367 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022045826 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027452611 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027817487 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.146028758 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021361981 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028580636 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029007851 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023660619 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029701306 seconds)
  done (took 2.435547857 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030279021 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042859208 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.04541168 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.11012821 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062429423 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.043205884 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036722502 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047019176 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.05293627 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021170391 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043392106 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.049438884 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049447517 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028095283 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059517451 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039794762 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033957603 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022736235 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027464228 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055429128 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04432279 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040371086 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053598333 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040767724 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02021538 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030052928 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025419803 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037474667 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032534591 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033449928 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.02481841 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024685434 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021871446 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.031754445 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024660581 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019548795 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.044207426 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033791477 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036012057 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.05988589 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031302749 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022359215 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047542082 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.080613619 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.019995246 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023979206 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025315138 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033734024 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022576779 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063309321 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036133373 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020585287 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040150403 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022403251 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022487096 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041772822 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022733014 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023107862 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.041435588 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027461707 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042735032 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026703009 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.039329823 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020105693 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032539976 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022340306 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022723103 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019760078 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054740394 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028197141 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.067062647 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022160978 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019553617 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033264742 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.03259795 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028349396 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.019805382 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039349556 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033677483 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025001519 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.039380887 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023889895 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024518788 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.064942733 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020449877 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019572933 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.01954558 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023671892 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.02435324 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021742107 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033395626 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.02066188 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024881462 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.048166873 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021100801 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021896409 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024014051 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022671541 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020564206 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030889367 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024553345 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023018798 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033840463 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021904346 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02501836 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036221288 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030706736 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020090839 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022559659 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023818513 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023065386 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.022949255 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.025119069 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023300929 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026756615 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.02892704 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027299874 seconds)
  done (took 4.891526021 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.233238159 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.222265522 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022278099 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.218638533 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029807869 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.150485777 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.221094923 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.222368649 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022047296 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.02278988 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021048383 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.165764187 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.160879249 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.173647345 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.152380294 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023774225 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.054324825 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.171092649 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.226201306 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.222204782 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.053708217 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028941094 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.287214863 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023804289 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022715044 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030634135 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039168334 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030695831 seconds)
  done (took 4.285086898 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030222628 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.066030025 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025458632 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046315204 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038949984 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022323397 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023668024 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.02247312 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038526357 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027377461 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022093318 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.02582851 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025212674 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024010187 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.021988175 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.02804938 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028501467 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.020754737 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025379691 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026399397 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032895252 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045695811 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025727075 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021677173 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025070747 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021636021 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026813015 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030245927 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021472683 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021544481 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019001451 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030454734 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036823972 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022982502 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021596441 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.02247019 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022133944 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022074838 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021960072 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020185209 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020118839 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026906331 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020530405 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026587964 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035699475 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024464145 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023551337 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024455545 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024596922 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019094998 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025035807 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025306832 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024646336 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030257109 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02430961 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024634773 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023411001 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036769322 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028047165 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021884731 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021324046 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.02041061 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023967336 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028455444 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038106393 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024284934 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02045951 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022400435 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023836322 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035646601 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021767585 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028466508 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019183533 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022238859 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024292956 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024784198 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023393339 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020669825 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021599031 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021341675 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022080528 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021674605 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021195235 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024535936 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020028012 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020696163 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.023012175 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023546493 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.02723633 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020785032 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.02550048 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.02344604 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020997765 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.02463422 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027409227 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024730253 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.03945387 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029448624 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022653078 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019862435 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038404186 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024726596 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021329106 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023828399 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030571348 seconds)
  done (took 3.769472695 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.0523643 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023986981 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041396965 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.057198415 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.03207516 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027731637 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.03551673 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.02325678 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043308485 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021062807 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031095058 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020340417 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034883521 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030697355 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023943275 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031892939 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024759756 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042453369 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036949979 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020757456 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03065097 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.035049458 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034537636 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039457147 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.04005991 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040143011 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.03423435 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024771587 seconds)
  done (took 1.971583527 seconds)
done (took 21.735636753 seconds)
RUNNING BENCHMARKS...
(1/19) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.064732561 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.265001301 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.038111772 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.751466677 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.125487682 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.171570867 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.240428879 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.017160812 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.171559627 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.126164322 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.676837756 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.326591047 seconds)
done (took 59.074344836 seconds)
(2/19) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.115155752 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.192873858 seconds)
    (2/2) benchmarking "String"...
    done (took 1.277628374 seconds)
  done (took 3.507984468 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.465905114 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.027924818 seconds)
    (3/3) benchmarking "different"...
    done (took 1.061762137 seconds)
  done (took 4.568187994 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.427157626 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.850346821 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.306628776 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.015226225 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.03075533 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.502439912 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.226795197 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.761331524 seconds)
  done (took 26.715564713 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.037992483 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.286147129 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.415775201 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.568746118 seconds)
  done (took 17.415656765 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.479074218 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.537543165 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.536438559 seconds)
    (4/4) benchmarking "different"...
    done (took 1.66084353 seconds)
  done (took 7.360543638 seconds)
done (took 69.224469534 seconds)
(3/19) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.015999604 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.169864546 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.043421871 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.21205664 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.101271156 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.117412826 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.026877657 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.038505662 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.025682065 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.027315642 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.95610034 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.028711469 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.027434897 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.083397831 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.03121252 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.030181202 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.156373295 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.033090802 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.037728201 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.670651602 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.347381993 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.018767307 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.027700351 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.099134175 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.245032543 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.03531329 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.31014501 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.036194646 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.61696021 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.026594927 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.030398233 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.027803464 seconds)
  done (took 178.668428486 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.016357199 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.794823367 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.811627903 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.030275433 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.347975038 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.374756835 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.820680544 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.366753236 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.024983499 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.02298765 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.028349649 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.018895689 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.026301738 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.553064501 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.062362825 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.03296513 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.891998221 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.8345041 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.073371793 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.881418166 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.021473756 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.512676237 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.508466419 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.821560677 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.022708374 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.070325678 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.050833571 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.085603234 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.546374115 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.940846262 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.083340107 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.16587216 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.329498454 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.384802093 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.058931075 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.071436081 seconds)
  done (took 149.713575732 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.293235354 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.0693146 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.107646588 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.176982083 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.034316338 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.910038801 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.0543595 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.064992379 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.044823835 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.054127844 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.059371105 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.112588198 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.048320939 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.229610907 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.073827829 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.034663336 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.036392071 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.194268973 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.052671082 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.036021008 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.029869073 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.132491014 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.379249323 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.14937326 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.044413332 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.040215767 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.143359498 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.043901864 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.031345813 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.033521995 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.148579783 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.046133303 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.170899507 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.147278523 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.040410745 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.087204536 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.051251737 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.242619639 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.041738423 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.037631659 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.043694971 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.096047261 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.049990691 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.097718932 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.142386688 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.041821179 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.053024884 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.49413257 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.627238674 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.038073483 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.030323175 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.029592875 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.06449267 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.037300107 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.578113805 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.086590624 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.100362257 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.642497877 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.043851195 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.033768054 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.027189534 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.027901411 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.029062337 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.036953253 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.078412294 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.697703811 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.138429543 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.394905855 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.776781104 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.027481912 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.02760894 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.031077679 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.96081261 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.246993815 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.18975371 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.182163919 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.367583348 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.188243605 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.192855472 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.152701828 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.148066002 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.189313346 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.307212021 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.190219325 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.187659394 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.2272332 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.214666797 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.07339164 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.076961814 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.116579986 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.048465759 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.027948563 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.042651546 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.975864792 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.052059247 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.037643495 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.373099176 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.035513016 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.032679068 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.122532353 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.394532623 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.04213056 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.121448785 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.438271906 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.957689465 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.064606675 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.019751889 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.034904648 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.018444724 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.029295471 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.031281295 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.01850704 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.017364356 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.021909227 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.016418659 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.015963406 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.050100356 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.073624194 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.065850256 seconds)
  done (took 320.539838268 seconds)
done (took 651.346197831 seconds)
(4/19) benchmarking "parallel"...
done (took 1.065734411 seconds)
(5/19) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.31410495 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.084742268 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.270228255 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.306877885 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.258235942 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.225863052 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.251962011 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.341099967 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.280445906 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.220021539 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.293575984 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.235983008 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.33761437 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.304147056 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.306128653 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.337876036 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.244261686 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.770860813 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.262618868 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.215468616 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.246780261 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.243063852 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.208062723 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.292115799 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.284537605 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.258407513 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.462377247 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.300414588 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.272461974 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.309828896 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.336975142 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.343236442 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.272573746 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.313486505 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.345875588 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.325425269 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.252453723 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.331437534 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.281332542 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.332833544 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.27347416 seconds)
  done (took 61.207126365 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.471052546 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.259315571 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.369073857 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.367981575 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.98930137 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.392690401 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.464057175 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.23898249 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.249151139 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.393587705 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.406185471 seconds)
  done (took 17.643492884 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.300494795 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.249223373 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.40181655 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.390042728 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.49679947 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.387671766 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.405158723 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.21776331 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.252753418 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.393946385 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.40904982 seconds)
  done (took 16.980582667 seconds)
done (took 96.895298633 seconds)
(6/19) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.640635802 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.109839248 seconds)
  done (took 3.810075855 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.088139785 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.078406388 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.073909608 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.075039207 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.060778875 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.030392756 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.103079052 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.086260437 seconds)
  done (took 9.65009956 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.070907044 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.079030862 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.084518709 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.057754674 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.029725199 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.051249174 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.073740413 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.068286577 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.071530818 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.073619301 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.07126398 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.064514841 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.030572215 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.03989081 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.068738239 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.067347674 seconds)
  done (took 18.052223569 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.073839119 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.069716774 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.054385041 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.029532037 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.048223716 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.07005161 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.069910062 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.079336659 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.070343134 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.074063885 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.040650281 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.029072645 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.06715079 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.068913624 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.073549965 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.071108223 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.073171806 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.071947922 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.030038152 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.038007827 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.069397816 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.068760914 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.070327187 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.077072133 seconds)
  done (took 26.547217703 seconds)
done (took 59.139125446 seconds)
(7/19) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.821075852 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.793593632 seconds)
  done (took 6.664582224 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.044735994 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.040711154 seconds)
  done (took 3.17798409 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.04058759 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.039907633 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.041864342 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.039688273 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.041371784 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.042273647 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.039524589 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.071882631 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.058025127 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.069184772 seconds)
  done (took 11.51324455 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.093877774 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.105329254 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.077549678 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.085136851 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.042606121 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.042673323 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.040655922 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.042026102 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.040958263 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.042893335 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.041316615 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.228499716 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.039758872 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.26713498 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.04077438 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.038654463 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.039955829 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.058837461 seconds)
  done (took 20.398267258 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.049878263 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.03954281 seconds)
  done (took 3.117554258 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.069383094 seconds)
    (2/7) benchmarking "second"...
    done (took 1.075983369 seconds)
    (3/7) benchmarking "month"...
    done (took 1.081180608 seconds)
    (4/7) benchmarking "year"...
    done (took 1.07511558 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.087937091 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.069582584 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.068836277 seconds)
  done (took 8.603429035 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.520666559 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.251878101 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.299873742 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.58179208 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.861586214 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.14026282 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.732966245 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.140524909 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.834460415 seconds)
  done (took 16.41007835 seconds)
done (took 70.946346502 seconds)
(8/19) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.833355027 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.076596199 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.703733344 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.193465449 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.124821728 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.395569461 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.061709534 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.686168524 seconds)
done (took 37.131363054 seconds)
(9/19) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.287305218 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.077255315 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.12415092 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.150736658 seconds)
  done (took 19.437150519 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.063887796 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.493056836 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.044177553 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.061445646 seconds)
  done (took 18.810235482 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.495665723 seconds)
    (2/2) benchmarking "read"...
    done (took 1.496461955 seconds)
  done (took 4.063296922 seconds)
done (took 49.663878253 seconds)
(10/19) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.059364348 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.11904909 seconds)
  done (took 13.198396003 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.030791906 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.029739687 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.18212848 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.030292922 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.026169875 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.141507467 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.099737274 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.039199899 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.030854405 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.115602553 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.030416681 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.160231416 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.132555531 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.031211259 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.071568225 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.039448221 seconds)
  done (took 38.224876377 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.016880473 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.217426541 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.94485522 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.636789192 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.033141837 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.565959886 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.225710153 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.263496965 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.271528832 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.480980843 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.290041729 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.556372221 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.664167106 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.135738719 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.501566078 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.463492175 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.542392558 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.601231238 seconds)
  done (took 56.425879806 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.023809181 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.166552957 seconds)
  done (took 8.218476654 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.0370295 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.029622539 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.046827745 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.033311425 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.033141232 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.029109252 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.059136766 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.054796472 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.05858794 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.029835894 seconds)
  done (took 61.444072269 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.019368392 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.504733561 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.354834711 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.46886975 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.464600663 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.490067179 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.183697274 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.36780492 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.120085928 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.016924683 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.886935377 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.391676939 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.728703246 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.954876351 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.568327347 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.399100532 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.599027205 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.404533289 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.346401432 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.344075029 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.187733038 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.760540078 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.396925472 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.767698749 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.023093047 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.024309207 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.152190344 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.129240269 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.113269948 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.874002601 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.78139512 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.185428439 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.816925056 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.162562029 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.145804134 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.564363345 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.685935184 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.241861291 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.367517093 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.343742938 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.399637828 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.386857571 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.030290164 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.351392119 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.130612342 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.161524471 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 1.880327395 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.258821489 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.122789962 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.152515065 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.596303607 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.204815998 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.161193373 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.144955854 seconds)
  done (took 144.34649509 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.017911479 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.427560653 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.178742827 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.021047126 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.452694952 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.235933125 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.800890722 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.414753214 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.022386855 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.240719921 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.19739716 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.162855345 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.021461611 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.023657844 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.026143239 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.024034942 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.213923172 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.429431944 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.026473045 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.02208723 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.241158064 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.270204485 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.163538041 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.024292441 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.198643691 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.272245219 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.413805962 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.162411749 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.403196861 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.018240462 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.42256079 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.024599169 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.069307386 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.941466478 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.400920978 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.368735756 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.482510005 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.070933412 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.807084275 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.042220114 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.715660727 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.248453076 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.371054263 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.203861495 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.328494288 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.315228602 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.700129443 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.122687179 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.844236663 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.335147233 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.333370908 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.292911123 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.388730175 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.072931868 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.601106072 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.027247724 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.042149307 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.316822908 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.212576367 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.176219613 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.035456295 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.031483971 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.041729378 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.31753077 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.053556881 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.172840068 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.05306981 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.051217101 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.194492996 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.197201228 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.216733849 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.312974822 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.320315915 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.313840041 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.087608739 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.309127201 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.44458815 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.30454275 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.06459251 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.059865336 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.454661856 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.497372809 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.233436819 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.328689858 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.4883631 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.378717087 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.672315431 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.129541888 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.297988695 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.247741906 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.46555226 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.3451764 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.449595507 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.945359855 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.032495654 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.065862546 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.333603645 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.159257785 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.021317444 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.528849106 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.315194326 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.135612188 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.208867877 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.519587321 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.183031633 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.068949856 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.621036464 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.037907678 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.289181185 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.319705331 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.032251621 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.063175448 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.219047794 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.002086216 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.056217323 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.4307632 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.442101213 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.076004877 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.226440749 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.210261819 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.447733271 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.000556453 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.442987408 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.197795003 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.451848208 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.359700697 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.433802596 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.152185975 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.328652768 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.35671312 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.482395859 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.362739674 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.045960429 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.028239898 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.356972588 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.020912367 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.022923896 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.218966055 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.997077824 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.202135079 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.021764846 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.440986814 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.187228881 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.40489739 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.02152057 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.279646432 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.275735698 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.386592299 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.019763974 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.165457394 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.021929659 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.085594381 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.19392573 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.019596799 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.022299898 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.844595261 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.021442399 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.200523698 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.258206101 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.741366283 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.397269456 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.380002418 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.017794017 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.470070605 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.227836544 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.46421425 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.557952658 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.199175285 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.715584406 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.231173465 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.022818051 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.27074938 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.325960967 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.021556704 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.025040772 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.758614164 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.15010295 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.021170222 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.191540559 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.290396746 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.447822238 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.235674586 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.023421839 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.389695844 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.023313203 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.205686952 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.512427248 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.307528101 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.022951278 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.02356697 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.023249901 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.028393498 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.245503164 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.289379479 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.71822828 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.174856517 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.330980455 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.245512466 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.341489682 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.496119672 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.033802316 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.351044508 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.020738079 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.413369083 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.027593668 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.228891352 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.299225945 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.022983054 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.251946724 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.380702616 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.222121845 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.41514505 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.022114517 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.025449782 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.787904648 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.205483167 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.461955355 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.020300915 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.131718613 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.387493673 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.159775118 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.248827313 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.261081863 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.031322888 seconds)
  done (took 715.305994695 seconds)
done (took 1038.198926381 seconds)
(11/19) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.017948981 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.024225119 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.026635454 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.027193995 seconds)
  done (took 25.111836551 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.855902638 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.845779435 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.126995954 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.032829772 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.332716793 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.083816309 seconds)
  done (took 10.303545856 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.536361663 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.025667134 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.027981568 seconds)
  done (took 17.607959577 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.28457214 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.454108661 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.198162899 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.123912318 seconds)
  done (took 6.084461358 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.035031748 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.032522196 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.030132451 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.030381807 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.030965628 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.031477965 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.032900799 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.032124741 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.032626968 seconds)
  done (took 10.307161021 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.507920796 seconds)
done (took 74.943253847 seconds)
(12/19) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.438463131 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.320271801 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.032138793 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.276795983 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.158811134 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.316594223 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.146994025 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.052254965 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.357310999 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.454774518 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.527565123 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.319057138 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.518881223 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.497032357 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.228681727 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.049598145 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.047161816 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.09562249 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.730204419 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.242383623 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.697790163 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.165658046 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.663141732 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.06126053 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.012788249 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.109929207 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.279414737 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.233313867 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.21331628 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.056513859 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.12174718 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.595375618 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.269970586 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.356236464 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.12800025 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.996040244 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.542422264 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.032463503 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.299579678 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.615668273 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.29100142 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.111574314 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.019359616 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.276046178 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.450598299 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.050585163 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.022436263 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.192790862 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.634632636 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.19678651 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.401278806 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.034673188 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.654094974 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.109540147 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.114225212 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.050744717 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.087992013 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.534817502 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.24451443 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.349690284 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.048723145 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.018873216 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.069044592 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.065334788 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.269383189 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.547434326 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.443319746 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.119711747 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.556365373 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.066590488 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.048617208 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.062063089 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.747877214 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.10385789 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.018526012 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.069352456 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.321209183 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.20483994 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.031182142 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.952920382 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.455089268 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.022203426 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.192874577 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.388572168 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.197600193 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.514599064 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.555834535 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.452415874 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.632512068 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.108615293 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.364041633 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.095002606 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.276503207 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.03298824 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.071598859 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.792380367 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.982236941 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.572451475 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.167661461 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.770235635 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.064692489 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.048084697 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.568267181 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.359140456 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.911675812 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.068785583 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.16148836 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.032294936 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.210770056 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.734825124 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.256967077 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.523992524 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.031196278 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.092382274 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.627679262 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.039114575 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.36126131 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.46403184 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.215757878 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.034173252 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.265089512 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.035240411 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.152537218 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.59865229 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.43171377 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.231143269 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.023952685 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.966199241 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.031445221 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.280833404 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.033736511 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.744121702 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.640725691 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.070269204 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.282599823 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.155936233 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.019115591 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.19041484 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.0820645 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.166127345 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.330432961 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.367507824 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.198449489 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.019492592 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.348572161 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.415603409 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.267052179 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.378073019 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.197026557 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.329766176 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.113918748 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.043908121 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.1102585 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.477708666 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.669963467 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.79543017 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.25670091 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.163523357 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.631253564 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.355996363 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.879077792 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.136382116 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.081441331 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.031150841 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.047796319 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.092848455 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.021356583 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.029835114 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.261949065 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.441413029 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.68797429 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.912286638 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.93020683 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.320669366 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.16621894 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.997386394 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.752804455 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.040038271 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.417855927 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.581550829 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.242654428 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.06613642 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.153252255 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.033342994 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.856058429 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.072579032 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.365380849 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.711663683 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.484467889 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.47678009 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.330787988 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.071576208 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.406921033 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.32916912 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.320855104 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.291476853 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.672288035 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.112291638 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.494861302 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.203981803 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.316546585 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.031189695 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.576936044 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.384990393 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.594850943 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.436378909 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.261691268 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.257331658 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.339397133 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.032190061 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.410727596 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.3300842 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.287800626 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.062154794 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.607479528 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.129783765 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.235228098 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.080091824 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.210696779 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.474826134 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.134670706 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.250810487 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.58863824 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.04500693 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.360688736 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.252134937 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.352048367 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.238570143 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.063594146 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.197605549 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.205656038 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.169534718 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.240493956 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.201622189 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.449539242 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.019181326 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.468373201 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.022291024 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.264102294 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.065367081 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.04126522 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.365616766 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.23046684 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.336018118 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.306746885 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.198129349 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.019856826 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.065499959 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.631750582 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.954314112 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.679636613 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.21727718 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.068180381 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.020160438 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.485909349 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.463063465 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.096966306 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.167713608 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.752531329 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.079658504 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.20142868 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.034941679 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.032328151 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.039521219 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.171240968 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.275567413 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.660153789 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.037284959 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.849901464 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.201667019 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.613833708 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.612907952 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.087123249 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.154248079 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.144415178 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.426199401 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.442777803 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.061453935 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.187323205 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.440616102 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.154830563 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.148592989 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.023288233 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.073960138 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.711360431 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.406824002 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.565032962 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.069796945 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.442732167 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.075419775 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.393331258 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.054065794 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.114581596 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.452803304 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.173187697 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.458779559 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.035422186 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.073087778 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.282835191 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.059639805 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.019898029 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.249324703 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.023610678 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.619381153 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.54451579 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.308166296 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.107059078 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.27251751 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.029784951 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.053384018 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.158854169 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.113921966 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.681719373 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.603330557 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.032683357 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.423060499 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.021787412 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.439376715 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.061901082 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.049263886 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.151201465 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.122710442 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.019535601 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.384476831 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.197992034 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.565741105 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.275418133 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.050612989 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.037410877 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.913581529 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.148639683 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.367446314 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.819446022 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.047962274 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.196098627 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.696676479 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.295370782 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.070704799 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.375418905 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.044423901 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.7999968 seconds)
  done (took 849.405931844 seconds)
done (took 850.553955501 seconds)
(13/19) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.06648849 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.401637812 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.225257943 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.91995021 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.838672777 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.669075534 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.245064908 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.25870388 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.103321188 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.245168857 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.933361698 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.82355683 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.11909751 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.140644141 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.102704894 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.139214122 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.204125295 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.265864894 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.141366448 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.830456666 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.391243588 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.835263452 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.439096411 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.320274742 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.397932157 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.122298051 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.090782506 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.380230343 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.379438949 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.010943727 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.224326602 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.225449844 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.861511367 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.259546958 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.103341974 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.108264894 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.86702105 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.118507281 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.051194449 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.108062493 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.400168742 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.147901845 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.752673053 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.96921259 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.814813477 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.452156787 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.900213992 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.129088687 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.124123815 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.203553004 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.055426112 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.050690126 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.380204437 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.031290685 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.858420426 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.953814694 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.379106318 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.869311955 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.751362086 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.203241584 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.396966348 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.123016208 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.202544776 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.256693712 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.145263479 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.320179833 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.439985398 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.051208742 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.225441658 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.251808851 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.271493925 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.251531222 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.143018023 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.238982505 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.148951849 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.245672506 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.754168893 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.225740351 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.816156288 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.12236659 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.988281168 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.903857025 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.981240778 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.102933584 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.067501193 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.80422024 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.845204611 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.979026792 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.141394579 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.22563176 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.941991034 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.226023384 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.486086543 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.092725405 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.067073967 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.226492302 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.855214037 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.05000365 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.192000462 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.225754969 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.821934062 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.090695509 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.021085791 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.125113095 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.128928907 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.050849994 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.091026983 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.443047782 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.25067105 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.18974089 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.401511618 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.148770738 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.251037883 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.140893415 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.100838975 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.814640343 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.309040977 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.872803718 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.050105796 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.699338748 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.306975627 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.124877219 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.400833258 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.320762273 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.067387722 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.119767466 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.129107939 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.940415528 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.12922841 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.122733119 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.206532263 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.479074876 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.203797043 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.926292864 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.251438407 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.947954255 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.264037335 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.251971846 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.101723325 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.929441847 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.119764672 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.168953645 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.321868751 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.40239924 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.266380141 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.322147455 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.141567081 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.29401672 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.049125957 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.141442239 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.251129471 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.156086699 seconds)
done (took 228.340928677 seconds)
(14/19) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.375045736 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.144026493 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.289992665 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.274588482 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.417696543 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.31115685 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.097197228 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.465843921 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.081334115 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.446000928 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.235583424 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.899771934 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.177109374 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.261003309 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.375176508 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.279261713 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.082151165 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.283930316 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.477226397 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.384092026 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.796699509 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.254676387 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.16384594 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.415986769 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.020126602 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.783053894 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.332386448 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.14965901 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.295746206 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.782684502 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.798060349 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.290735713 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.332432358 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.739539505 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.412868994 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.7587881 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.364372495 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.802448881 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.284784627 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.362015591 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.251660968 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.857759171 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.803455419 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.817772189 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.143818365 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.340299915 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.096145898 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.949127316 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.020229466 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.761453568 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.291854804 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.840875695 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.918682785 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.289866588 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.27061034 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.697623654 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.412152063 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.46046313 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.383049357 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.335708556 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.285482122 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.451070728 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.413911689 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.142118494 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.781710284 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.319606458 seconds)
  done (took 140.854331022 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.454906673 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.370888618 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.471224691 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.350359756 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.585805221 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.488916624 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.431355268 seconds)
  done (took 13.170835542 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.088482707 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.075768623 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.320967964 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.278173306 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.084164685 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.205152237 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.166394583 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.787748307 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.300214639 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.120086216 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.413253014 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.296054809 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.696245384 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.795659119 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.166624687 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.31733488 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.058093463 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.145162592 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.13749896 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.339259533 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.827512029 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.769635922 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.230322336 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.061294458 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.082962 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.120155017 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.078208955 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.049120944 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.077408519 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.059526393 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.085860574 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.190951939 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.077001311 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.776230537 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.06368125 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.397573515 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.084899793 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.082399085 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.212185561 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.021018099 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.06142183 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.08255101 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.217976751 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.088884619 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.058171665 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.268154265 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.063792581 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.087869874 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.058890359 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.072186189 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.266502101 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.073647035 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.064130392 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.709302237 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.287587898 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.761972313 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.145292404 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.07318225 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.077545969 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.136802701 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.076979874 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.337521637 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.322030501 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.061237798 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.295113924 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.362509934 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.072085909 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.059173847 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.062045304 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.298533435 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.069763283 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.273177424 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.081077765 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.136106549 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.082972862 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.214584274 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.267954996 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.881148514 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.851668653 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.712023773 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.433325975 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.065687135 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.422224139 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.014818222 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.708093391 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.06171362 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.081685118 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.757731538 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.987436009 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.074568708 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.388943479 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.058738839 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.135196831 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.133461014 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.06136225 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.138995302 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.241039354 seconds)
  done (took 143.242753171 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.225378887 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.368802541 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.2459813 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.015132751 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.097650568 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.329742728 seconds)
  done (took 14.30022206 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.407427841 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.899606441 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.095739785 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.09292266 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.133514267 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.03292013 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.032743316 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.284888071 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.242671623 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.080427755 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.033121702 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.034369302 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.033045914 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.21679016 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.033190398 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.086939413 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.033952722 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.102408743 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.083140082 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.142238995 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.37821337 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.132089985 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.1428865 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.949208511 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.110377988 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.082698206 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.890037233 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.086421816 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.087836156 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.483410518 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.28134103 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.03386883 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.89342211 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.447011414 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.816291834 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.959117349 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.243979712 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.037447699 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.085110641 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.033320529 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.033033977 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.142504251 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.092073608 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.033486098 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.431326147 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.899132578 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.113425535 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.334745279 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.034116391 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.034841955 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.033974978 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.097962481 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.033969438 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.033920298 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.762662837 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.491163073 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.005156647 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.036695174 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.133725453 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.964537723 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.174414157 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.036703969 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.419731965 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.99887328 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.767887099 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.033771677 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.96630681 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.23145547 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.147258869 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.098237401 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.034488996 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.098256992 seconds)
  done (took 111.092619006 seconds)
done (took 423.681311994 seconds)
(15/19) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.269911995 seconds)
  done (took 7.288035943 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.144676293 seconds)
  done (took 7.307393401 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.023324691 seconds)
  done (took 7.052337959 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.031402341 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.078049776 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.056851098 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.067015982 seconds)
  done (took 25.3043601 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.538950524 seconds)
  done (took 7.559739048 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.021429301 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.0590235 seconds)
  done (took 13.17464913 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.155565494 seconds)
  done (took 7.213833107 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.431062674 seconds)
  done (took 7.47011151 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.022084516 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.058356807 seconds)
  done (took 13.131980369 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.02162058 seconds)
  done (took 7.040623527 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.424388937 seconds)
  done (took 8.531528739 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.035265752 seconds)
  done (took 7.089570473 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.066700578 seconds)
  done (took 7.086042194 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.097513251 seconds)
  done (took 7.116097737 seconds)
done (took 133.387831141 seconds)
(16/19) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.021334893 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.026059336 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.026455205 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.024830362 seconds)
  done (took 25.117008365 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.358309375 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.358098821 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.335856666 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.409129214 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.301996065 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.301470255 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.35806623 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.357163285 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.302497138 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.508362061 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.357921431 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.508815482 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.408672715 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.335808317 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.335706198 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.40361656 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.40904927 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.358879156 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.301451733 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.335407859 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.401888195 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.408233261 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.775948648 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.771381553 seconds)
  done (took 34.727566099 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.243047912 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.479578394 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.188948108 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.450621247 seconds)
  done (took 6.380335059 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.068463723 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.408122352 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.390213137 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.449607107 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.390357356 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.202172314 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.390953671 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.214666535 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.212460991 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.213467826 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.658018884 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.185768716 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.197568248 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.449839093 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.201892799 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.033923087 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.034038941 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.172865182 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.408074008 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.279764102 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.296139812 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.390849443 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.390663329 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.390437964 seconds)
  done (took 32.049336003 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.793577225 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.961730388 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.392949158 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.946918709 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.754337558 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.826068495 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.314444211 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.546283988 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.299875443 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.275531481 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.774417397 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.72590591 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.176499094 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.925024517 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.793593131 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.209953986 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.209709493 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.881647983 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.456333642 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.333272233 seconds)
  done (took 36.616734257 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.021287348 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.021386015 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.263785346 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.198799799 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.020950008 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.024254898 seconds)
  done (took 27.569050818 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.460970747 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.177147504 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.333725614 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.297789877 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.196245175 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.1640804 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.589806878 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.263655139 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.791145986 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.738254668 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.511728326 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.467234126 seconds)
  done (took 21.014598716 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.021448927 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.06600566 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.029396561 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.261088278 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.098135422 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.699208108 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.038563629 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.02194251 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.576890641 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.287766067 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.170973112 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.261155626 seconds)
  done (took 42.568873961 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.222872183 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.223374941 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.335623142 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.067018698 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.431650805 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.076126398 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.399328536 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.459896055 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.574182834 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.804484459 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.624616467 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.039115344 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.556450615 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.998963533 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.022343567 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.333012 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.844194799 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.521223217 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.339829982 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.067315686 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.988325862 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.166727861 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.029885867 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.463023161 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.312043128 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.028953667 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.204320954 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.27113429 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.022164724 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.211093804 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.022681695 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.545851896 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.205173557 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.334226595 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.427764757 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.079648845 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.129130437 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.022207627 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.62454526 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.320458789 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.168447421 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.187957644 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.272764801 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.028634599 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.281447209 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.807781005 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.028113094 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.662615807 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00543718 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.201797455 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.905026971 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.652816252 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.352872087 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.745971745 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.168432619 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.331418819 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179749536 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.059970253 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.273460461 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.116597272 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.195954883 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.122789725 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.221750581 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997493261 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.295568051 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.348985823 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.132543509 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.265328921 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.295776058 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.323789922 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.365539034 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.195657137 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.835919725 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.150951581 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.588937986 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.939629465 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.37875504 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.025153455 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.741912387 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.559274452 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.004178898 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.147178691 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.586881044 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990338925 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.021515921 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19945468 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.263631517 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.994883224 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.03576949 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.128682107 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.374580883 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.151231675 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.167286753 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.267900357 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.732113467 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.037207977 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.023710533 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.302948009 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.995891079 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.585702382 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.065105342 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.004348678 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.083575024 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.57054911 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.402022952 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.816037448 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.803900502 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.668828872 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.325985166 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.631550429 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190216672 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.856067168 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.3686194 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.355425373 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.02172537 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.716684784 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.106666573 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.101681704 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360562364 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.022046915 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.997196517 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.433780228 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.204250452 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.022668691 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.320701451 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.024236686 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.17446887 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.021839755 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.589366711 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.453586364 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.268857131 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.490606641 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.113243327 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.177272522 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.993663867 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.16999839 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.464385445 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.097988418 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.356406209 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.336984391 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.216903206 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.919175851 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.020133608 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.863795994 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.387335945 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.252290376 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.364406794 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.688702969 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.193779232 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.035215386 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.022167499 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.165856806 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.036152081 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.561903212 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.021877044 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.617441692 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.021063422 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.323497131 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.022177406 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.189035943 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.023413282 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.223175425 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.420518911 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.234083804 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202343304 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.288455468 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.22130052 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.023240848 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.994165245 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.294804742 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.228713716 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.48330705 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.265830876 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.417603221 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.531357045 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.520006994 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.205351178 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.359011586 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.806014504 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.459211459 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.268476649 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.74422708 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.010930796 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.051683986 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.159784031 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.425307457 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.253473992 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.776289082 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.700698543 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.618389482 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.035037362 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.032866873 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.997755755 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171899894 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.394322129 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.028039505 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.527904301 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.105112888 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.291404545 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.538410226 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.056886755 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325129253 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.60809759 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.57898441 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.380983652 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.357277468 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004092283 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.611440177 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.533116403 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.167233333 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.07637119 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.385561257 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.732674677 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.252325655 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.02395554 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.372576427 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.95964453 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.77842414 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.551786853 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.610218876 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.970965624 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.177535018 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.585009634 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.029347522 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.706141873 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347211038 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.13081456 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.64038041 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.457868022 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.251251823 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.354811375 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.02200121 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.02620277 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.300299939 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.33274543 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.299536518 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.468390725 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.255169051 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.702608722 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.131114482 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.676257429 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.19340666 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.060350532 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.503097896 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.170972515 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.878497773 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.198377204 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.782104675 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.236401824 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.881473255 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.289937178 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.023111186 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.38816097 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.603821055 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.02439861 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.926570767 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.148989896 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.023359869 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.240038457 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.92250611 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.065305434 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.580200399 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.692215869 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.254510319 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.198427398 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.404996094 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.430900597 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.772766147 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.995245879 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18744613 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.123602745 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.32064098 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.023463631 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.309183635 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.748332647 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.419788728 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.024487715 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.505256967 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.297143267 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.186895004 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.383939572 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.235709747 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.326394258 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.919939304 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.655364232 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.043724822 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.164740489 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.997195866 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.563109628 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.51393702 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.401782656 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.393662593 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051098086 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429555915 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.367230839 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.13542057 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.166172883 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.292334984 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.02992296 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.346288722 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.064546823 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.926349304 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.464225605 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.028669489 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.775448342 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.262197567 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.360775007 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.184959139 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.48946195 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.22124672 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170682334 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.710075073 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.206136495 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.16397989 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.373340342 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.613877576 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.221926911 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.055884985 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.224979135 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.667286044 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.392461723 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.602468438 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507851375 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386497502 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.803262587 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.027190462 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.20652309 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.190674388 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.024697376 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.249412972 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.399911147 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051144032 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.227784609 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.332112143 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.279099674 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.577132049 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006154535 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.719385984 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.230112449 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.553720564 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.573272653 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.81241765 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.248067197 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.221544874 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.336997194 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.189017326 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.188823372 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.406405376 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.602160893 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.067676172 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.884661192 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.814501571 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.230316267 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.425936574 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.175335948 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.778055848 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18798829 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.26377953 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.20438131 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.163498688 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.993392191 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.740923856 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.816690485 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.302325211 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.191522209 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.199060363 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.214642633 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.159230235 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.524376015 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.338371899 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.802681265 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.389593423 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.218528367 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.999111757 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.026311265 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.728175038 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.383932965 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.038841259 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.324916632 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.357020525 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.054868705 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.070567085 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.906476922 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.381953459 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.748806467 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.752807593 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.2651728 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.421189184 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.595466395 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.060159501 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.805878908 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.208660006 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.381329494 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.404014431 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.826291677 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.458948963 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.322892838 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.182772438 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.999091951 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.201767112 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.033644352 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.08953282 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.739119979 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.325351165 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.119021648 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.848733343 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.654188327 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.024976386 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.078684985 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.741098381 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.303112494 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.226405523 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.023822162 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.619866446 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.395420745 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.183539179 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009326327 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.791005696 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.997470512 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.208823889 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.023880127 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.252527614 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.870181327 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.144153413 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.663497519 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.462682455 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.938184924 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.265383138 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.99924704 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.565480197 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.205399532 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.416522515 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.014210427 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.274653685 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.529804358 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.198356212 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.02910394 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.356184691 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.152588905 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.331058173 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.300994406 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.393380504 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.419467612 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.293878655 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.291112769 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.555114134 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133758556 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.269244881 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.997528054 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.910711086 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.104622955 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.403430202 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.388924328 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.024767084 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.566044157 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.275346664 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.194639856 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.153863718 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.989359393 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.630098168 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.238168041 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.204351844 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.149031887 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.064426918 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.344868259 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.024966293 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.281116535 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.023844364 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.070426675 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.207827856 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.276539145 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.406592057 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.335192558 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.627192615 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.185180176 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.549151557 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.724795222 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.560212908 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.02736706 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.566367231 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.539597839 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.026619463 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.39632245 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.622738501 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.200542343 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.302474187 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.290862847 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.04211241 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.22932348 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.53490093 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.039128977 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.577962959 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.407219228 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.025042289 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.395018963 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.076501216 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.198333033 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.794976821 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.529084158 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.028091654 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.577019933 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.301834815 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.57949036 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.726436342 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.037318381 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.078162878 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.620770614 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.003986162 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.027588804 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.14775241 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.561255112 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.035588378 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.453144953 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.161620525 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.143979505 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.032912616 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.169209928 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.030954343 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.2081248 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.628816871 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.273040671 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.302171285 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.2002882 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.033404987 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.652538649 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.713901407 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.130116126 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.227187069 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.023262864 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.378618373 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.85109432 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.028523438 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.625720462 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.226838181 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.995315407 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.416579738 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.286997032 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.061424538 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.222695977 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.025607563 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.333613887 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.188202575 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.523057809 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.265714668 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.524301819 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.165446779 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.048345966 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.567393908 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.383015746 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.863627164 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.024891815 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.338887367 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.023930868 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.578671569 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.713518078 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.189595393 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.196008526 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.703089248 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.763174053 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.011155628 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.058222052 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.026992897 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.243817108 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.52181219 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.996798482 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.573476092 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.071687157 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.203068883 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.357540581 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.998022393 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.201771551 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045002611 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.008066469 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.530408319 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.060650645 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.330376235 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.034229523 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.598650912 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.039732146 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.170428013 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.140167695 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.365141113 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.025408712 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.011976769 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.192319423 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.023693407 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.028281278 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.376868521 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.180070251 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.279951447 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.385361318 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.260072265 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.321081824 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.900734062 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.57865351 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.198830645 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.337687708 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.861187678 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.586241269 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.170022392 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.504629626 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.568944314 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.203686382 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.568214503 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.27708371 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.753970518 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.17212072 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.51337192 seconds)
  done (took 1887.477529081 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.069938779 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.146098798 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.090999434 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.159599572 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.053851 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.094950739 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.127290007 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.14370075 seconds)
  done (took 49.90991601 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.024476901 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.062331647 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.564391987 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.156873256 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.050828471 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.277389568 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.138903936 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.61688633 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.174001162 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.108286354 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.037481489 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.059382365 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.203813846 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.063397743 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.800199455 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.271966339 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.029623375 seconds)
  done (took 91.675870588 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.096402445 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.137106489 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.053704101 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.858288762 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.050368516 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.482222943 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.046079867 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.029197168 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.418710449 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.708703299 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.054448245 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.186274697 seconds)
  done (took 80.179440385 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.065099617 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.064198398 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.063733794 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.064215903 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.067393224 seconds)
  done (took 6.347889403 seconds)
done (took 2342.783598649 seconds)
(17/19) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.253485109 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.580000636 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.611911329 seconds)
  done (took 4.21236573 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.093201866 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.170433118 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.228598043 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.175910034 seconds)
  done (took 5.718000226 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.298398962 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.511301445 seconds)
  done (took 3.831784558 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.481889724 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.051136803 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.574077917 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.027099997 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.036392984 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.054057646 seconds)
  done (took 19.154103515 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.058737912 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.060496708 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.055480074 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.054723408 seconds)
  done (took 5.2591345 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.025164273 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.044444648 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.034186825 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.008494815 seconds)
  done (took 18.133296575 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.3079216 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.277206496 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.786496257 seconds)
  done (took 5.40515497 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.848480632 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.162203045 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.829104243 seconds)
  done (took 5.861296185 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.983845269 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.961287135 seconds)
  done (took 4.966305299 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.20117364 seconds)
  done (took 2.22226502 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.516071867 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.51619141 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.677595813 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.748632962 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.92603105 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.322113092 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.393966386 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.306836575 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.527108994 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.53475415 seconds)
  done (took 16.492053076 seconds)
done (took 102.640531081 seconds)
(18/19) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.047523811 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.491139575 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.190444434 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.779614802 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.134571238 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.190898362 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.073621567 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.592561878 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.69671969 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.698791029 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.80918838 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.13732614 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.108411216 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.472054738 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.107105615 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.431698317 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.443869765 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.049912617 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.031284944 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.463212095 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.093290528 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.386505436 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.540572028 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.406125409 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.46324456 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.182294091 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.984552019 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.451263507 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.242165183 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.992836241 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.198822544 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.698284275 seconds)
  done (took 149.611666934 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.024470311 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.044239189 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.04611142 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.034363545 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.004642044 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.047115227 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.035383248 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.034437605 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.067279337 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.078015452 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.04576793 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.010338706 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.045652127 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.033609688 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.047131199 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.034846895 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.1868539 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.045518843 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.044895334 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.044721029 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.045732884 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.731020968 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.045717888 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.729435195 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.201495747 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.04809015 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.035165058 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.045495355 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.045137743 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.045284492 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.04647345 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.034863917 seconds)
  done (took 186.052168725 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.024359895 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.046400134 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.044060661 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.03494474 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.045959856 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.048039437 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.038771477 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.03485038 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.045364052 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.045111141 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.046004587 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.045728984 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.045928997 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.035261822 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.047660621 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.035019314 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.045682481 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.045059739 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.044090728 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.043876017 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.043078101 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.035211824 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.04532479 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.045238317 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.045386281 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.045525348 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.035386458 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.042538862 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.043963251 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.044232261 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.043989186 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.034975071 seconds)
  done (took 194.390014851 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.334212607 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.067686154 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.992849859 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.599747246 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.949199593 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.057810289 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.597556678 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.335197377 seconds)
  done (took 12.976291408 seconds)
done (took 544.074802417 seconds)
(19/19) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.725303432 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.959570342 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.216277832 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.273269842 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.672862278 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.35250693 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.274204782 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.512604309 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.775022352 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.49051503 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.494603516 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.265512912 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.835268397 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.264098492 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.212074867 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.553595731 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.458785315 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.750532053 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.228227647 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.901238121 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.25434511 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.883045976 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.546905154 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.827800076 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.50307094 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.943594179 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.199945377 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.45983063 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.250471088 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.219082087 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.109587221 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.468479455 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.267379378 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.263310379 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.593199742 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.567413335 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.417769713 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.462890531 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.236269778 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.707021523 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.919250588 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.648006888 seconds)
  done (took 71.987733764 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.055305212 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.072861777 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.228708478 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.134571882 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.719582755 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.133213066 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.296974652 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.278342069 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.145280924 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.269649499 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.312810095 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.740421304 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.305759557 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.721603263 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.292943053 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.321796534 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.139727008 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.698522929 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.29435425 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.281019057 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.100034089 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.226546552 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.098346967 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.252749783 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.091003064 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.105950505 seconds)
  done (took 34.368385034 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.105789827 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.244807396 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.299922372 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.312179389 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.287099107 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.051280042 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.422239314 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.220941823 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.895993079 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.41088167 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.162558111 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.217354696 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.242067925 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.332427913 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.19419192 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.294463163 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.267950313 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.226663911 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.252429292 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.229282622 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.192438665 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.142264431 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.407781313 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.1950752 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.724149102 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.479656041 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.410015362 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.619598104 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.129846865 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.288235615 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.190000565 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.410796109 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.435637337 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.306503005 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.208477996 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.078699073 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.088200068 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.165013704 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.967505348 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.226076519 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.425592096 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.329302901 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.47964075 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.608665429 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.428259554 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.1948484 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.502271349 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.176464248 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.189644737 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.89233252 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.35549397 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.870392519 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.164306886 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.254870614 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.183631504 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.40606792 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.253250502 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.341635412 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.165112083 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.797497909 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.149725041 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.453662229 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.262949516 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.431809355 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.273743125 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.26563165 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.192387828 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.492790887 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.478046345 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.143524054 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.704581773 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.154732386 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.097780445 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.161686398 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.249158876 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.532518613 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.122273889 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.291095649 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.450527229 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.428050237 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.2859404 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.634607885 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.050820882 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.427302785 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.246213845 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.074534692 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.146784865 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.370185102 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.421471338 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.547020406 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.617982785 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.359955906 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.650378121 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.262177046 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.590936971 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.503025683 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.070980773 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.081008096 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.291908348 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.623467669 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.154990964 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.294261188 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.675921236 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.41577916 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.479430062 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.210884688 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.423667259 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.451871214 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.359424254 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.056354588 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.200031689 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.135954999 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.344793338 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.353487979 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.059179667 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.59012847 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.186831456 seconds)
  done (took 228.367975717 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.026360916 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.049134633 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.027797568 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.048695225 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.025587692 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.566986776 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.080504287 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.026303841 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.565500684 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.08008131 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.027262416 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.027911227 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.027135115 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.027594081 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.138857384 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.179657104 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.916096757 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.026440224 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.026421892 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.036865471 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.733985842 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.028224369 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.027270461 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.036323802 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.029528419 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.026322283 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.033384626 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.064217127 seconds)
  done (took 148.93876861 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.085798798 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.479474741 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.117612018 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.178825336 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.127471919 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.101623902 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.594701133 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.240586795 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.165663616 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.101405234 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.095307639 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.312851901 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.41148649 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.682145104 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.231464195 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.316586987 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.738460641 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.236305387 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.099110736 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.097964361 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.247175714 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.461459524 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.357251894 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.350808443 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.23571871 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.353357416 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.178296614 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.091369077 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.203291122 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.575594839 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.110136905 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.457343982 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.244703181 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.103225082 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.593659069 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.445356947 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.668899115 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.73502415 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.28870286 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.054278682 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.057469339 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.339434104 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.386671461 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.142915911 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.089743147 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.751662243 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.11245661 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.365234588 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.110372655 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.053364525 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.19471829 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.210260904 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.341094185 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.967196213 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.287456238 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.26747687 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.684741051 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.074920479 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.131068578 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.392902178 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.069071339 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.58080556 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.578646709 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.150043578 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.103931195 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.244535065 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.180323919 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.617491011 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.711613424 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.140545119 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.431652255 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.296981627 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.069739867 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.364913338 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.267346762 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.518273489 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.672935943 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.225568654 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.193803056 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.174589255 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.369023197 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.081031386 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.654446883 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.19833375 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.071101461 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.581925091 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.483432381 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.068023584 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.08910373 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.205182896 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.264090291 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.314048436 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.355433309 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.167220577 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.006004581 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.346380035 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.405643074 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.109083264 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.223218866 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.08295337 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.515665929 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.280513768 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.075849917 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.421416693 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.486562189 seconds)
  done (took 148.609550213 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.835956784 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.143314882 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.272389654 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.655984904 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.431855434 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.512509206 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.312138693 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.164090424 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.345919089 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.298988943 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.317663871 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.174009846 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.05043313 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.842931468 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.150601026 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.261768325 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.15675991 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.697513042 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.373630745 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.020576987 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.524070624 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.821504828 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.396530012 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.479617655 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.492016465 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.635701446 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.753245889 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.20116121 seconds)
  done (took 46.35806469 seconds)
done (took 679.655042197 seconds)
SAVING RESULT...
DONE!
