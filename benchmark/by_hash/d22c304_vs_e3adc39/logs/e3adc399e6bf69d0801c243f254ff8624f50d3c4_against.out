cset: moving following pidspec: 4148445
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.756977793 seconds)
loading group "shootout"... done (took 0.792985616 seconds)
loading group "string"... done (took 0.224554675 seconds)
loading group "linalg"... done (took 3.14944918 seconds)
loading group "parallel"... done (took 0.02094613 seconds)
loading group "find"... done (took 1.169131172 seconds)
loading group "tuple"... done (took 0.703466598 seconds)
loading group "union"... done (took 3.04293062 seconds)
loading group "dates"... done (took 0.154989593 seconds)
loading group "micro"... done (took 0.056645117 seconds)
loading group "simd"... done (took 0.364779915 seconds)
loading group "io"... done (took 1.412080915 seconds)
loading group "random"... done (took 2.355951353 seconds)
loading group "problem"... done (took 1.18468781 seconds)
loading group "array"... done (took 4.542005733 seconds)
loading group "misc"... done (took 0.95717737 seconds)
loading group "scalar"... done (took 3.421491991 seconds)
loading group "sort"... done (took 0.303196016 seconds)
loading group "sparse"... done (took 3.526323425 seconds)
loading group "collection"... done (took 5.922340481 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.539828963 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.071806943 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.251888753 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076515865 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.278219274 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.080261539 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087518984 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.069588717 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.007387426 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.15972889 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.209436269 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.389240508 seconds)
done (took 4.952901364 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.262353668 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.03286812 seconds)
    (2/2) benchmarking "String"...
    done (took 0.122595628 seconds)
  done (took 0.759705932 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.136067231 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.01517804 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022031863 seconds)
  done (took 0.769190952 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.02006838 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.09765567 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021044098 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021685946 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021563024 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021064732 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020925942 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020828084 seconds)
  done (took 0.822686616 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028238552 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022617157 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020674617 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022021519 seconds)
  done (took 0.69146506 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022080266 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.0815416 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.0196358 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019539787 seconds)
  done (took 0.735951783 seconds)
done (took 4.672738794 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.193616477 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.777811812 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.931226801 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.178950511 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.358757363 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.304264717 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.075510034 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.241388213 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.145636707 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.031419454 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.177501006 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039732944 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.520666039 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.445075784 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028415427 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.142396642 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.579439968 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.03969483 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070523451 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.209890027 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.039958762 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039058761 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043806375 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026459842 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.136897108 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.13732066 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.583584761 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066537303 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.025797756 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049642238 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028831096 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.032539608 seconds)
  done (took 9.337232771 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.149645318 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.142071217 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023313646 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.058983565 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049409719 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024523519 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.0297948 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022948293 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042409845 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087567999 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045048267 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.155496524 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020960678 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023958582 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.13583762 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.116335757 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037434045 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036753035 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.02198689 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036105037 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.04893084 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.0341673 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032721246 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032396777 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.069798453 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.089994618 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.041228504 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.063620474 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022092917 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034561783 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.054196891 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063313735 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022430313 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020943743 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064547196 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.039880752 seconds)
  done (took 2.663436621 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.988206573 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.049851543 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.136085795 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.126778055 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063203148 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.049959359 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.177427239 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076979789 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054787633 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023565773 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.204773841 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.63783147 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.166638056 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.052472926 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028317916 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.179252691 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.864974795 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.933691678 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023286805 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023503271 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.133160135 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025815018 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.176726824 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022625313 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.13643789 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.812534603 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025437651 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02393494 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052201237 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.139215909 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020588349 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.095702719 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049398372 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024746032 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.552257347 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021487934 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019402388 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.041415789 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.049871433 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021773745 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022928494 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.03342548 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020984324 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074722756 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035018665 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.522363507 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024830413 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.685982375 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.798589818 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.030308124 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027415063 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.057877059 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019577074 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023165423 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.565005474 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.110260205 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022551127 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.247885744 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025064235 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024006083 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024396352 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057402676 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023190448 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024374553 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026574342 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040938684 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.032076435 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032198013 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.043042293 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021421521 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022555256 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.02101471 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.385974383 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029453053 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025113488 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020567321 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026768994 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02266151 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022190186 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067263832 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.049329931 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046766193 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.02598356 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023085181 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022398262 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.521117073 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.04848063 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02486492 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024057913 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.481539915 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020117343 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022056152 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023747504 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.04367609 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022497743 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019311382 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057436315 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024055361 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.124974093 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.489401981 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.02341979 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019635028 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.51047293 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.02406203 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053507207 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075540461 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021979717 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.059634622 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022531715 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019755849 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026144829 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019632382 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023914352 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020870692 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021724596 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020664189 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022447636 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023532465 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022331966 seconds)
  done (took 19.598329215 seconds)
done (took 33.184334943 seconds)
(4/20) benchmarking "parallel"...
done (took 0.731486011 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.2096831 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048503847 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019120438 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.160974312 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043191042 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.132943241 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.174293364 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.126420683 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.044997145 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.044854528 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045246961 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.180245644 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.193621658 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.046162829 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.118917533 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.191869607 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.046535625 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019651421 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.045706081 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046262941 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.04635996 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019611127 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.045497908 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046349497 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.11757718 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.046483839 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019568295 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.121088264 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047723554 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.122209119 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.04738412 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046360597 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047070153 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.121115074 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.049132176 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.120824625 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019861439 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.04885956 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.048832165 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.049873189 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049271 seconds)
  done (took 3.924296416 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045166882 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037045519 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039634319 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017663957 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027121201 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037078755 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017567036 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036623789 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040745156 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037148198 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037100399 seconds)
  done (took 1.115349299 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039933631 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038264265 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039532687 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017558173 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028802389 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037997363 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01751053 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037408313 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040266304 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037994503 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03796936 seconds)
  done (took 1.057389071 seconds)
done (took 6.758849439 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.151439537 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.119369093 seconds)
  done (took 0.944057949 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.554749588 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.21778758 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.128646828 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.254101477 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.121955582 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.154009993 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.210316623 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.158593187 seconds)
  done (took 6.529157279 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073482491 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.139415817 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023573534 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022183181 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022491662 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022534982 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024189277 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022837228 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022075649 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024593548 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.02424875 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022358308 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023011677 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024353941 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022373091 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022578834 seconds)
  done (took 1.359114596 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028333422 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025145223 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026318357 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016763004 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027307674 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026155704 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027108649 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027434003 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026598096 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026267758 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.02412909 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026857628 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025917108 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024642437 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027032068 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.01670068 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026953154 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026462792 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028384493 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027420061 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026469529 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024106363 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028042184 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.02533345 seconds)
  done (took 1.313732231 seconds)
done (took 10.829639904 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.139359834 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029090792 seconds)
  done (took 0.853998921 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.125478508 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.123733741 seconds)
  done (took 0.944121002 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028594315 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.01562457 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031907119 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023794793 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015849488 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015581636 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030930385 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015819983 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015650952 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015851342 seconds)
  done (took 0.908179634 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019018967 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022739166 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020706252 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018902806 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020500611 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016708961 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018954967 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016929448 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022399335 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015922888 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019751787 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037244209 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019167345 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037631808 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019019508 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019696774 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021198273 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018942582 seconds)
  done (took 1.082663327 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017368926 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016498025 seconds)
  done (took 0.732756003 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020366154 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016603178 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018269159 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018137813 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016146797 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015644381 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016147749 seconds)
  done (took 0.813914508 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.384629931 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.085702407 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.310264481 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023791083 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.037433933 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.223251891 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019196225 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023627695 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023480409 seconds)
  done (took 1.826826045 seconds)
done (took 7.860602187 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040173166 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141045043 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145134805 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.447831289 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.03340156 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022108348 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.051489122 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.226375836 seconds)
done (took 1.815608762 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.491606039 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.250134251 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.191949175 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023435032 seconds)
  done (took 2.167847728 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.309932609 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.138352792 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029672886 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022186911 seconds)
  done (took 1.215810589 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021663595 seconds)
    (2/2) benchmarking "read"...
    done (took 0.02666328 seconds)
  done (took 0.760084266 seconds)
done (took 5.348042094 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029892907 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016539689 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022814696 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018046754 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017666851 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017165753 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017077213 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017980771 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016114259 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018123124 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018147891 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018068335 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017810696 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017824735 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017310189 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018105711 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016175217 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017788949 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017810152 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017803486 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016095463 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01813228 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.01736448 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017868686 seconds)
  done (took 1.136418919 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035639504 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020459417 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021124559 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020967035 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021419038 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020978243 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020955889 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020068926 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021019757 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.01994453 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021545045 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021639994 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019978568 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021747962 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020047825 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021642898 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021265084 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020391069 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019985005 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021620475 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021154645 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020341959 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021579091 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021165298 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.02157019 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021453074 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019982341 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020323311 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021132585 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021553727 seconds)
  done (took 1.3536331 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022492049 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014740445 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015012895 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024876442 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014658345 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014868164 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015272009 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014432137 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014839265 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015686427 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015176731 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.01454801 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015378347 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014544003 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014567625 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015145305 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019661208 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035223661 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014931099 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.01467195 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019234939 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.01494509 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014684112 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014711714 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015147475 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014727827 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014502881 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015085426 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014685878 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015319101 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014713842 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019157666 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020752633 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015193974 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024855403 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019739887 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015195012 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021251157 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015720902 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.01455822 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014560478 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014515277 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014681695 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014683045 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024948697 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014902444 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015797813 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015144478 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.01484206 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014562463 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014625797 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.01618605 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020317941 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015949216 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014631158 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015977277 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014629631 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015433233 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.01481937 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014685389 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014700954 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018739954 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016153306 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015495101 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.035843686 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016142773 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025187403 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014879679 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015278686 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.01885548 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015350601 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.033935106 seconds)
  done (took 1.944696229 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.027459356 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025362304 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033582019 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024421422 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018193212 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.0155696 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018486971 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015647044 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024696629 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019146885 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015713984 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018836443 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02476581 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019198234 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016727065 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024669788 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019160819 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018439342 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015652468 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019120903 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016771401 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018742263 seconds)
  done (took 1.167633116 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.099962351 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020860485 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062370446 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.02397805 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022940599 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024203559 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02086199 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020873565 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021042678 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021512107 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021503608 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02100005 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022918194 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021479975 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021473215 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021329362 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021050255 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021260108 seconds)
  done (took 1.224014704 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.03320679 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020782514 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047509454 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020437523 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020524906 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020155184 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02379454 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024030994 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020284275 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020757076 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024342594 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020425739 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020364953 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020727498 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020376644 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020716591 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020372599 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02070876 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.02430972 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024159475 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024185848 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024309743 seconds)
  done (took 1.230885486 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034730891 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019825992 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.035868263 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.02125426 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015114499 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015120017 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021358043 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019971763 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021196339 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.0194795 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01999203 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015231284 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022146075 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020183325 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022274194 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020107963 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019789789 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020166114 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019764083 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015247076 seconds)
  done (took 1.13283982 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.128965454 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017221178 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017040877 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02136711 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016921981 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016855687 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021507907 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017053017 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017063297 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.040677318 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017102586 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017056583 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021592264 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019886506 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017078607 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021666404 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02162411 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021651693 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017163227 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01710321 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.040610597 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017244458 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02192586 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017367035 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017255274 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017294023 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017295206 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020232744 seconds)
  done (took 1.389933869 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037247566 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017612217 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.01537173 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019268191 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019151292 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.031287449 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019173822 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019040907 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017468579 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015444848 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017611397 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017528875 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017489767 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.027605471 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017377098 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017508774 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.027659295 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019294123 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.031465362 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.031327763 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017617301 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027523693 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017581456 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015371514 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.03156584 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017522209 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019621085 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02046864 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017848995 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015564395 seconds)
  done (took 1.355434903 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029184511 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025962603 seconds)
  done (took 0.772472954 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018279357 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032906307 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014629966 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027684807 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023243452 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018761902 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023370276 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023147647 seconds)
  done (took 0.892569494 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.123904993 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.147055196 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016566459 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016737697 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.121027015 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.082945171 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.131967897 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028258573 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030260806 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019490497 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016569016 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.132741713 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016148419 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029846556 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017699264 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026112912 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02375513 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034450335 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029411534 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015284854 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029141066 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017013866 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016150092 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017517073 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017408843 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023273198 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032323551 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028878185 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02474166 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014629805 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035202091 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015540417 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016175508 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024841119 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.12407386 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015712603 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053166546 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015701024 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020033953 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015332858 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027644093 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036488881 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029800628 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033535559 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016998615 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017397297 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015383195 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017123947 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019684197 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024782865 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015624938 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022954172 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015227244 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016906653 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026108761 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015630732 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020417989 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024850853 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029294392 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026109726 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027918567 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031135729 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024395718 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024300334 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016259522 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035630905 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017205665 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.0289335 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031230894 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016788823 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028797848 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015496816 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014770686 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015611409 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.04981391 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017027817 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016473917 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015693929 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015825226 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016975379 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02522921 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020550494 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023075002 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018728549 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031812894 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024887835 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015455322 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023012569 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034034605 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019768387 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015684753 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032876788 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019684787 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015491732 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033717232 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026125649 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017188738 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016380767 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019616608 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029224283 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016978103 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014711039 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024229577 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017148617 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.125043852 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020947594 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02433814 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015900573 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026565959 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022709749 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017591712 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.01512774 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020897165 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016936658 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015134655 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025720459 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016133708 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031441341 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023095731 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030809817 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.03142158 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026829528 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032463737 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015846195 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.01508321 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035078701 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025594185 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017277258 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034647777 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015931734 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026746792 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016067834 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017607544 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025508699 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015371338 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017774199 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016253519 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022763388 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017616797 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017709976 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022213689 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024684641 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028595705 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017092868 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025003145 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016382557 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032542234 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026072207 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021223807 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019799169 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017067819 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028699367 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023288659 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025568724 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016117945 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017091482 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016260862 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027468585 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025994655 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018022279 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026347057 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021260617 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017073158 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.01632524 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017299163 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020224778 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019891378 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016844993 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024084755 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025177982 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.03095179 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024278086 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025494888 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015682002 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016130806 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018179595 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016141562 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021212736 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025686773 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03229311 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028400739 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038147394 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016492576 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026187227 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018020094 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033842234 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02979508 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017327965 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021546232 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015444483 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018240152 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025968914 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028177238 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031038034 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031700134 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021449748 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021302053 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.01622828 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031914241 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016716485 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024962033 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025855085 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023083248 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016209597 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018309368 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025740189 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021374562 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017453267 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032608465 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024706654 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016283664 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031030006 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016661054 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027493647 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016268686 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020258469 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021921898 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018506909 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026219736 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032217645 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015471207 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016782709 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032630628 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018363291 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018224098 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024529983 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031999773 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021373327 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024441051 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027310997 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027059287 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.167868611 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.0259877 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016286912 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.024736103 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018094826 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027037153 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015359759 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033466215 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014532595 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030650719 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.015960633 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026310215 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015617358 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024687599 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.015905993 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032186956 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.016543329 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.01592953 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.026738885 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014516696 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024401907 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015056573 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020771177 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022227856 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024432171 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.016655369 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024508118 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.01652611 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024265764 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020374522 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.023824607 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024341491 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020241824 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.014963278 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023524614 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025856565 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023287308 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.016489959 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016478368 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015497591 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024474661 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016502036 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016021211 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023252714 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020288538 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021372732 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.01639503 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016600447 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.01644188 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023548153 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024526733 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033031799 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02371182 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022553224 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024195545 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014960472 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030558407 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015027597 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022584484 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014372155 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021248743 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024202266 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015253865 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033900493 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016445307 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022881332 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026918799 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023664168 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019314377 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032768076 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017972014 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023405704 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022993918 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020138944 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022202741 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016488788 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023505104 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024500542 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025481915 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015692336 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022592625 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024084217 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016582131 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022894695 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016347112 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023617359 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016786655 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.01466079 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020326418 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026532058 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020687478 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020856169 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015664101 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.01457935 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015617954 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022583826 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020558521 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024094423 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031137021 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014648976 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016146259 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015307228 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019634138 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033807608 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025121094 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023467701 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020625893 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014901978 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016878491 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017015404 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015611821 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.0185485 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014964375 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015462075 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026253943 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017139286 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020458795 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015809676 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01664931 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025567569 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019866713 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015880308 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022737377 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015366283 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021214391 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014951945 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017073423 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020600558 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015299006 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019716344 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025973299 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032229334 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022660568 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024551067 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016503948 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023665115 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031284934 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024057354 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016535624 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024946031 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015230264 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03461219 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024948213 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024248115 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025429265 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016497214 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032739219 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020570614 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025871646 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031834495 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017033176 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.024945182 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015954537 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032228589 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.02099358 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015889104 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024786853 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023891165 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022390644 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028101886 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016930732 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024797826 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021530268 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.02000653 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017783026 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017802448 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025025369 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032574859 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016948109 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022081424 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02423584 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024532217 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021094559 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028531085 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024347104 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017140587 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017814717 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020315824 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016807213 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028452892 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016363009 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02102051 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021003928 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015941983 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023245393 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032833986 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025657717 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025885934 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016117522 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015515729 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034953266 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.02025929 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019925334 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024459482 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026232246 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028795454 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025726496 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033708574 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016810332 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022579439 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028720722 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017135209 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016002688 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020273093 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017961826 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025489411 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026234256 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023738853 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01821762 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023479096 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029897477 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017674262 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021265787 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022964639 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017122488 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026911045 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02427363 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024881379 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017816689 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016085399 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019920865 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025037462 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023704813 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025340689 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017202653 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025497112 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030839935 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023780302 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019892704 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016098402 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019764193 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025294422 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023232293 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016144464 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021404026 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.02015582 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025769645 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025789822 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021201858 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016125552 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033803922 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025040534 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025431351 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018034516 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018192173 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016636406 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016159361 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027892215 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016214212 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018061991 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021475872 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018229013 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.035055735 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024624351 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032654288 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017384663 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021201277 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016211911 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026240893 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.02134149 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016342158 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.02695328 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015730434 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032308401 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028707263 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024512313 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016328438 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021883108 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025235483 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031988166 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026258836 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025440947 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020154837 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.175168156 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017044141 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026295286 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015272734 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014536048 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025301371 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023993846 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027474013 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015138931 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.02532878 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.01668763 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023692166 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023693336 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.016537856 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.016569734 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016522488 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024677291 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020297562 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024439193 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020440623 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032097153 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.015848054 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.025999676 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024133958 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.025831896 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029078983 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026966449 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023542916 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015479159 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022600684 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023454712 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.015938004 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020626881 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.017856859 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036704983 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.016478113 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016463686 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028823249 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.02184151 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015094122 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021551591 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02021215 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.024946966 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015815171 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025311199 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.019567015 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015717242 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020151086 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.02024117 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014312935 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014891431 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015257915 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024616377 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019938346 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.01511799 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033778902 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016206063 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023720831 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025728062 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022109922 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.01630601 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014353805 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.01575277 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028607319 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030398394 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019181632 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023605877 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016468259 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024137462 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014404499 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023699689 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022968463 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02365567 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014996701 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015264314 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029887957 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030446446 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.02014736 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031448082 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024035677 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016369408 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036606361 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024013003 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015894206 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025673852 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016958608 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014739604 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014481086 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016592016 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026685394 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015295857 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017368796 seconds)
  done (took 14.985056278 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.059050785 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01630336 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014963024 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014888406 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021837193 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016052534 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014885397 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016119836 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016038114 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017136313 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015045011 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015007672 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020424132 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029967649 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022788744 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018672522 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015072129 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01624001 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015047933 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016300959 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021025496 seconds)
  done (took 1.182331354 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.019465176 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019369858 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018751368 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018945608 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018211467 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015203632 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018600655 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015189284 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018826703 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015579851 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019100796 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015309643 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015686911 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015661989 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015656472 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016744416 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019188555 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018395415 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015282162 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018781628 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016679887 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018739489 seconds)
  done (took 1.136094977 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017842857 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015767617 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.02382427 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014662517 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014615267 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017342057 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014603254 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019421984 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019395686 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019440557 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023631452 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015315372 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014482105 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020749288 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014400241 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015215156 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.058833 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015500398 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015558877 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014797307 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017039904 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023990552 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014872761 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014983246 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019491334 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017506089 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014789784 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017058394 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.01533325 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019538019 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015538114 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014567992 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023640503 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022905702 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019496806 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019477066 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.015962718 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015452689 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014777725 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014777431 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023101175 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015974479 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015105787 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015918522 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.02378269 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.014969077 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014726995 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023911258 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014779451 seconds)
  done (took 1.652192584 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028071333 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067346842 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020990339 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050475716 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026604324 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020227367 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020793508 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053285425 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016122898 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.01650393 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027617872 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027684402 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01756333 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018767046 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.020853668 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017458389 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.01803731 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016831232 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019699226 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017119129 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019873559 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022209574 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027197264 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027648039 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018676243 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017071755 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01736366 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018946363 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02739482 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.02057861 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019160546 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019590409 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027750837 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022722663 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017374211 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017481803 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028305334 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018004106 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017708214 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016257584 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017430962 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018939959 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022299783 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028425367 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017893026 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022770648 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017979384 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016005444 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028046705 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017723071 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021289537 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028862599 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018890612 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018158862 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019262014 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028069929 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017965027 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016802911 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018164739 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027764906 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016301101 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018791031 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028550363 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017496867 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020949193 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.0286375 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022871084 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018825918 seconds)
  done (took 2.413081509 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024704846 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.04987184 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028743583 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028570793 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024275407 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024301035 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024571918 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024485048 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024435316 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027185516 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024615435 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.162963124 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021765073 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026281927 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024685548 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024684768 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024623187 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024744476 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024968933 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024893336 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024986434 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029480289 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.025007663 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029493683 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029298518 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021758341 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02468069 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024924396 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029687732 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024921813 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.029385079 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024962635 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025009983 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029746628 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029409647 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024857304 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.01572912 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024825795 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025040878 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024988056 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021760126 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029795589 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025087595 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02192667 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025290886 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025080735 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030158443 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029861029 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026988273 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028089077 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025264506 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030072543 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025098362 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025448689 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030432116 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.033321993 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030258392 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030383749 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025443092 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030367772 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030420968 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.033575762 seconds)
  done (took 2.568054091 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030129329 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020800926 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033493551 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01478592 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014780979 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023611546 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014716217 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.01474271 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020647062 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020640985 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022041653 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023936892 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025758865 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022118605 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023918112 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025674073 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023862716 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023849207 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020754897 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023971066 seconds)
  done (took 1.217946354 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018721836 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020323293 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015595592 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.030821665 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015557422 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022765253 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015566528 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015493435 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015547047 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015584873 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020038168 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020085778 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.01564956 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023465031 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019159663 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02303557 seconds)
  done (took 1.065431279 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.02003207 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023868321 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.124213616 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.01611837 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017908894 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015465784 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016275331 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015279571 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017517784 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028863776 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.01628175 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018367311 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.01638949 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015049951 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015636831 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018309131 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017507147 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016402771 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016313673 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.125205639 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024644342 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016857976 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018400581 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.01693729 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018241043 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024494852 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017831848 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018230603 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016404963 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018622817 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018221178 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027016744 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018230945 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016968905 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015171482 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016021982 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.01650564 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018593323 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.01856347 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016542336 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.01536989 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.01825058 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016574345 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016935599 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017731721 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018576132 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017732445 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026254254 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016395262 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018275684 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016519234 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017650768 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016963061 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027446733 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.01854329 seconds)
  done (took 1.981001689 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034171046 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020494854 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014803392 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014688877 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020028066 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020643955 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020139854 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020177474 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020619712 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01464421 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020677852 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019625995 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020719117 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020380754 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020846532 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020416088 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014754139 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020490565 seconds)
  done (took 1.126727791 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024026609 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020458976 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020619666 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016606049 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016583621 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020498863 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015066666 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016173503 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016205251 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016787055 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016745284 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.01635408 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016339078 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016359574 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020311229 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016727267 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016350797 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015348638 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016723675 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015156132 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020756063 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015298446 seconds)
  done (took 1.145609162 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.18656168 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.145137938 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038640335 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034443544 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026412541 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050828064 seconds)
  done (took 1.242624269 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050701204 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052263335 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020054982 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020092354 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024096301 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02245517 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022383885 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022533523 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025546546 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02834045 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02279267 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026029625 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025766968 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027493523 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024405117 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024418264 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022840622 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022789496 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020236525 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030127449 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022938459 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026305138 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023184676 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022880691 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023135919 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027901673 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026228878 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028881606 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0229519 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02640518 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024776656 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023194921 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026463816 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028899003 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02044699 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026238769 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023150196 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030726835 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024789682 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027894293 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020286986 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024798724 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026347862 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026011333 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02671742 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023503511 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026247993 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023390086 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023502021 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034790523 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025143291 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028147026 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025098057 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026904521 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026691285 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034955275 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029437326 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028343944 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025277105 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029431245 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028696207 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025428724 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028590761 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029820617 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025453224 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02866785 seconds)
  done (took 2.51061485 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059139802 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020563515 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02265436 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027943751 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026905689 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022507441 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022726258 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022736296 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022745918 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020548059 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058510432 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022995495 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027324839 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027324328 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02292874 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022747539 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022807959 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027276238 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020552953 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033674245 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023042051 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027796643 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027756459 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027730409 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028866194 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024944473 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023149685 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023133122 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023047189 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023075199 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025975799 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023263929 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02786891 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020668095 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027817881 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023235497 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023082673 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026026293 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023176041 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024928458 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027891041 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030831427 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02332556 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02331977 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029277695 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023412568 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02337713 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020871875 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023385009 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020862727 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029311131 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029178655 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029202973 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028256165 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023584974 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023571086 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023463912 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023478279 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023538032 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025150728 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.144082617 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024158937 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035500374 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023752143 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023757922 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028691082 seconds)
  done (took 2.616270428 seconds)
done (took 51.148742177 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.213064283 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176115594 seconds)
  done (took 1.140524263 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.135949096 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.133356274 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.161586758 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023512462 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081325701 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.173098297 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125352678 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025951815 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023832914 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025328574 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023454764 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.024981529 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025191388 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023305749 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085538674 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026014039 seconds)
  done (took 1.8897187 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.074590463 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.238275378 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058541405 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022520889 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.104830617 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028808272 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024163772 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028193853 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028633064 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022656966 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071238731 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035696567 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027334381 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028254178 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.02390261 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027272852 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028150271 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028624934 seconds)
  done (took 1.671440866 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.071577393 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033338272 seconds)
  done (took 0.875440101 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.12679838 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063727881 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.104967727 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.308375235 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.095087347 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.098060493 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.101865974 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.097052979 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.067027337 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.094989486 seconds)
  done (took 1.922099819 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060863488 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057244867 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.283994176 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054722589 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034113706 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029351267 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029032098 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030888135 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029597378 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028988508 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.073970785 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027476402 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024208568 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.071009358 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050013226 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059783542 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023370517 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029934349 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032140057 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.02318844 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027943872 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.030982634 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.132589068 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030476615 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.05219795 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027648941 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.02933706 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028507116 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028478446 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030454505 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030978246 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054299065 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030376877 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037036888 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028564185 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.049966522 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024228836 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.050979581 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027054097 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024297959 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027543293 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031077295 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024801007 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030568556 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029799867 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030037351 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031464355 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023520706 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029909228 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027326467 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024514308 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028723921 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028537961 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029633553 seconds)
  done (took 3.00755598 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.079457896 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.065905219 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023902334 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073432161 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064693705 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023948688 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079925393 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060001226 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078157471 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023538741 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023256504 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023110113 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030881416 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034995537 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076122737 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.068920226 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025211645 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023771539 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.06817978 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068642147 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022789427 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079733811 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070726299 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.067535701 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022507851 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024021836 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022702742 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023343892 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031547987 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031037081 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023101825 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033892055 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.034907381 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030487837 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02247118 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022810124 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022793923 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031468496 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03295267 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032712179 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029841875 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022440998 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022781843 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023308011 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02377384 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022342908 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032736812 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031196185 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032646306 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023325729 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023302419 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022672582 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023584216 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030379462 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029299341 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030823864 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033918722 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023187732 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02311908 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024634373 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034806878 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031670185 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031344878 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024083704 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032672759 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023087948 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033761632 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036574052 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022977791 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023593908 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023146125 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023159419 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023521498 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029849443 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.029922995 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02360475 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02343551 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022924159 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031400443 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030117428 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022970804 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032302325 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022657912 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023228439 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023610547 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024179202 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033266263 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.03150077 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023684401 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023615944 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023231955 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023183606 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022551347 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.03250845 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032397937 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032365301 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.034654713 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02414978 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035444034 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032863061 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02431546 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031787437 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023711966 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02415555 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024086197 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031689691 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031336869 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033123727 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023681842 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023379502 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032501149 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035611269 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023526405 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031301185 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03339936 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031736787 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023038795 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.03474125 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023608578 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034644778 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023935847 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034623821 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023977596 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032377815 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024013216 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023139709 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023803222 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.035918615 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024677516 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023834422 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024236231 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023834519 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032427536 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036728131 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024508433 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032826465 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032639042 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024354853 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034992322 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024000122 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034897965 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024034222 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02426353 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023093541 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037000981 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023774651 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024221163 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023800059 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034138992 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023845316 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034381177 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031828431 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023409013 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035847993 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034407687 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031851066 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.03470262 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024767845 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024047202 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023686054 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023956279 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035050508 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03667233 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024822318 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024041481 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031461164 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035398443 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023529785 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031848077 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031759853 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032096551 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024172253 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.166299847 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.032824327 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033420732 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029209594 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.031698013 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030053583 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022860224 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.028910899 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031647247 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022877 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035535235 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02276289 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.032385668 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031850876 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.02824672 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031596141 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032747396 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.030623725 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031147239 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.033095844 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022352808 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022670721 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.028998801 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022635031 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022818211 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028655766 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023205702 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02338061 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.0354016 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022865333 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031991675 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022261116 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029669642 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022225864 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023167796 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034067989 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.0226716 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023118798 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029166589 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022690076 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028855229 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031505442 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028799985 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022545315 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02302434 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032325054 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031931294 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023099772 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022610741 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022998467 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.031178702 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030680931 seconds)
  done (took 7.771600961 seconds)
done (took 19.054637509 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.152217976 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071406911 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.157260022 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090063539 seconds)
  done (took 1.23446122 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.056050165 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019176854 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.139113856 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.150330925 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019430697 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.133268859 seconds)
  done (took 1.302334164 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.211358887 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.136637332 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.139895281 seconds)
  done (took 1.274258861 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.137492538 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.282297059 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.552404598 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.131642437 seconds)
  done (took 1.897267528 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.171074653 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.163517416 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030712643 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.179400941 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.037765784 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.01574871 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.102749006 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022310639 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.05207349 seconds)
  done (took 1.620057973 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095771 seconds)
done (took 8.211544293 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.179594755 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.137431495 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032779035 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026663201 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.131428772 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.128981549 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.138658204 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029035602 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.129590682 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.296501236 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.160457279 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047428494 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.154522783 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042809816 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.261547748 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.03079371 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028498088 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024133969 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.14372483 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.126336771 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.237777398 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027799718 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.093212677 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029917532 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104138547 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077661295 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.167564882 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.287616653 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.271232068 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030266893 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.126371451 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042115355 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.11974266 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.131247738 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.132554351 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.04848137 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019837322 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.239952824 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111466939 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.303125628 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.151371399 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026372323 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.141556749 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024481341 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019224586 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.141292304 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032901497 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025692811 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043506644 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025857484 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041037542 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026261922 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.141111041 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023304855 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092247125 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.138434112 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.16321346 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.098213867 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025230937 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.038622367 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029124561 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.153009973 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038570437 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025222706 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031773287 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019705089 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.136560505 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039155849 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020191816 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030168082 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028081134 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.113562842 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.154662525 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064243954 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.03175977 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.118365405 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095496502 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047856046 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048718016 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029411933 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019450097 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.168182133 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025073966 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038155524 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.02595858 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052613071 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019628981 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035232404 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.156326863 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.150455145 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.086952422 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.02060335 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.234047797 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021984323 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.200466827 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.02065818 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019667665 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.162915942 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.0193475 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019485098 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.028945652 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.027760069 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021057 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.149380037 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102167176 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.026977473 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025739903 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.019682996 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024692636 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020302628 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019681163 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019519909 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.09334097 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.034571093 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.018770268 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106282039 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.124626117 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030094496 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037177646 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.083241715 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022243765 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027888531 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026082583 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.121930513 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027159749 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.131456229 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.020533156 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.041565005 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.118115742 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.092595826 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.104895164 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019218154 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.153138106 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.02911633 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.018742838 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026033415 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046689117 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028565174 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.034485277 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027127626 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.152915457 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029782584 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024526485 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.118180358 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018614179 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.109886084 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.093360984 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.126346598 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024226755 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029440324 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091859581 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042480712 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.047815952 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.04175078 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023415932 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019363124 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.01911369 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033905712 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018461694 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019345312 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033479053 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025367886 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019086695 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.237129924 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029146562 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023574228 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.257895235 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031390916 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.098661762 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.04122998 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019885775 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.104090717 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021517412 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039731655 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081033606 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020002101 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095175398 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020058876 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019718896 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027032041 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021215039 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028445664 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032796461 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020168058 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033615039 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027121451 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019774508 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.104292414 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021461471 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.167323457 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.103072656 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.115412856 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019962119 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037758201 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.01946166 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.13307708 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019757258 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067595969 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.114652369 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.036158323 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.039752418 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020820435 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.093377508 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034842975 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019395542 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.100314332 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.127762626 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098440593 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027000213 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.24240092 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028609579 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.02025823 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026924159 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027960892 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020338278 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095327112 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024186742 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019017159 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019372175 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021263663 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018672923 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045271724 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018907429 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027035569 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019448704 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.02202883 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021372342 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018934055 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027513561 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.096227686 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.128999025 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025434422 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039465858 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032398479 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030877034 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.066747207 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.026319521 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.140773459 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019141573 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029011919 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.04192913 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019346455 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024495951 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019819764 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038995937 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.022982572 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021451405 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028172855 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020109537 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020187832 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.01990336 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.0201212 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028128963 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021461241 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019395819 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.01938613 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.01994276 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024355803 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.024962472 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030418005 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039718253 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.475404762 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022211463 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022181897 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.0201453 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020129821 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020394088 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021606083 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019996587 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021977192 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020252329 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019617351 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.04906798 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025018064 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020880299 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042695244 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020100479 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02943086 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.128573259 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036794465 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024862372 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.0193533 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.268342717 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.110572566 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043272495 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041276214 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.185638737 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031321552 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020149394 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020163613 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019016488 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046633003 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.024181737 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020096262 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018867175 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019099689 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066268384 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027343011 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.018986206 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027309334 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019184719 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019423566 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046659537 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020334118 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019272545 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03837831 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031971234 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.096284978 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030646385 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.0221862 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068833108 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018500811 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019256171 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019659399 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.110389967 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031759572 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020350132 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019175948 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.02628424 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027749982 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.07049619 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.024879642 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.021997436 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.026899502 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018471171 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019540174 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043907449 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.046760355 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020200507 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.022639751 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019005282 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019492403 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092157164 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.026638583 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023588471 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.101289032 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021024084 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.026746805 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.018450812 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.467164532 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023645813 seconds)
  done (took 21.859252698 seconds)
done (took 22.66188462 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.162427962 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033703487 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.03252961 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028046596 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031704078 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031867128 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.0329844 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028712904 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031874655 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031193671 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.139526159 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019072387 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026784842 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034336914 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027938858 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035188171 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031700884 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.034586263 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019963718 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.03476214 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030001307 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032450422 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028150735 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034163683 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.01989206 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027897139 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154152574 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038093522 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.02298722 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029166066 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.0271518 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.038589894 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027101246 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026759758 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028960711 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024763899 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029620797 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025945025 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.15592959 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025080601 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020042284 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032406721 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026673722 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027364386 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028110463 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031449938 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024813937 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033231674 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019265333 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032384572 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.15483712 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024202745 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023091525 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028007029 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024830191 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028852794 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022839908 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031134724 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024643493 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.03166436 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.0275571 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027450529 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019361593 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028021646 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.02674883 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.026945206 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018418217 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024198365 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019439894 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019378442 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018768028 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028073801 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026316369 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024460166 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.01882631 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019355164 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018944172 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031851992 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026642385 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028315542 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019847723 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024855319 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024475299 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019939319 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024297083 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031244348 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018920944 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019931577 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018878007 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031065082 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025994599 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019423579 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031322433 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024112011 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023841325 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.01949991 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018871 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023900196 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027445748 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019476205 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.01850026 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024095942 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024549253 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.0281329 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019808023 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024004957 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023826834 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018588733 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028135406 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026678899 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028518449 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032367681 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028155669 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030764908 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019911124 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.01842952 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029154387 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019765452 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024213531 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027359464 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024672346 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027323216 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019891345 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018836233 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024037587 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025464141 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019815537 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019965268 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019816483 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028374356 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026752642 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.01859304 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019479916 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028389506 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028300284 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.018984554 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018905447 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028295066 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020077617 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025496544 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024818384 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028468909 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019436141 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019866799 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018819475 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019232591 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018922345 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024865761 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024376918 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020094985 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028271352 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026773695 seconds)
done (took 5.436371732 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034748249 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063000137 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.174536746 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.137844571 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032848708 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020704948 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.02449533 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.03987053 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02318776 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045117545 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044882107 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041514143 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.161251287 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018640896 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019791027 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.02056717 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018259061 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031886944 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143157881 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043613653 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062250206 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019489212 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036258395 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039917893 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.032852729 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.038818818 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021102416 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020685639 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022632169 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037552104 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.04597597 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019650479 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020980998 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039493711 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036164035 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028863714 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020585161 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026848525 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020691592 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019763287 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021771491 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038370465 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026951846 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027225965 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020962228 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.02042468 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020297901 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.02783597 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034299437 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026223432 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032615406 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.036896661 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021863138 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020342442 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018590613 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027667165 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020185914 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020417669 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020687647 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019538454 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020664745 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022742056 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025852875 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030596094 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024025375 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027618023 seconds)
  done (took 3.268364045 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039363504 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.048673972 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033827177 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.03415041 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019421335 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020226634 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020044981 seconds)
  done (took 1.110632867 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067184766 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135180203 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.142789132 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.14362209 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.154343581 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.14129815 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032768223 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.049612931 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019515636 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155331968 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.151579966 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.146789341 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.02400485 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03275766 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052687864 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.14985102 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033183992 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027112064 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.141442437 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.147785822 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02502487 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.050813713 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032131051 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021122781 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.14494811 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138093871 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023916988 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.02124146 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023029288 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020385338 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020322236 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043322434 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137887531 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035497396 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021393499 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019410065 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.135791609 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021682769 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.138516403 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028016107 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.138657392 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022879805 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022959485 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020600556 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021760159 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.142152524 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02175401 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020584428 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020152357 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.140757393 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.020042972 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.139284216 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023327707 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025856457 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.02762553 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0269797 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027381076 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020950393 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.142200091 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.03039506 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022190308 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.150364334 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.149550751 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.13948184 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.15004457 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029412243 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.140137038 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.139094368 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020504234 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028470323 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021015011 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.151198675 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024337146 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023188374 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025890528 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027920445 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.157107517 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.158342956 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.158900869 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.03553249 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.02365697 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021143129 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.155911871 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.159159561 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026669237 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02095228 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021884343 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.036991181 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046089442 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023001389 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025757192 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020978841 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.03106206 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023498689 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023492539 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.152312147 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.02141298 seconds)
  done (took 7.575190913 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028046492 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021387983 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020787474 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021169644 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.02138545 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021169633 seconds)
  done (took 1.125185656 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048115926 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021658828 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.033228236 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021241034 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.04311116 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.139770914 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.139796416 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022586338 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037012008 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032879413 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.140152033 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.144352041 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.142754997 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022338358 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.140528396 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032738774 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.141765368 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026178766 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032082274 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022661971 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034896195 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022209496 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022484243 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.150498848 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023415689 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032347552 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030465291 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032298397 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031852888 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.0225565 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022111651 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023043854 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028073089 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022434593 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.143523208 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028395835 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021659505 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025203911 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023261524 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023051759 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.146676676 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022964783 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.02631598 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025375797 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022643827 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028316695 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025353087 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02542854 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.144340562 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025601114 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025261497 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022045264 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.02313145 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025150539 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028304821 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022619698 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025201216 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.144693013 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022628792 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028491248 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021761914 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023211229 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022608327 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023140626 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026514755 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025288548 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028426526 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022653053 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022765076 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021922494 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.02551228 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021845909 seconds)
  done (took 4.202526634 seconds)
done (took 18.181617973 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.508253686 seconds)
  done (took 1.409905945 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.017136037 seconds)
  done (took 1.94994386 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.05212696 seconds)
  done (took 0.981770023 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.289069761 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.396650081 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.724388916 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092225345 seconds)
  done (took 2.416826282 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.844535583 seconds)
  done (took 1.781325837 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.21823392 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179857878 seconds)
  done (took 1.362860491 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.496289462 seconds)
  done (took 1.422720609 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.315465074 seconds)
  done (took 2.249256883 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.188440552 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.129293066 seconds)
  done (took 1.253505492 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.593088872 seconds)
  done (took 1.52421997 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.564153181 seconds)
  done (took 5.497866884 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.19182129 seconds)
  done (took 1.187073046 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.193393211 seconds)
  done (took 1.12902446 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.693184597 seconds)
  done (took 1.62565422 seconds)
done (took 26.732181254 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043295542 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038985778 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038673252 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033979291 seconds)
  done (took 1.078181876 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030092014 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024233833 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026611731 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027046534 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02447744 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026182799 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026615906 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022914138 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024364939 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023525233 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021856276 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023426068 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025921698 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022984923 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025505255 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027044441 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023525064 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.023970994 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025550952 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023118657 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026046459 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023438718 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023482583 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024910509 seconds)
  done (took 1.532969351 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033687145 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025538841 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028682528 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024381866 seconds)
  done (took 1.050744177 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032259342 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030070503 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038373404 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043130819 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029409031 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030279004 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036545593 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036850363 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043239153 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039461258 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021114017 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020960217 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.02014379 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038744808 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036185789 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015704611 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017102321 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030443002 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029471065 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032254006 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023123811 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018832093 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029557624 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030290697 seconds)
  done (took 1.659636022 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037293673 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019047131 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.034912391 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044169088 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045289893 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018777598 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032249532 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045041636 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081374021 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018883896 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024749652 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.01880445 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057138617 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018841752 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033865711 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.063650318 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066607325 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022746186 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051486519 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018984334 seconds)
  done (took 1.697345299 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028085004 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02347368 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023712523 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019111426 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029922172 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026302256 seconds)
  done (took 1.095412862 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023940577 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021963194 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020906749 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025841802 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021577742 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021458265 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020739654 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019649472 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019605603 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.02032153 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020282778 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.02069056 seconds)
  done (took 1.197287386 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.169813608 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026267271 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.0241211 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019556082 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021308359 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020333119 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034468241 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022358986 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037570012 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020311786 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020440976 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022685107 seconds)
  done (took 1.378336721 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060896596 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064967183 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09867268 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069408671 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068569424 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049316295 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.195844353 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032205752 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.118372394 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091498549 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070557981 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045134699 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039850063 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023115221 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054511839 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073673252 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091886441 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026438854 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068113535 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.238145988 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088644011 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.091532418 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103738351 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071859149 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047363684 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103755405 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050764169 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058741837 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078067287 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08350859 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074778259 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053118808 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024926837 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024566261 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106760596 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062529068 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075611863 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047082684 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060174292 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042932547 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063657734 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023314781 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.035910522 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.066311101 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041045582 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089903802 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047605596 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071657534 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035921453 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098054005 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087714634 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175282966 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04182559 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062439159 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101216658 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074090087 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099868318 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064874271 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039546872 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.078838034 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.067420961 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059841745 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06975703 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036058293 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145963343 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047034768 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.072315466 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073630226 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.056671052 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054225761 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065333261 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098074089 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089379054 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.091205404 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103550117 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048514623 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08146212 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.060448634 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.087585638 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06414562 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.027478065 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085363747 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088735733 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060233889 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058616269 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094119027 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048668847 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030870887 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.060030336 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.078471136 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035485708 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.075479751 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039405786 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.069518973 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102548789 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057471438 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070679954 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077574549 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033515916 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121898563 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.066695814 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027729433 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075838516 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073680173 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121194302 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055202375 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.03083152 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058610214 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063704686 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.11181679 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070144743 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035917676 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070220773 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105357881 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052002688 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.259391869 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053078028 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105502626 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072663992 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042450272 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030384842 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046506068 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.387113867 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061729998 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06568808 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048011656 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037849709 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04060597 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068386688 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047059693 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03486634 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.068729454 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.057225368 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028842615 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04270758 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.030838701 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097197756 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.032476423 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09104091 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080642229 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029160561 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061765217 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050048457 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06093279 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.052347123 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072830242 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096057728 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.141822169 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045325433 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.049631864 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063356898 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101194327 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082518839 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046856388 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031416924 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055957142 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067047393 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052977293 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080461432 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048506322 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06300827 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058290045 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098905574 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102604036 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054626264 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056386586 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064486761 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.078438814 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0290885 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115609618 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060106044 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074406914 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041415975 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100416324 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066419326 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045360803 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041730613 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055618085 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.061747006 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062514428 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102640585 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050742656 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026546206 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049015348 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103520844 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031856229 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065847844 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.045797489 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048237921 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076600903 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.05341077 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037431419 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022825108 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.236770228 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110665127 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023405368 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065217892 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.060228701 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055439812 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074011697 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022769928 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071052864 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089255169 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069481726 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093612031 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118375117 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071565393 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072686585 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.069235189 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.060081629 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03296673 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.080169605 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.089767004 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050494013 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045945006 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090644831 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073324507 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.093077073 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074094279 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074070018 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.061930791 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061713276 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059471198 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.061286679 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102833178 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077901746 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081547181 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037806661 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061825276 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073367912 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093992077 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036154007 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10009131 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040388931 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076809178 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.032873599 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081405973 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030024922 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.124289577 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033618403 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056122177 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023606783 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.028373577 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099552279 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.068872932 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064541136 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058628332 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.098923314 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096269924 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031896747 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065207502 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072528395 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058791425 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.222811601 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062197859 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042186879 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048224998 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059890612 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038267005 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034432534 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069234866 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047297672 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078521146 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037349962 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028295472 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092291665 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057252216 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048211094 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029616689 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059706244 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.078668481 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046369135 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039914332 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067937958 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059047233 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097022186 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.044788231 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051934787 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079851283 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034391697 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.046578625 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023228208 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.039620074 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029837681 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085536043 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029624989 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072209368 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022624285 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087265627 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042316376 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047601229 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05722246 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065953591 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08333404 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049113517 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098392615 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044668442 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075961487 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063519538 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049536491 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041839655 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057981693 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055764627 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078524324 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050692233 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079633283 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101851523 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058483145 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099799237 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045819951 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078300229 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062267136 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080639487 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068810686 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126394592 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098156165 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068182707 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065792942 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029201626 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050758649 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063000542 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071714237 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.287902666 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078126074 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.02582653 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057413796 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047164167 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061361374 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056912603 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03538136 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097042951 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055846418 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041263314 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064889333 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044500562 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057139069 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029919146 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052856461 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.05695237 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047819659 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050226734 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066609313 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081207664 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066034543 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097732877 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.056149535 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.04576971 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.073179816 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0650509 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064077452 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039648748 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040261675 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093796628 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074109903 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.081252384 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.055417736 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064015491 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065860068 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055209402 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081935122 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06307784 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.08426081 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034586874 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031159085 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022151042 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025996202 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080598493 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063495133 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067126625 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054129596 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026268296 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058895172 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05887889 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026043061 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042691701 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050382794 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052843719 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047708816 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063642559 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065954034 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051310245 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059771276 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052616936 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106752992 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.056650993 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044129428 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102951256 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110004136 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043399956 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048773764 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025711493 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03379747 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071751484 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11274641 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118704776 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.034740146 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042816439 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.043121021 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044538862 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025928863 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.045685348 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045073658 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06439703 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056656857 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.073221527 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064016459 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031293228 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060689503 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057847859 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049484625 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.067325887 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081893805 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089331505 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.107916823 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073569694 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068089379 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032038208 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.037754715 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031333742 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034943498 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.059278109 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034453487 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031955696 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108665558 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.048349649 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064583082 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068234237 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044485684 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031312912 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098891253 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024208047 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099637795 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025634389 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038646506 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.037749355 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034780599 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053641566 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104987667 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069993021 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074214203 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065851137 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064037982 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126327705 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123758652 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040379753 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104728879 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031505368 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032691216 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031420797 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072031179 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048788151 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073004325 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107960199 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047990984 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061347542 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034506717 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109028091 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.060403743 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06359173 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04275684 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034662423 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108835344 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034710938 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.040742407 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046560727 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07049582 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027342244 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059884386 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038776536 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035057035 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.434863775 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.664789371 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044895321 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029681038 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049919227 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095536117 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085679388 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050337372 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062163573 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.073274744 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054129924 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04754718 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061798378 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.152259384 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02783803 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048588059 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.058024212 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051599156 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055393665 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.052565057 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.04111961 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.046695702 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.041017987 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033238131 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06230782 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042942113 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051436076 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062685856 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037278973 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.042901537 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088337146 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.059369217 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.037694486 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043444411 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.058339242 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04281604 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058836914 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023598063 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067647908 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043083132 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074920793 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054986301 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064099561 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08243113 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049120041 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09506985 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.063830427 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078071738 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041588131 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.03256526 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084054699 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045376336 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032046288 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103587645 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.05347472 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.058301692 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059697428 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.051224762 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069512755 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074797912 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06849815 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052140656 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033091568 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057907653 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.060045683 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042080876 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034079809 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028870301 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030546638 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063772257 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042751301 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040968467 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070116873 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.191819914 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056820648 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.056364147 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075327532 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040712963 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054952337 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064197026 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044848204 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062996142 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053897148 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.329063095 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128062885 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077658107 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082818155 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08774494 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031128974 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028964436 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.0221954 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066867647 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03289639 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042587079 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032642825 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088621307 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.037583902 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066270139 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.20014742 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034505145 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04904528 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051005948 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023508597 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037280344 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062430305 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041058297 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034095922 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073686904 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035517014 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084944361 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066900319 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054414702 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050135659 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03531399 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069489571 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057383217 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.084918066 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049686475 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029422976 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079600956 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058583676 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095686032 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.026972157 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035252375 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087215174 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059459167 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089404185 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034545403 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110085746 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099900033 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055638549 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093036954 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025001595 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042074208 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045073961 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082129005 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040107966 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068148842 seconds)
  done (took 41.217203821 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.137451925 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.132311696 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078574285 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.088707877 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.245077674 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.25353478 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106077862 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078101736 seconds)
  done (took 2.283988044 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.027576692 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037140451 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034600966 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.282640439 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.056921647 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020843087 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025575497 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035429315 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024392117 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020392377 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.05905655 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020644109 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.02457978 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.434843049 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019858207 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025581894 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024440238 seconds)
  done (took 2.287456092 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.306064998 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.69078189 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.297806006 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.670194004 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.106094782 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.565636743 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028941987 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034698309 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.672225822 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.357302035 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.097402895 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180305879 seconds)
  done (took 18.104662925 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031188035 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.153441981 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.152138766 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027553817 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027100944 seconds)
  done (took 1.490444503 seconds)
done (took 77.081042127 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.04025573 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.122562818 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020194252 seconds)
  done (took 1.269158949 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.15685371 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.150960474 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.150780866 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.154326659 seconds)
  done (took 1.706457348 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030001827 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.0295494 seconds)
  done (took 1.16067815 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.183173815 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.247565932 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043686328 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038346395 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033821171 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034222881 seconds)
  done (took 1.210241469 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026630645 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024334256 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024425174 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.02472599 seconds)
  done (took 1.194091334 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.133857048 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.0191514 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021718951 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023341045 seconds)
  done (took 1.294165746 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040183935 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039312867 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068298227 seconds)
  done (took 1.246332619 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.038953891 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038232276 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032466523 seconds)
  done (took 1.208669988 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064529303 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.0495529 seconds)
  done (took 1.209592283 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035153982 seconds)
  done (took 1.133208426 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.047425899 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050748103 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.217030735 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.182955863 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.22070535 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.205819531 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.03014563 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030745183 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026563171 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.02545199 seconds)
  done (took 2.130650089 seconds)
done (took 16.375898221 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035567642 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.147719206 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.269806992 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.03975541 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.60801794 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.2659178 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.685416362 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042872423 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052305572 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02121767 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037771965 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.585829453 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.688656226 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.104012073 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.666996377 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.094856581 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.760219277 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021680095 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020789768 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021233126 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.667858209 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.0208951 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021259887 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021748253 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.758338002 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.285860503 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022117767 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.090486908 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02101555 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024918618 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.268794016 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02214245 seconds)
  done (took 12.48418662 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025627286 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075695886 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02619196 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036869354 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023463845 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02337242 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025399472 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021991204 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063869582 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021592618 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038476658 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021020211 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025708125 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022563722 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041384572 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021508881 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023589556 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022115841 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02172348 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022005001 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040444245 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021186562 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02194403 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021968125 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021650986 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035952816 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02261492 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021380051 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021713793 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025474815 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026660994 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022753597 seconds)
  done (took 2.0172902 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078207394 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078223391 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026891003 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061650541 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073291219 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023935138 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.104789209 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043755066 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066505047 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021771352 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038643816 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021519989 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057699476 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023081102 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041852643 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021803779 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023953461 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022143574 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021394143 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021846494 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040442719 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021425533 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022006063 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022185068 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022031645 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037898527 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022580579 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021685442 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021566745 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025493017 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027391968 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02261194 seconds)
  done (took 2.289796214 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024800315 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025264755 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030772433 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033924406 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.01994867 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022089083 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023151957 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019932923 seconds)
  done (took 1.309978703 seconds)
done (took 19.213996828 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035354149 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021926534 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024692414 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041283893 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027863647 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.14263638 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018850671 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028650122 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.02502124 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025299053 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026590767 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020056794 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023754916 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.01857123 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025525244 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019813237 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.144907581 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024152439 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.142990779 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.144218951 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022361867 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025291432 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028479971 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.143685251 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.143766863 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.143848156 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028894465 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025813764 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020228657 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022872903 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.141655855 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.143790929 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022941487 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.139630938 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020309965 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020178892 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024384507 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021867101 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.148130444 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029123515 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022399435 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028794168 seconds)
  done (took 3.443614772 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.147074352 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.152556854 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.144864663 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031956895 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028476114 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.03179366 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.151401419 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028740699 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027371345 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.150789882 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023211845 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027421194 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029790739 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020617459 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027425459 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023725206 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029147485 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021646479 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.02739715 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027334947 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.15169785 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020914611 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028209657 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028921404 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023062774 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029081545 seconds)
  done (took 2.563394738 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030057758 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042957381 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045850362 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098734882 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062996367 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035966961 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036292634 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046878404 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054164405 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021167621 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042855669 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048460277 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049187486 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028197086 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060114339 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039398852 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033557745 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022699147 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027578863 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055240844 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043828798 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039663333 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053828724 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040918817 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02022567 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030231359 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.02833306 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037293084 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028294859 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033191128 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024835098 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024431255 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021844423 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032281523 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024741849 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019154795 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043769092 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033394672 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035580813 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060213441 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030957987 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.02245566 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048003989 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086095186 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020677038 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023664537 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025367812 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033486006 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022481277 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051278253 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036206005 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020798505 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040152083 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022432656 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022438673 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036550253 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.02264383 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023168642 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032656113 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027027623 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041910916 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026204001 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041355477 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020796803 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032206858 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022377831 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022588319 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.01964419 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055259971 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028358119 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070446653 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022147997 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019247591 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033220126 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032380114 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028214668 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020806703 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039794947 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033372299 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024901986 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031898754 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.02393524 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024192055 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057260808 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020081531 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019199719 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019173257 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023406808 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024277806 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021661446 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033362112 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020546591 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024355549 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.03526881 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020987839 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021660037 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023447506 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022227616 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020412851 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030942401 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.02463046 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022736551 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033698459 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022087636 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02419903 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035970836 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030156741 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020498008 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022204417 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023282896 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022716336 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025500117 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024339363 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022865826 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026148289 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028521401 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.02709344 seconds)
  done (took 4.926972974 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.237445236 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.226380397 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021859036 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.223445134 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029582392 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.156829832 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.229564109 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.227022238 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021735946 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022531307 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020820957 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.170777322 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.165402919 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.177282343 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.158553995 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023738966 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048324576 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.177453275 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.232023385 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.227192407 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047279913 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028794983 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023883084 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022948936 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022262898 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030310986 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.0376887 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030238856 seconds)
  done (took 4.18017421 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029755833 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065642724 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024900716 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045679435 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038063269 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021472534 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023144241 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022497616 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037850891 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026603305 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021178747 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025362839 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024717945 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023557473 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.02226344 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027828739 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.02780298 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028538766 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024978178 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025883194 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.03198449 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045352702 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025489844 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021461632 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024848366 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021438725 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026802763 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029926849 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021236019 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021245232 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018607095 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025864051 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035778684 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022617607 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.02128451 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022015994 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021650282 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021593983 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021878046 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019780191 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019745404 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026627353 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020322454 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026513377 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035783788 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023672448 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023070958 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024086603 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023907532 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018546065 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.02514302 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024775673 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.02404633 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029734108 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025248859 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023893765 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022813212 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035425543 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026990379 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020914936 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020632293 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020022123 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02319539 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028089665 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038179844 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023180341 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019979727 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021661401 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023089928 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035437021 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020844577 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026981172 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018597788 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021712762 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023823571 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024435379 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022930946 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.019910729 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021287674 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021805139 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021592647 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021529509 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020920757 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024247811 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019523183 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020012178 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022124249 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023086394 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026948955 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020486209 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024241936 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.022998741 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.02035749 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024133966 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.02672288 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024378117 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041588373 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029354675 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022167679 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019465287 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036214308 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023452577 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021090081 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023287041 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026034911 seconds)
  done (took 3.829157288 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.050822701 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023599737 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041079804 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.052612517 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031502389 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027145864 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035101277 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022786524 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042282304 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020750538 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030576829 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019973575 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034249587 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030000221 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02338472 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031291413 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024272417 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041703468 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.035962195 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020392422 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030225287 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.03349894 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033872475 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039097573 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038674623 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039730419 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033633318 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024403436 seconds)
  done (took 2.057185685 seconds)
done (took 22.105230283 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.172229513 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.366923814 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.142803527 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.831085972 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.231201717 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.142777772 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.269353989 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.121081405 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.674534536 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.225448092 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.838623546 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.975851248 seconds)
done (took 59.197761811 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.160679676 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.280640708 seconds)
    (2/2) benchmarking "String"...
    done (took 1.375881674 seconds)
  done (took 3.794374828 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.574511644 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.13303222 seconds)
    (3/3) benchmarking "different"...
    done (took 1.172341131 seconds)
  done (took 5.001114992 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.442961324 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.902460831 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.419706023 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.120809248 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.137805701 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.626719756 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.267161732 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.791965186 seconds)
  done (took 27.39989811 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.226311159 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.392987219 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.498551765 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.659505112 seconds)
  done (took 17.987755803 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.578215707 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.527507811 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.527483938 seconds)
    (4/4) benchmarking "different"...
    done (took 1.827692558 seconds)
  done (took 7.714727836 seconds)
done (took 71.731038946 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.121081047 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.432613832 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.137082789 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.318442346 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.186411025 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.23769895 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.142663929 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.151567913 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.133389722 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.134242488 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.132706658 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.144626134 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.14420866 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.177327792 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.131797929 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.148148442 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.419150096 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.13904579 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.166448108 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.934715291 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.466234014 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.12404972 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.135270306 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.213608235 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.528361998 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.195210349 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.592656689 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.137938595 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.745040669 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.122990597 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.147368065 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.132811702 seconds)
  done (took 183.198370285 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.12144344 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.962532668 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.002319971 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.1528436 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.506643765 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.483543004 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.975055886 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.523611788 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.132350839 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.15757406 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.157085339 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.126248339 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.174331831 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.747696654 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.167610261 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.161619456 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.042400729 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.955635682 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.179268613 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.070037778 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.129475576 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.66585742 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.677663396 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.963011743 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.152050693 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.191972399 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.147240379 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.15875427 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.650329151 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.998720113 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.140349586 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.172927465 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.318025988 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.371006169 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.129899293 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.140630822 seconds)
  done (took 153.942337091 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.384236072 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.130438026 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.164514148 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.28755081 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.115274264 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.964149954 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.135696875 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.121429598 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.12113069 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.127750702 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.123304994 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.191061093 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.132815827 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.191073679 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.166824908 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.123025186 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.121967443 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.200319971 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.147612658 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.121100398 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.121338188 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.226562583 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.474898835 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.279970827 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.135046678 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.130297733 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.255663571 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.142196054 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.122739745 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.121748531 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.254584874 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.135251517 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.250159479 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.266505649 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.141100574 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.179195076 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.140283005 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.350599119 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.137441018 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.121529691 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.122915592 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.169663713 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.132217616 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.213462223 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.235544755 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.136037791 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.140425558 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.673783579 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.695138911 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.135344108 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.121882474 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.120675361 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.124467242 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.12264175 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.667022588 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.137034617 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.155739256 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.684296536 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.147377331 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.121705166 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.121182254 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.12151915 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.121583424 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.127814398 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.157927802 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.758537261 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.216728414 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.484580892 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.890639136 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.135450623 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.121148205 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.120774643 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.911214923 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.201929274 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.123571081 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.121086497 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.29762705 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.132823779 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.120927422 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.042505078 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.044875942 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.133927633 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.276902462 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.135454707 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.12126298 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.186257199 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.208590924 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.147244591 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.140976293 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.176855493 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.125942112 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.120759096 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.128524289 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.044291425 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.134853823 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.133487137 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.481861904 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.135920283 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.121188964 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.240987436 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.493137448 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.133178015 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.202374512 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.528384047 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.044072277 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.135497479 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.121402906 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.140745232 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.125081661 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.133145193 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.133788874 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.122832232 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.122990271 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.12617339 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.121806712 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.121603477 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.121500823 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.140439775 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.123049992 seconds)
  done (took 328.650628632 seconds)
done (took 668.438552456 seconds)
(4/20) benchmarking "parallel"...
done (took 1.124344883 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.383015485 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.275014647 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.248948117 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.377048127 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.334796361 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.308449417 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.335447876 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.425812895 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.362636525 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.301882832 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.361619888 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.307291797 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.427947891 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.389809669 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.430762361 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.394139242 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.333591314 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.799521041 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.346961599 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.30749516 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.340278998 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.311729395 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.289505563 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.363581606 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.430249034 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.306557552 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.528286564 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.370546876 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.342006229 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.390253692 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.399780778 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.416255477 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.34739459 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.416660015 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.386162409 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.433088096 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.303605481 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.397993749 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.323164093 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.343928479 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.359762286 seconds)
  done (took 64.375422723 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.474404848 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.308683424 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.432834186 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.432945352 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.977626725 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.422125556 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.520819923 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.3288089 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.320405192 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.430941269 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.450939744 seconds)
  done (took 18.252117264 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.366949042 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.311426259 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.445240483 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.453401653 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.540144468 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.439454109 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.490513111 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.318728791 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.320576014 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.457194709 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.480601378 seconds)
  done (took 17.772398445 seconds)
done (took 101.524276787 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.694785071 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.204379689 seconds)
  done (took 4.02149244 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.153537294 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.143530614 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.133818287 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.138058834 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.135543362 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.134393496 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.185880664 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.146621825 seconds)
  done (took 10.293517796 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.134390785 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.134595936 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.134412096 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.133422805 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.133183519 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.13400357 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.133694312 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.133496686 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.133699692 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.133815119 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.133847599 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.133625087 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.134727078 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.134087357 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.133968621 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.133556671 seconds)
  done (took 19.266807785 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.133380757 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.134205614 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.132995565 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.133671096 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.133755122 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.133160698 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.133154689 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.141914461 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.133867494 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.134235414 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.133211017 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.134038957 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.13323318 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.133308465 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.134244806 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.132969624 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.135848173 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.133671865 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.133347496 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.134402398 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.133950162 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.133426501 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.134223718 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.136147235 seconds)
  done (took 28.343158299 seconds)
done (took 63.075475213 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.692220124 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.128229653 seconds)
  done (took 6.942430541 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.138728354 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.134973633 seconds)
  done (took 3.508988747 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.134323652 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.134680317 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.134351767 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.133449112 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.134171688 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.133382379 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.134040748 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.134746004 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.134126949 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.134243066 seconds)
  done (took 12.464323421 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.133469643 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.134332236 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.133283482 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.134478622 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.133922491 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.133708619 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.133831311 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.133917971 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.133757408 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.133985665 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.133885869 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.321564852 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.134221071 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.35972647 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.133896502 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.134114756 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.133734425 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.133652657 seconds)
  done (took 21.946348337 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.134130322 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.134236631 seconds)
  done (took 3.390425938 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.133589536 seconds)
    (2/7) benchmarking "second"...
    done (took 1.134045943 seconds)
    (3/7) benchmarking "month"...
    done (took 1.133701446 seconds)
    (4/7) benchmarking "year"...
    done (took 1.133599137 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.133978834 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.133505015 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.133765217 seconds)
  done (took 9.058486886 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.589013478 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.298675916 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.355903372 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.601620612 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.792693873 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.073671816 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.795577061 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.07030782 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.941820264 seconds)
  done (took 16.641463636 seconds)
done (took 75.077244347 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.802634938 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.12605427 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.824916436 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.245682648 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.141786213 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.490562571 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.147703092 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.742594528 seconds)
done (took 37.672511385 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.47755278 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.12180219 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.170772648 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.171992912 seconds)
  done (took 19.58713157 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.122488783 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.725445981 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.171267405 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.163269787 seconds)
  done (took 19.407611294 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.635750531 seconds)
    (2/2) benchmarking "read"...
    done (took 1.669398552 seconds)
  done (took 4.446826812 seconds)
done (took 51.046049087 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.134370786 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.134016722 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.133898184 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.134248909 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.133728194 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.13388498 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.133758492 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.134515854 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.133850153 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.13413166 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.133839882 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.134550745 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.134022065 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.133949823 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.134102615 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.134515431 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.134496306 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.133995772 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.133663604 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.133768747 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.133964579 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.134156794 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.133812408 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.134044957 seconds)
  done (took 28.340130524 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.202906385 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.19461851 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.205598175 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.197538855 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.233351195 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.197248237 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.198075214 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.176329785 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.203791894 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.185077521 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.172441609 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.226228971 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.178806483 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.22073366 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.173066291 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.220067986 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.205601696 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.176212207 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.173128701 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.226001745 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.196820183 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.176232274 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.226218141 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.168207102 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.225832995 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.173899919 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.185649687 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.193901166 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.167660438 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.220626867 seconds)
  done (took 37.025112368 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.167768319 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.13430714 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.134356453 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.22385857 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.134636344 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.134449317 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.134491163 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.134929938 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.134290704 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.134427452 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.134946741 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.135137521 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.135456966 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.134470338 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.134708895 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.134570193 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.170509593 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.319747129 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.134511858 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.134717095 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.180207252 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.135431569 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.135177203 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.134428172 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.134482557 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.134771678 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.134325763 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.134602216 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.135383917 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.134814238 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.134656947 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.185260756 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.173192206 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.133821194 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.256797546 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.193657876 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.134658248 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.685383979 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.162753232 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.138240897 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.13476368 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.135049615 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.134974449 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.134850078 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.199924001 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.134884985 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.135421324 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.13461734 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.134885697 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.134825504 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.134600864 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.134790154 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.149965501 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.13501321 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.134746295 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.134478059 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.134819995 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.134789639 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.134871478 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.134957585 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.135213992 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.209325526 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.134683717 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.134804984 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.504121411 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.134826809 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.200470482 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.134637128 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.13486149 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.349466222 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.135116014 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.340210195 seconds)
  done (took 88.078527866 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.134822095 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.134166974 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.211117149 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.210932407 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.134561579 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.134530544 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.135125498 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.134017759 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.800343314 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.134817371 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.134427533 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.134437359 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.806136798 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.134942599 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.134272385 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.211920309 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.134435414 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.133932449 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.134139228 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.134478735 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.134616777 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.134499835 seconds)
  done (took 27.650402127 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.167975826 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.149641262 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.174038726 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.149708621 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.149533558 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.150063607 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.178530754 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.149761094 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.175208811 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.175820721 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.177943747 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.167780732 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.149964148 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179202307 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.173854203 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.229652693 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.168031242 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.231228576 seconds)
  done (took 22.221060877 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.311517916 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.299672766 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.217555837 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.176349189 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.396624746 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.369207718 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.24583116 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.310541756 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.176847381 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.300090541 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.308289073 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.179839241 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.369067021 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.177449576 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.177337755 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.396163674 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.218370132 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.176738851 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.246147544 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.245386716 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.311838349 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.245918267 seconds)
  done (took 28.980063449 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.171153235 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.180144381 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.21730611 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.211536475 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.134828252 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.134714521 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.192915485 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.170380888 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.149981051 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.176747617 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.1759942 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.134977565 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.226294341 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.188895873 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.22625509 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.176349381 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.185756873 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.188460707 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.17211994 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.134663667 seconds)
  done (took 24.672859433 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.135052742 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.135205901 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.135281984 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.134969924 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.135201106 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.135215065 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.134725166 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.134892087 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.135101311 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.373376225 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.134886547 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.135236239 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.135250488 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.135112941 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.136295274 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.134864627 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.135070187 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.134939149 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.135685248 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.134633889 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.373243715 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.135083134 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.135718948 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.135158451 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.134942197 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.135199331 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.13565662 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.135607613 seconds)
  done (took 33.385648529 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.184196103 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.134760093 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.134091907 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.134462952 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.134238898 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.198022263 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.134829223 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.134497271 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.134481607 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.13407682 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.13504463 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.13494895 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.13483919 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.182729472 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.134724079 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.134686212 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.188498012 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.135220203 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.198386551 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.122900359 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.134783581 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.230032348 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.135368171 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.134564611 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.123122353 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.136118651 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.134593101 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.134563544 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.134886268 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.135382634 seconds)
  done (took 53.517137169 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.152743166 seconds)
    (2/2) benchmarking "in"...
    done (took 1.156327202 seconds)
  done (took 3.432302032 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.134630164 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.234787694 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.135104155 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.33298536 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.300420386 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.310103382 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.300203354 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.238505786 seconds)
  done (took 11.110085584 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.134776089 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.570259691 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.157784926 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.135622333 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.135463557 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.623472732 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.081375955 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.005026799 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.953373965 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.998536838 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.13507154 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.582839499 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.130770834 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.444472336 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.255130826 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.981285101 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.38465122 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.66803461 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.223817277 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.265546876 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.886112138 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.24555553 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.135742761 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.135639863 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.135534515 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.035697429 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.924554846 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.561916974 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.325268173 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.265118971 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.911262168 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.222324298 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.137424423 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.399741601 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.25854534 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.135591795 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.29654323 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.247604871 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.13578497 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.135440376 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.894406106 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.832123927 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.4177248 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.366670877 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.227198382 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.135677755 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.135545783 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.135319441 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.409269165 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.745508705 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.131411744 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.103758046 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.27929528 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.136004374 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.85821884 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.152486018 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.135253381 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.034774851 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.598135405 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.386953158 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.475653188 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.244397847 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.135487575 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.269523944 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.135970171 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.31391684 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.978475268 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.932666481 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.903708654 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.25387364 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.654803787 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.158786066 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.136223083 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.136070112 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.076847478 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.449484497 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.135261807 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.135429829 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.135787935 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.135116809 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.401587769 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.259175568 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.964553757 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.28048873 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.304282111 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.59199581 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.269857375 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.135819159 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.795163361 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.987057007 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.135830681 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.77870472 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.358059766 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.279056771 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.135323965 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.402887036 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.175895032 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.136123441 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.975009324 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.775044079 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.152137696 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.1355897 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.45410851 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.190460389 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.139656818 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.1356883 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.828494101 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.269223609 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.251874893 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.182586206 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.136076974 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.136384751 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.719050175 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.141203638 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.136171163 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.588215238 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.136061453 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.662050161 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.395969189 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.346618201 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.519234642 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.126791971 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.377572955 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.977099146 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.13925006 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.673570527 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.966216454 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.744140409 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.406038196 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.267152261 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.012727718 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.208791226 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.135637486 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.300983038 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.219890065 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.136278369 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.135663921 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.136064036 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.13561181 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.135469337 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.257218096 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.632690861 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.007779517 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.152171131 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.37423736 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.262924853 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.993049021 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.421035138 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.872729627 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.280732338 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.136336227 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.872619979 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.426103909 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.84462432 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.271121573 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.136686782 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.136974088 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.995546387 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.129784708 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.240434016 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.13618975 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.742100908 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.140481075 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.137295811 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.136513628 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.600043453 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.280601446 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.136128656 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.239085259 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.914381173 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.048369486 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.152441476 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.451524197 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.259688228 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.137401626 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.135950728 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.136301113 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.925521616 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.755299312 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.282744642 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.721508561 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.894460421 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.234629331 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.295388698 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.235810627 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.418477134 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.371899557 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.282521706 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.136581396 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.136931051 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.135901383 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.602422517 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.990467465 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.18363359 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.002559717 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.149230425 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.004199151 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.130055032 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.937139658 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.155804186 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.833072473 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.125187969 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.246662489 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.137002357 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.136677522 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.295871683 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.325804456 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.284102632 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.726297064 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.15277039 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.13661002 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.795524005 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.270795944 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.820607558 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.248949008 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.959533132 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.223912406 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.269274271 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.268461515 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.808406262 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.27224029 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.13677801 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.854848005 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.291855296 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.13620513 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.18691588 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.853561135 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.943719321 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.914627152 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.777763543 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.080562582 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.709145399 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.398106344 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.282845444 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.978005263 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.244153554 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.354449701 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.209299705 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.647710668 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.160442774 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.885895057 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.15577268 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.899760765 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.153595488 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.134216584 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.265773239 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.62208898 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.260474905 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.137034951 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.307998555 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.238885571 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.787356911 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.270756636 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.263388904 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.463078952 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.056344357 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.243937773 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.353109858 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.207595665 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.054661444 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.1076067 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.482671518 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.072850572 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.135979172 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.130675014 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.892471472 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.321144335 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.376319623 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.278905156 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.137049558 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.137181726 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.332047726 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.230708519 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.137550455 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.47508674 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.120371346 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.175205154 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.130887169 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.137186114 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.13615114 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.353845413 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.30127866 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.411011034 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.60704973 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.713355274 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.936614018 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.270663144 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.796973855 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.275239821 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.815944295 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.139816152 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.136636193 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.810582114 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.270724784 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.402712355 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.289525635 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.244007947 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.80029035 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.248687273 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.430053414 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.290616407 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.266889395 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.897855833 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.70351811 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.381243799 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.546661797 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.179609559 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.650120581 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.20338004 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.688953216 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.153929404 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.828403591 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.094780627 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.199376236 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.137989498 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.13735708 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.641906148 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.128720162 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.14012685 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.922202276 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.841116852 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.053282481 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.862289069 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.142747441 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.137384168 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.137884919 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.137084365 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.040829352 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.136161234 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.473412636 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.279656636 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.137776082 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.137505422 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.105777456 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.468673683 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.957087391 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.009482148 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.125858677 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.280957206 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.137873145 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.136808037 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.136699756 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.137292915 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.137135087 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.137465888 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.643243642 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.153390597 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.729806955 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.144454098 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.137541902 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.338937747 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.207696518 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.138545784 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.358634796 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.22701173 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.26738096 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.212443725 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.137873549 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.543949342 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.282458028 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.102818724 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.31204551 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.461162803 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.381217189 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.653539736 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.194593725 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.563444051 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.432344722 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.933245062 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.141772952 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.042970176 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.131095451 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.928539277 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.120598445 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.469112929 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.699919587 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.149531938 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.416319734 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.041711194 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.500365795 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.284685414 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.211496533 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.138195633 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.137416269 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.192999918 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.384046602 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.188257292 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.409699841 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.347527252 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.115284063 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.314642458 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.23966009 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.366261834 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.171833001 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.153555244 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.137023168 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.137222049 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.608063368 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.0105603 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.233352946 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.137857445 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.025565823 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.891888707 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.04358609 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.756896799 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.031150975 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.279920342 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.137851369 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.340455579 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.193427752 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.932985591 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.164438353 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.921439674 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.471544246 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.189269698 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.34712472 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.52016934 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.846752045 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.549784048 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.259768213 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.139268368 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.518194735 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.129285723 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.284624696 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.033455955 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.473325771 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.676309974 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.566870145 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.411078958 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.260113593 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.031997865 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.586716379 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.148063905 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.142036938 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.975188125 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.285322632 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.421964095 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.094846868 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.403184401 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.284603602 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.771801626 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.729811478 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.281831712 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.746340955 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.282909999 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.138128447 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.928878081 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.053384017 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.176356452 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.265081745 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.138462951 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.156715998 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.803020749 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.731916176 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.360872792 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.221974533 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.138931734 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.929165577 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.842108995 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.141149214 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.138286525 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.137976147 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.555308282 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.19205887 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.138536782 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.547540609 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.744873187 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.282409287 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.577195397 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.26920869 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.284747103 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.400738226 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.50705808 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.352425884 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.205299492 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.139173208 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.138932783 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.138282153 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.720348364 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.154592033 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.137887009 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.735137665 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.282498347 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.893470303 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.05654315 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.377426325 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.215281811 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.57326654 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.282983084 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.605775184 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.024569099 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.130718005 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.372250048 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.214279267 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.244756868 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.890214548 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.248729317 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.138905598 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.047383575 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.486567707 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.513013763 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.551305649 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.450898409 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.231418739 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.824397612 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.254550163 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.915910608 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.161365107 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.138526219 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.588300685 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.27469187 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.585163899 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.296239976 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.622940026 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.259869439 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.437780136 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.397962712 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.234747411 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.138764542 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.139591061 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.137929799 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.167899189 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.588034767 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.041142601 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.624480388 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.276725341 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.931191578 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.673772975 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.003633227 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.319926175 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.450839849 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.461349829 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.177901318 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.104459322 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.524896483 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.226592495 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.306011618 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.237409649 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.92911885 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.217867502 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.140555968 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.713417338 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.155014613 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.138626562 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.138881792 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.034657772 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.82793054 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.248231865 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.346807175 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.240569318 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.139307817 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.754444454 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.420833322 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.180995583 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.139338848 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.139157318 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.017030836 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.255077845 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.140517938 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.479479079 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.298221418 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.448004745 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.966737611 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.580801295 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.234206034 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.139492244 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.13916392 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.849026942 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.729489465 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.177291138 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.452800383 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.195764949 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.617292049 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.139611959 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.602139746 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.667680853 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.130976153 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.267269828 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.140363005 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.143688259 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.061811692 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.061254551 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.874712635 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.452264621 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.236384394 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.935870792 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.1374615 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.207122316 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.314149525 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.214622256 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.140324628 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.140426967 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.140060617 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.609808145 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.148905747 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.142576741 seconds)
  done (took 1447.769612921 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.406814762 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.139334844 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.139466183 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.138770688 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.138693639 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.139177585 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.138815555 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.139327326 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.138617282 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.139211165 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.139349583 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.139070315 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.138932835 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.413128809 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.139060098 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.138905836 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.138796751 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.139094279 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.138818684 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.139087753 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.139058393 seconds)
  done (took 25.590086952 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.138997174 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.13940899 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.139489189 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.139514281 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.138974378 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.139448563 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.138498207 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.139055542 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.139207633 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139443217 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.139304779 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.138809325 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.138955196 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.139102351 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.140131592 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.139179128 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.139579019 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.138882273 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.138991461 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.138863392 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.139222639 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.139288923 seconds)
  done (took 26.190430052 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.140458787 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.140419744 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.857503641 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.268972449 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.140026541 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.138939048 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.139093499 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.339827028 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.167620326 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.026589845 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.439114614 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.197526072 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.142941562 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.332739207 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.239070951 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.139732182 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.261288807 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.139448321 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.139922422 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.139093509 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.139327246 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.365826838 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.281943429 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.139806518 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.967465309 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.286409425 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.140760022 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.139536549 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.139344947 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.104558972 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.13036216 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.140149216 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.979123301 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.912383406 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.492150664 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.031714914 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.140836853 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.140505333 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.139652994 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.139444471 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.327018642 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.937161989 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.14266871 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.139896694 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.431009617 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.262580436 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.140133901 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.466909378 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.196797362 seconds)
  done (took 89.655662601 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.139492097 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.263306855 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.196330856 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.139106386 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.259388528 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.139533407 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.196079522 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.139782713 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.139283467 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.139932887 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.27171534 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.29662904 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.139415843 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.1397321 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.205933002 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.13948403 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.139189232 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.1395142 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.139770356 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.139620334 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.139509956 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.191158549 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.252933741 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.293286566 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.139397711 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.140040989 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.139277265 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.139601287 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.283363028 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.140479313 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.140104032 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.139772118 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.265311367 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.251028203 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.139636349 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.139920027 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.26717265 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.139849755 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.139847687 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.139768827 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.140108035 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.139756445 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.197222296 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.274922868 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.139785412 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.243932422 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.140186565 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.139824409 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.286617736 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.13943013 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.139971623 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.297550564 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.140165533 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.140104689 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.13984985 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.256744714 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.139615424 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.139725602 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.13981103 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.281490177 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.139586625 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.140004231 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.296032899 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.139876737 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.139905883 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.305203497 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.248897971 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.139636711 seconds)
  done (took 81.46396808 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.138764036 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.275872621 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.314137826 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.316265471 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.276160642 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.271881451 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.278996953 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.276360657 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.27609495 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.279488785 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.276225439 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.230610172 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.24640357 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.230133455 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.279225723 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.261852411 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.265946725 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.262887815 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.280141089 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.279620467 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.266329839 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.314657476 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.276523402 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.316275283 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.49669825 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.246455975 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.275540657 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.279453307 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.318631626 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.276399011 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.496405208 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.279536382 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.276365372 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.31845594 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.492150899 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.273237915 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.139727701 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.276234193 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.279294732 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.276604629 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.247101683 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.31738936 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.273208521 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.246366609 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.271247604 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.272708904 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.31632175 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.492620369 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.232996288 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.278765633 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.276410545 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.318139684 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.273587617 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.26876424 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.317062561 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.238138552 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.315285095 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.317735888 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.27998304 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.315323013 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.316597699 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.236450311 seconds)
  done (took 81.04475776 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.139407182 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.139667625 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.224380438 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.139614851 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.139900458 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.224884877 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.140268603 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.140268406 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.139797544 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.140189442 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.14003146 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.223824753 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.498984829 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.139720341 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.224392825 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.498613275 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.224276565 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.224654943 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.139800767 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.224792676 seconds)
  done (took 27.236212691 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.139484062 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.139746113 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.140315085 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.295333648 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.139775054 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.275030593 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.140423776 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.139911606 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139837993 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.140478511 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.140177534 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.140029116 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.139501183 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.295046245 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.139885163 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.275631993 seconds)
  done (took 19.949157641 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.140334711 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.140337581 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.1395837 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.139999223 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.140279755 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.140965717 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.14010641 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.14011928 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.139979474 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.596985647 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.140749257 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.139571342 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.139870233 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.140014182 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.140893895 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.140732488 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.139910657 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.139968197 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.140248291 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.13977732 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.71192553 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.140208286 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.140169272 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.140168828 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.139889357 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.717030431 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.13997629 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.139943476 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.13952411 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.139964338 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.140056134 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.613623979 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.139704613 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.139853956 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.140258078 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.13978324 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.140238983 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.139954591 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.140279485 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.140401188 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.140275607 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.139784486 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.139904863 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.140077111 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.141366599 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.14061001 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.140966144 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.602865865 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.140202095 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.139827681 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.141149469 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.140535629 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.140545997 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.615967278 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.140003184 seconds)
  done (took 66.857284586 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.184691948 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.197908454 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.140881385 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.140265932 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.197535369 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.18389356 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.181348487 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.15502965 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.179576927 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.141032272 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.203561104 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.155219549 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.184393457 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.202567502 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.20221042 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.185143338 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.140363182 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.211673093 seconds)
  done (took 22.316437887 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.139803153 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.139893533 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.140120028 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.139843739 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.13994076 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.140020517 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.140286795 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.140352289 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.139731758 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.140569332 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.14018296 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.140284508 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.140466167 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.140265723 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.139797112 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.140334734 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.140293819 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.139871791 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.140154693 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.140096877 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.140694735 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.140534618 seconds)
  done (took 26.212366882 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.172612248 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.187872099 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.140763478 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.141265993 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.141989162 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.164442412 seconds)
  done (took 8.07804644 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.194767936 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.212289239 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.176340232 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.19314101 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.219247493 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.219058776 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.218142988 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.217782824 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212352895 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.438738007 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.224126368 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.222494429 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.212525655 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.271385154 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.21218375 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.21520411 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231589872 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.2245491 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191000763 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.231664581 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.22969111 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.217898125 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.230860131 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.218491114 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.229441067 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.270694992 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.211856425 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.442047095 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.218245043 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.217827881 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.218695909 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23227102 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.220838983 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.431755548 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188403481 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212373771 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.219196512 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.232917744 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.217017989 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.265748892 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.179774911 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.210266209 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.213661331 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.226190326 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.220950592 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.230057036 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.226609364 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.232372002 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.23023326 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.438482039 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.21771381 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.265681092 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212502699 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.221142804 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212999147 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.431427305 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.435965815 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.26441608 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.21238769 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.438602871 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.266778281 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.216577717 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.266645046 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.441105433 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212444376 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.267183771 seconds)
  done (took 83.608923817 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.267468668 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.176270774 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.231021898 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.445714128 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.265561924 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.230683619 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.226996013 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.226848087 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.221056531 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.199866097 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.232197514 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.228423146 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.27510196 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.271021034 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.230915113 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.217931513 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233293808 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.264774791 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.200103648 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.432279335 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.23326447 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.266229935 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.268114865 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.267172517 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.429333257 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209259567 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232514443 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.226618684 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.224448599 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.227530411 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.241215269 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.229507379 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.26828673 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.177304725 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.265911725 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.231329152 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.226318067 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.240815823 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.229121758 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.212256399 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.271004403 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.232759677 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227911235 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.223478781 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.431351061 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.227429592 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.221963051 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200173103 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.226883425 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.200131224 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.431449075 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.430184765 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.444319228 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.266699444 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.224189115 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.234293056 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.226933475 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232931767 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.225460717 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.217855396 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.265247058 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.224080532 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.435383791 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.231868332 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.226986324 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.271791813 seconds)
  done (took 84.167414554 seconds)
done (took 2449.67998555 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.260714862 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.246061318 seconds)
  done (took 13.635161022 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.140684518 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.141409779 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.292004549 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.141737676 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.168332004 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.202367172 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.191964714 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.151997166 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.141285072 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.229447113 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.141539457 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.277228553 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.241649496 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.141110819 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.136009272 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.153496074 seconds)
  done (took 40.036298743 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.272923423 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.696751828 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.02845102 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.910388967 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.174404956 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.829422228 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.449093632 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.891153657 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.451847825 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.5963955 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.408294812 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.072121733 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.056684063 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.33292899 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.616819502 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.6248772 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.687798901 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.745354855 seconds)
  done (took 60.97540698 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.13609872 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.296375181 seconds)
  done (took 8.574896147 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.138035993 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.148112529 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.158159331 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.150671435 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.148615591 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.154164856 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.155925412 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.163218693 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.144896842 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.164655116 seconds)
  done (took 62.676010433 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.133603783 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.804222111 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.558803957 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.577382305 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.788251235 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.636222167 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.327493756 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.488834141 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.23186411 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.130043228 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.448981371 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.631727377 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.998738633 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.438393019 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.766546247 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.387014484 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.867414373 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.510539903 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.475349156 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.539082588 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.406465189 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.305037704 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.600722514 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.903089796 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.136009682 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.719299462 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.392453721 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.272827981 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.229343432 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.308812155 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.544630606 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.158094281 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.487563858 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.157220646 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.347312422 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.794903038 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.883354865 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.345725281 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.617124436 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.488143281 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.569395246 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.864824599 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.211330221 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.8447877 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.305859777 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.532003656 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.075918909 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.368150266 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.224666108 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.264220676 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.718215004 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.313325784 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.273615516 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.261712702 seconds)
  done (took 156.809343286 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.128915907 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.354720488 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.302234833 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.1311229 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.548458089 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.352411047 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.970083409 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.528362948 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.133732311 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.349227765 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.308207548 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.270184239 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.132595664 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.132042317 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.132684569 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.133777008 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.317690699 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.540433598 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.137307932 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.131195206 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.348991176 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.379695214 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.265092479 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.132912374 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.299353945 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.380274118 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.524704702 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.271066744 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.515014312 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.13006156 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.532327588 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.136421228 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.132719524 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.036442886 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.504756625 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.456464601 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.502908793 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.131230041 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.871513479 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.132058291 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.77217443 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.338253521 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.460198215 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.278503284 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.290803082 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.369873374 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.776769588 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.129663262 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.890822784 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.312897658 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.360405817 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.357814216 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.415527169 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.137586878 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.596752582 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.133060076 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.131860181 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.392336991 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.285072664 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.266528649 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.133302742 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.132125542 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.133387308 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.379768576 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.132095664 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.242474235 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.132547073 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.133787057 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.244482839 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.266080828 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.286876019 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.384319962 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.378982121 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.077323168 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.492567142 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.371021427 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.514914192 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.36872497 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.132540394 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.132032636 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.520009982 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.567846593 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.296297123 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.374925442 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.448794958 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.42237452 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.683670982 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.130673436 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.362513317 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.305706116 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.364761116 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.288574671 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.499192354 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.026920597 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.132152519 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.131395409 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.362773147 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.265075594 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.133796666 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.638727199 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.403685612 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.212949906 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.308091579 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.617259758 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.244586955 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.134018887 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.721494338 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.131211533 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.354733881 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.437408173 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.140058711 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.130688738 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.294522191 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.86608917 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.130926638 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.263321941 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.511295429 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.139479164 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.296972125 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.13281218 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.388292931 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.985670966 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.369958686 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.132862665 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.409974039 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.322027094 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.288156528 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.133171802 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.483172544 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.405177527 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.540730554 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.372829167 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.984623506 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.133026067 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.451093105 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.132755638 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.131546537 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.312811737 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.110055702 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.312122303 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.134522877 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.398534188 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.296191617 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.518215168 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.132259743 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.386676777 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.383853298 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.499459139 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.131708215 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.272210893 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.131639944 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 1.998411549 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.302262986 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.131072316 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.134023898 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.990912765 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.135284273 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.284505878 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.367926012 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.821541681 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.505712926 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.49104926 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.130105346 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.57920294 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.333358862 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.397432379 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.628370988 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.308536453 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.133775259 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.122220696 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.131958753 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.376754736 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.327240377 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.133696508 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.134125779 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.87485288 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.250224692 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.132092122 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.319860995 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.402081822 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.577583971 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.349398652 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.133191932 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.502264944 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.133634906 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.343429773 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.633225786 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.53103308 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.131739627 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.132636373 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.132878986 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.133782242 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.346797826 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.387086002 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.802444606 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.287299584 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.439351889 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.349931886 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.459366758 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.597197287 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.143670473 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.371668459 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.133492754 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.526875793 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.137019306 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.300072414 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.390150465 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.136519401 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.45617292 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.500336081 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.332023504 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.529047281 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.134264917 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.134083865 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.957401391 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.313088668 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.581811263 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.132217736 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.257066261 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.500472525 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.26174224 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.343125712 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.388630516 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.120639101 seconds)
  done (took 733.100673641 seconds)
done (took 1076.940121493 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.129508433 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.13594973 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.140155624 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.138137967 seconds)
  done (took 25.673710767 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.140990621 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.238322422 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.324026335 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.144453726 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.540289777 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.20212297 seconds)
  done (took 11.728541752 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.129294443 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.135795318 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.142334451 seconds)
  done (took 19.537568911 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.437963857 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.653535397 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.309885356 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.238037813 seconds)
  done (took 6.779514403 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.162910811 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.164158891 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.144412212 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.164506634 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.143075505 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.143244781 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.177333871 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.161408232 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.143460242 seconds)
  done (took 11.539456734 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.638109975 seconds)
done (took 82.031460067 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.431321192 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.432502464 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.144768965 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.455822325 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.269182886 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.464360848 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.262330634 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.160217038 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.449518827 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.545102952 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.645093209 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.225340116 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.486694503 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.574888823 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.398521888 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.170872722 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.155842795 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.203235167 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.754165468 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.320306203 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.578954459 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.277663657 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.772893057 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.170112567 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.051641048 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.277718418 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.419769978 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.929782999 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.190019453 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.167365959 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.226489062 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.607795276 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.391334948 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.481868449 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.285153493 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.99897172 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.565371157 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.280719246 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.276560167 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.655343114 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.434748196 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.264083801 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.13097257 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.309706368 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.533887142 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.162172283 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.13377908 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.301833962 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.67974961 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.306399618 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.617926566 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.145924452 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.765530169 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.218963299 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.225305961 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.13163083 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.047325309 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.689472939 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.297016173 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.448757643 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.157701301 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.250347183 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.037595834 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.174954157 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.264605629 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.411328093 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.586149193 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.231135666 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.603382372 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.172104734 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.153656672 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.166891513 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.828837218 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.286412698 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.130640536 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.299172161 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.43957288 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.294752562 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.140332679 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.288681399 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.374643395 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.133089332 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.2829324 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.45707478 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.30712756 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.505885107 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.631502495 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.484288128 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.525925466 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.9379581 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.701598422 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.992186971 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.245434431 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.190868514 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.50537805 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.259663269 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.41650158 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.653756218 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.281154749 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.682989461 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.173008509 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.152004171 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.46740983 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.446788842 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.937708753 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.176231367 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.254870065 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.130201374 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.443464261 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.852056178 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.243202786 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.699498748 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.145551888 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.206552004 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.648395077 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.147575816 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.476457638 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.584644174 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.204284072 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.139621558 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.440539846 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.146398812 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.263623679 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.688153373 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.51149182 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.357042978 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.136374159 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.34561111 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.145979584 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.357992699 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.148708882 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.731707876 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.677288579 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.17624754 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.394579156 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.266554234 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.130830419 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.498618355 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.193261733 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.367202229 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.445526121 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.450423144 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.263401093 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.130974528 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.494114501 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.144970294 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.387244627 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.486607772 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.30813929 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.433046253 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.269719732 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.159260832 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.094277835 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.528509192 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.768319798 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.709770801 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.414462235 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.276282953 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.635183133 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.495275553 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.996707256 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.235459086 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.193961923 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.145453468 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.163611385 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.204076781 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.132705788 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.143259756 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.439661072 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.37287432 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.640961721 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.952875566 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.043991224 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.440526846 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.295772295 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.037982511 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.737593975 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.150296102 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.45255742 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.656011799 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.264161364 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.171101838 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.134356354 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.195851607 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.889387642 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.177401957 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.41942323 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.640413847 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.449191774 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.49679558 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.372458484 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.181104967 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.489714933 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.420337427 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.464219149 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.357064464 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.518849249 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.284210031 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.479690569 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.205849668 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.467598532 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.144216952 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.206412235 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.38407943 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.64559631 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.528356803 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.371364066 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.311796184 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.452505125 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.145752989 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.354790209 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.243040844 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.523455791 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.166167209 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.34104811 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.24498263 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.575323289 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.034953515 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.262466573 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.435165034 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.296369078 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.300155775 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.66145378 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.156549196 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.448103942 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.305767267 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.334145025 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.37834611 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.175163315 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.271630472 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.338769133 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.276345252 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.397317936 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.979654798 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.463729342 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.65354945 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.274837481 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.132315789 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.615032496 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.170222723 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.154402628 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.417166663 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.293053473 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.450439302 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.361434851 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.312255092 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.247011017 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.17606558 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.638342324 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.026494789 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.733133324 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.135641758 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.173952039 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.131134542 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.543212532 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.546241297 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.210641095 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.279153292 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.727805097 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.179977398 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.303154631 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.148166102 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.148139188 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.88640489 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.277634867 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.387578514 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.636138576 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.148276352 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.393175229 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.205179827 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.566218112 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.671812384 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.197241817 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.268183363 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.411121921 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.140480544 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.514639118 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.168156617 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.32405222 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.519802605 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.266087107 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.253256372 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.13473122 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.180284066 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.695300881 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.401268717 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.622715931 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.174071067 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.480246582 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.255531581 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.37897 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.161627534 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.270093382 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.475919398 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.301850889 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.489612574 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.148887179 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.305810118 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.394632167 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.162300811 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.171946952 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.283032676 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.692905901 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.572760106 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.429063344 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.301763659 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.12010934 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.387231794 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.143751752 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.808884923 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.285356087 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.249620846 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.769764871 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.623418081 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.146397356 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.339802106 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.135001057 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.509616507 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.173914028 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.153282058 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.297107946 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.22704506 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.132161327 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.766646214 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.329136644 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.615924266 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.237955637 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.016805331 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.174760431 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.321182518 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.255427606 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.420651441 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.833735485 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.161879147 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.280552464 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.813446873 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.328948068 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.17722973 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.423836157 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.149196971 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.759098125 seconds)
  done (took 877.179678634 seconds)
done (took 878.492130893 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.329149331 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.511019526 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.382623713 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.01041401 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.941753816 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.782575991 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.399717832 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.371521461 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.215223426 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.394293778 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.079707677 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.939308766 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.233163711 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.255361648 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.23589688 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.275657569 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.349240192 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.377181952 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.255525362 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.082149789 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.654452272 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.083617943 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.55534192 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.434432029 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.510109118 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.243489624 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.388175253 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.571952168 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.569561816 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.32575295 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.329941079 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.414804539 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.973297879 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.375470024 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.237446186 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.220656979 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.009395419 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.232235673 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.335168831 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.223108347 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.514635707 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.259101588 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.85556651 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.098402961 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.916514605 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.558628367 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.981091211 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.243345254 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.274211057 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.344036212 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.334674371 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.34072778 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.571802776 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.348591069 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.030313977 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.101379072 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.570963106 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.012508664 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.862130593 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.344953592 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.535093982 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.23603993 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.34474488 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.369060097 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.256960884 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.426961908 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.552121733 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.336975332 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.413955669 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.40192301 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.384047892 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.363496812 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.252890227 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.273361941 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.278837639 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.397544629 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.979940566 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.379121637 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.929068907 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.245627077 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.012994145 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.005852241 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.093037758 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.217495581 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.328489705 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.912511093 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.973510482 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.014776962 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.254417348 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.413707394 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.06924954 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.38082003 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.596375028 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.388807747 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.328774646 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.378739081 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.985275209 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.328651717 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.293610578 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.413997914 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.920559047 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.38888915 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.126798624 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.23608518 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.243082588 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.339983178 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.388655202 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.562119417 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.364040597 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.298384795 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.514683312 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.277992495 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.363317256 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.25651497 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.215056279 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.917204691 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.416340525 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.019489305 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.33025094 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.811137294 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.418767495 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.236655919 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.513833621 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.434765892 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.328985982 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.232970056 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.243542507 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.006453916 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.241425569 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.2363969 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.318286975 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.590634529 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.343426545 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.014091285 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.365095575 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.037903772 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.37614532 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.364066842 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.214634883 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.975177381 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.233064143 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.278519625 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.434148162 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.514343005 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.379856477 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.434406633 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.25518596 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.412666248 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.328802175 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.256180061 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.364740818 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.268051413 seconds)
done (took 250.227110414 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.511380085 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.311375244 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.437696162 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.427910097 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.513707504 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.52380369 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.208167037 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.592174677 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.252038234 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.55714397 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.386497285 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.038164422 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.294286921 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.34185946 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.515016742 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.386408138 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.254020088 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.403673591 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.589303734 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.494434111 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.924043106 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.386302145 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.290203767 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.562934499 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.133915144 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.906162788 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.49646781 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.27106638 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.406729229 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.91622062 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.946337388 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.408273877 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.497834186 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.873512564 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.588614148 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.861275054 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.516777737 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.959602566 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.508493201 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.507829312 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.439949087 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.001322641 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.92868333 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.925429961 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.298337292 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.497910646 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.205544651 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.074372046 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.133721481 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.868661347 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.40530967 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.943667816 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.01357566 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.470653811 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.339203089 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.798383567 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.623527129 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.632850536 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.496400108 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.445537561 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.510850472 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.562632887 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.559400023 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.333529206 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.935063715 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.436304662 seconds)
  done (took 150.016915032 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.570126075 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.430905284 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.578204094 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.630771584 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.707066045 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.600405921 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.698654964 seconds)
  done (took 14.350628723 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.203237438 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.190011484 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.432317696 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.434477233 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.194508859 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.315688935 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.277730211 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.938656875 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.41309254 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.23169381 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.507774434 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.434905171 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.844230513 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.910334908 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.278464269 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.53324113 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.158046971 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.256838295 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.249432642 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.450831992 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.944123175 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.919720992 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.384033172 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.277669252 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.193367459 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.230458201 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.188657046 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.160634787 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.229665463 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.170069451 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.198485137 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.301942887 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.186606332 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.883367881 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.212380132 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.510052861 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.196442469 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.23648369 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.325264002 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.135215546 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.178758364 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.194116693 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.324203885 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.201451485 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.171111776 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.379582512 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.175885187 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.198468566 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.175673075 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.189005833 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.381274279 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.184761083 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.21168999 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.857531393 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.400135618 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.920348139 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.256552654 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.182250974 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.189899068 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.243147752 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.185624034 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.447489078 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.406778992 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.176844398 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.432081604 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.467886867 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.183404014 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.169890013 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.174856941 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.408136688 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.183765164 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.382985084 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.191090803 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.237345677 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.238218639 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.326297268 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.380065417 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.985731692 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.95274603 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.833788634 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.159598059 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.173103249 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.525403367 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.123786399 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.859841491 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.175403833 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.236715818 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.850009547 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.11147575 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.190657486 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.499047048 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.17283 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.243042061 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.239249071 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.216475564 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.248977944 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.411846177 seconds)
  done (took 155.680410275 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.372018332 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.786941935 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.421518554 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.19530084 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.29861469 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.494961532 seconds)
  done (took 15.701158005 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.462051399 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.985654057 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.20861774 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.207651108 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.243301459 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.184149863 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.183983788 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.351485915 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.312117439 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.197094304 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.185540273 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.207049171 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.187789763 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.324312823 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.189067835 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.194623019 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.183426295 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.207146995 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.194355276 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.25382846 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.494688026 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.245301672 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.252610636 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.068344054 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.230975313 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.198269544 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.252712882 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.194368578 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.194681375 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.530114617 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.388648088 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.184070245 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.014896194 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.49136309 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.944104296 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.079435095 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.321044546 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.210395639 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.247860054 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.184995953 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.206982046 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.255718188 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.209899375 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.205692226 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.528995964 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.983053259 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.256744976 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.48526636 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.183911576 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.206616682 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.210355768 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.219247846 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.184540646 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.208004565 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.760270852 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.595774224 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.157541799 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.192095699 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.244282443 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.083798689 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.254461081 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.189618016 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.565259839 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.121041884 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.885221049 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.20774947 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.090527796 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.311889051 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.257473793 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.206400041 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.207558584 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.211601213 seconds)
  done (took 120.277797516 seconds)
done (took 457.165410727 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.168995489 seconds)
  done (took 7.302151472 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.24650012 seconds)
  done (took 7.527689306 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.135574179 seconds)
  done (took 7.281979185 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.156270277 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.186810032 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.158646367 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.167835658 seconds)
  done (took 25.854020277 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.251289849 seconds)
  done (took 7.389407896 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.132350751 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.158833518 seconds)
  done (took 13.532754408 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.33550867 seconds)
  done (took 7.496197401 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.486102981 seconds)
  done (took 7.634575762 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.137012034 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.165349664 seconds)
  done (took 13.474720324 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.132832882 seconds)
  done (took 7.267006577 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.601986835 seconds)
  done (took 8.841490376 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.135366005 seconds)
  done (took 7.313555379 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.141202549 seconds)
  done (took 7.275381201 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.234801816 seconds)
  done (took 7.369538061 seconds)
done (took 136.697648902 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.132419021 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.144245974 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.138284969 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.140486901 seconds)
  done (took 25.68775129 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.469823884 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.468229667 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.446635661 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.619171863 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.41451165 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.412802697 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.469152483 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.469143892 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.412401095 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.51685554 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.4683792 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.512553058 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.619678758 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.446319536 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.447842587 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.514993934 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.52049927 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.46899791 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.414121344 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.447085579 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.512082506 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.519141668 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.886253314 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.881415891 seconds)
  done (took 37.496781401 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.354632502 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.58895273 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.301887172 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.464581169 seconds)
  done (took 6.842947222 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.180703042 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.519055924 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.503152406 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.561446092 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.501831638 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.314986835 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.501891827 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.355644178 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.292972179 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.323886005 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.768549663 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.295445027 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.309770142 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.56071367 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.3155941 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.144839173 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.143898793 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.325669038 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.519134701 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.344823567 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.410389862 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.501050933 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.502869249 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.502325314 seconds)
  done (took 34.833489197 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.902072294 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.074248432 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.501812415 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.196888008 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.860749013 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.942140468 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.423238724 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.655572814 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.412440384 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.387488815 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.888082969 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.876612191 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.28860757 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.038257241 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.90367569 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.320385639 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.322761988 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.997324605 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.748218177 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.442901938 seconds)
  done (took 39.316472849 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.131825028 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.389712314 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.365222021 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.312641228 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.132259259 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.139876258 seconds)
  done (took 26.606068116 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.201548001 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.292025328 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.468501925 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.424624429 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.309510461 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.284286221 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.819495278 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.37022361 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.915301279 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.948781185 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.802010799 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.605995276 seconds)
  done (took 22.582222536 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.134191938 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.186222945 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.143436694 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.32095562 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.970644538 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.999460438 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.461223229 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.134806745 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.222997393 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.340945335 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.005121605 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.31075504 seconds)
  done (took 40.385170224 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.348458604 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.404483614 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.468314853 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.99126193 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.679594999 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.238781442 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.568929625 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.650269952 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.20952249 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.992168655 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.682639617 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.204363571 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.666673908 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.108190504 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.135393665 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.444082394 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.959588552 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.134640536 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.585757647 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.220790008 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100110036 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.290003647 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141855762 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.686587844 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.470395273 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.138032292 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.347044976 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.382285786 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.132575071 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.375694871 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.134454527 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.615148118 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.335457106 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.443750821 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.669636857 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.236400645 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.25375406 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.277206035 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.723617908 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.430694665 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.279879329 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.298245686 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.664190766 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.35765828 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.39362864 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.971769141 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.140247908 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.78638348 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117880169 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.270838369 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037308051 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.015631948 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.462260815 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.160480203 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.278801149 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.442069702 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300826964 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.279588845 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.441044924 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.181538577 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.342295565 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.256402375 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.347736662 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.104911697 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.644602542 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.489661705 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.513069708 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.469440798 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.435967559 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.473578914 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.497316386 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.26863205 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.96712571 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.273419442 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.671792387 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.048911608 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.488691999 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.136773453 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.8677753 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.670548951 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.115091471 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.249784837 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.85734119 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100471827 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.133711093 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306266683 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.371509271 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.10677129 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.229018379 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.200813353 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.545090691 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.273445773 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.289872498 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.402925355 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.836002719 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.148435716 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.883751295 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.435644935 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.106357879 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.698408976 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.133012547 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.113327481 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.135375614 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.707599164 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.536445621 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.188380176 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.896374164 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.84022266 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.471971484 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.781595693 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308855556 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.970967854 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.497095608 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.465335123 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.133199135 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.82498912 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.290099213 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.273464313 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.50143081 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.133892144 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.106061193 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.543310958 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.335007128 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.138970825 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.366261537 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137167206 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.284631495 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.133444981 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.95852712 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.407403093 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.379560756 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.673254476 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.468088191 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.231085702 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.104639836 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.27938555 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.643872832 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.234523953 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.481344558 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.5819201 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.745187038 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.615826229 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.129729518 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.986276004 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.624721314 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.412060193 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.474824839 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.749892759 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.313542543 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.228739359 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.133560425 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.307668176 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.147036095 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.688844744 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.133596353 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.908436427 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.205931648 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.447864634 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.134084961 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.117614562 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.903715645 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.380716412 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.812400711 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.194814437 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.301503055 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.405209772 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.404246206 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.134583797 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.107600021 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.496961278 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.402991102 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.665483754 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.402789484 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.794536909 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.485432337 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.651636748 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.343964964 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.504120959 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.896346713 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.659123435 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.472332999 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.37454809 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.161380761 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.134858521 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.19817462 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.569036126 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.364607674 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.907214681 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.89111912 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.862254817 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.187923852 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.715279814 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.105086215 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287132403 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.598554115 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.172364986 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.702801873 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.287194071 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.326768916 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.452462245 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.169356453 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.483086768 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.965222399 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.543007099 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.524523985 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451151149 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116574579 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.525154079 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.722817698 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.657527107 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.284797429 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.353161831 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.117741173 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.1998416 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.134713384 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48356497 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.169368686 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.791069536 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.493372113 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.952428529 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.803445097 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.294186348 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.671789182 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.148666137 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.337175488 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292170423 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.175542352 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.314287152 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.682489802 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.405627494 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.465277044 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.133716413 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.140342104 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.398272613 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.445592892 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.398118421 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.642506675 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.756524196 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.830757459 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.24816099 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.853589429 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.303349017 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.169113103 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.693316473 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.480765024 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087793957 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.324821428 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.80040902 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.274278338 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.318764474 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.424476899 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.135029337 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.621666531 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.761396929 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.136588901 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.133619067 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.287402435 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.135311714 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.445920192 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.900672961 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422158886 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.871341476 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.426330843 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.389221066 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.324448969 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.53018751 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.669116757 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.923068482 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.10775211 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304571589 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.217886204 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.468023492 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.136424998 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.425373245 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.806878832 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.814211559 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.951889622 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.686500358 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.374109975 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.802854581 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.612299448 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.393838972 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.45407508 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.094860264 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.761632138 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.121881213 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.276733161 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.104783298 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.93507379 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.470151013 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.524957089 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.624516147 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.209854015 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.672600295 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.561941861 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.198267137 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.296644347 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.39496776 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.133844865 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.501260976 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.134365012 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.855153685 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.552487746 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.134565159 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.302428878 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.33347906 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.470761675 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.300815883 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.805590469 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.182425307 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262801392 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.607361107 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.314027854 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.275551091 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.474949887 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.962892449 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.183135 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.181442687 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345690403 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.765941975 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.62122062 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.749645355 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.718683484 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498000762 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.892206101 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.136203203 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.347052609 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.308187331 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.493971593 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.33160923 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.527543494 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.175033125 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.349714552 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.451066257 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.288368481 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.696095115 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115563496 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.739225032 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.358623449 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.653504143 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.698244444 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.913441255 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.624381672 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.966297818 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.685171072 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.115935559 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.303746263 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.363707893 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.873799254 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.577533362 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.983090731 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.930148675 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.29203264 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.577169995 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.22323147 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.929916911 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.302313122 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.371442356 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.34493686 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.273946623 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.103614842 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.715763741 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.91698852 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.413719085 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.300415201 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.323505448 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.26480274 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.102406313 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.661900859 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.447802347 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.892187146 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.623007518 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.388607038 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.10594892 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.135379606 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.408678813 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.320374043 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.23124155 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.473470749 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.576678126 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.18053045 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.163452499 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.945377511 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.69633436 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.908496737 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.858222451 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.470425297 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.662461143 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.743615802 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.135685117 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.893873834 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.345475989 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.497001543 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.536457387 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.055989845 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.567544308 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.468368748 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.298532538 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107891939 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.327100194 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.141619942 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.083471704 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.968441534 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.439711885 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.20657145 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.053140451 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.767218322 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.902905897 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.182062645 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.373669552 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.36199129 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.335247174 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.134617814 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.712587397 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.559863766 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.303606553 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120611311 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.899185502 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.106193256 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.346632974 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.915079469 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.349392494 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.96513571 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.213712565 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.814906853 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.681832497 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.983034728 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.347757715 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.10762645 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.205586888 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.160701449 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.809628487 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.949702671 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.3858077 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.658018277 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.324692432 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.141105361 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.464678176 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.273459282 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.449567615 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.521742019 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.632876354 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.561649259 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.49600098 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.433028474 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.599413405 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.291549821 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.379441339 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.106614816 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137807336 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.165792919 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.511197214 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513043352 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.13433542 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.701611416 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.383594748 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.28166221 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.320843929 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.245012703 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.701809173 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.346495769 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.28302402 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.314075745 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.37609316 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.509830737 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.135641799 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.349551698 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.137184941 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.153019889 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.350861536 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.386218919 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.518748249 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.450415842 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.736944555 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.300279321 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.624224846 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.108797379 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.668053112 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137590519 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.278714511 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.542584669 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.134951779 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.62467577 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.786782637 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.326727873 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.832051353 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.244729912 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.118657237 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.338580549 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.656225162 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.148768419 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.79588619 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.582928855 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.136507326 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.619444621 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.220582023 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.311664772 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.915157196 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.633687877 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.137477603 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.933769169 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.298604991 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.685033689 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.412688105 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.262491665 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14884344 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.981242225 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.113717056 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.138844174 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.238925114 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.669154223 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.154641591 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.725663401 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.290375276 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.310288834 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.147458748 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.279301912 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.13821067 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.34631028 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.327186564 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.382892564 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.411163552 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.324735673 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.145350697 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.746471312 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.848560267 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.226507489 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.3520186 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.096031207 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.523272517 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.012137362 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.097169987 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.715156415 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.408774326 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.352493112 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.57815415 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.397072491 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.177965336 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.348439706 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.135612635 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.41241732 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.297469247 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.706598101 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.404076341 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.145788316 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.450879481 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.166748481 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.692089827 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.623752607 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.026021045 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.134787472 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.448563989 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.134963052 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.218801941 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.771073108 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.335182285 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.277159961 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.389917459 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.731971626 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.455592177 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.273595058 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.139981394 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.351947086 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.647363295 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.107503674 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.208613994 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.027693725 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.361078333 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.465949662 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.10509985 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.327018224 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152263049 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.119327794 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.636615951 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.136458878 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.519624212 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.107080355 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.677547329 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.116453983 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.249554099 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.308574771 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.488664577 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.135922735 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.85714608 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312452201 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.135213032 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.136487329 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.504259843 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.232688143 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389699394 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.616079162 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.399486278 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.487822139 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.03227232 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.215615573 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157501803 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.447899492 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.972623514 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.695145595 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.24961532 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.671847338 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.228493715 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.158316634 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.693577865 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.384279315 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.876659428 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.284511715 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.619636976 seconds)
  done (took 1958.355671811 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.229450445 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.241027808 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.158353374 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.195062685 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.316894903 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.3159628 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.188739913 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.18476797 seconds)
  done (took 50.967429482 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.13429476 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.123858258 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.621784151 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.326356263 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.171290502 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.377641273 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.303302382 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.68033772 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.346209808 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.248917944 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.207719433 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.223012227 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.148942182 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.185518862 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.062883339 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.230342456 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.141139904 seconds)
  done (took 91.692291973 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.169981523 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.63615418 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.178776379 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.247764222 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.224365742 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.565888139 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.156104358 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.140355755 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.597740299 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.81229849 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.160294692 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.294606066 seconds)
  done (took 82.368247916 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.174798506 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.176953121 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.174736824 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.173967917 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.174654224 seconds)
  done (took 7.012318332 seconds)
done (took 2425.316916118 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.365038286 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.667892483 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.705553854 seconds)
  done (took 4.509415447 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.209792619 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.270863607 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.338135117 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.284657084 seconds)
  done (took 6.267098814 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.43855916 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.622108508 seconds)
  done (took 4.196547957 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.5994305 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.156022029 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.690958386 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.137710909 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.147052948 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.145396262 seconds)
  done (took 19.585039752 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.171380764 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.171498853 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.17064304 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.163232602 seconds)
  done (took 5.822689151 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.136605077 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.162076568 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.147148316 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.144320585 seconds)
  done (took 18.725349901 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.510438628 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.385458658 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.898754784 seconds)
  done (took 5.943402148 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.955864857 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.519304827 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.999044284 seconds)
  done (took 6.608915187 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.094489282 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.063595399 seconds)
  done (took 5.29491717 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.297274521 seconds)
  done (took 2.433376252 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.646112201 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.628322652 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.006045245 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.017252074 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.173713857 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.470559441 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.461727833 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.433855066 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.823526983 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.654819767 seconds)
  done (took 18.451928192 seconds)
done (took 109.788582012 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.018400675 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.554123228 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.300794825 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.32947731 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.238741992 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.296964195 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.221552669 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.103025914 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.446692823 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.449909221 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.35174846 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.239336783 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.249075736 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.540595088 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.250899831 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.491529639 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.297297535 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.032745038 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.77422343 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.361930875 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.234917136 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.442957593 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.049829102 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.457849264 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.311054291 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.283140794 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.981719431 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.505754302 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.027293735 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.995007224 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.298025544 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.626627059 seconds)
  done (took 151.899310316 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.135758377 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.152134559 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.153600076 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.146888883 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.025845035 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.156694818 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.149501282 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.146231739 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.825063042 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.815643854 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.152637174 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.041209193 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.157559779 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.149338881 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.156150401 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.146833359 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.938027592 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.153982167 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.151759094 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.152108873 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.152125948 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.771564874 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.155209911 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.782395793 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.93511294 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.155211069 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.147745216 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.153557001 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.15267974 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.152304917 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.156908081 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.147145735 seconds)
  done (took 187.923393825 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.135176877 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.151146193 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.153255082 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.147389173 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.151327568 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.155006056 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.150703234 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.147834071 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.153325542 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.154402675 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.152366185 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.151878642 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.154551856 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.146788791 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.153478487 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.146909551 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.151910365 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.151488762 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.151277451 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.152615167 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.151978127 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.14796439 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.152156246 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.151212696 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.152272288 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.154294609 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.147439783 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.152138505 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.153339297 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.153025923 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.154241557 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.148468912 seconds)
  done (took 197.985393887 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.446069724 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.178709602 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.102776196 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.888166273 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.029168239 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.170191328 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.888924541 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.4467438 seconds)
  done (took 14.303189604 seconds)
done (took 553.265203359 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.807148657 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.063633665 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.332261552 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.40202978 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.748098938 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.442341188 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.398761609 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.633545387 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.887809476 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.609681192 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.618573372 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.35927746 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.961335027 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.41752212 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.338445444 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.627044307 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.549986822 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.84977874 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.352598585 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.028984135 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.361945387 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.005525975 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.63215285 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.93446445 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.621867272 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.063069418 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.236798249 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.554498116 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.406637091 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.354783605 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.197541861 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.519474411 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.378329014 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.373311286 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.610026539 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.613310679 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.467101012 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.592893561 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.323522432 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.812141564 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.02093846 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.751547585 seconds)
  done (took 76.396956323 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.168177881 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.194370798 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.3310472 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.244560714 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.81481707 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.245960267 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.410854353 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.417196564 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.265120349 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.390233728 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.425941111 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.824980816 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.412118706 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.798800928 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.403790149 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.432992872 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.250100372 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.77551989 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.404237371 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.383877142 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.212462229 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.333162107 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.211153654 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.357123316 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.202466607 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.220014501 seconds)
  done (took 37.29814905 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.220195274 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.31857397 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.444519378 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.549010932 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.404608464 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.192037171 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.507096864 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.336111206 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.061025547 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.375000176 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.275187544 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.275292815 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.347627585 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.477967899 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.750427127 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.342385049 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.377812309 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.340676609 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.327802657 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.379261352 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.310046318 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.256833385 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.516277611 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.350901983 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.858732315 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.489954537 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.511217863 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.822137503 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.71967928 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.334706516 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.300589512 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.491213799 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.559250137 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.453266643 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.320093221 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.192041506 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.1979908 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.27469869 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.234978395 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.35347418 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.507317433 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.334484275 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.582546313 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.761147864 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.225092837 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.428367169 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.671672526 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.283255415 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.313176114 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.980569014 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.496781599 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.185099831 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.338980469 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.390625245 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.295467732 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.603769088 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.376519502 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.492367334 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.357264866 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.707861551 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.25799479 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.566387385 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.329772447 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.219080392 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.475554344 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.39385415 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.331625776 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.556185867 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.581772641 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.64519832 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.78027147 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.255341607 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.21464668 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.27388942 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.323688926 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.710058479 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.607976725 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.417804859 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.577818471 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.499084927 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.734764342 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.675666108 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.152295596 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.863410617 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.244242241 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.186811607 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.266015863 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.487333287 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.492198607 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.695323556 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.767395653 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.5156611 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.51297486 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.600875104 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.554088886 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.623092227 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.173619367 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.197670973 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.429906068 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.774997629 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.259727363 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.458109747 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.888255819 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.689733118 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.409192762 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.441340044 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.623713384 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.220957278 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.60257135 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.17216152 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.384273375 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.519811102 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.44476977 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.535805421 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.168977102 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.739469282 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.298971451 seconds)
  done (took 233.146434195 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.135989439 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.152791764 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.138786051 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.15484223 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.138395637 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.756024946 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.216475888 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.140121096 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.756355648 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.217254651 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.141595774 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.141650337 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.140020143 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.138056967 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.746097337 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.717413273 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.790050762 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.137235275 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.138844318 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.148049689 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.851357722 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.141273075 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.138011486 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.148791682 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.13797869 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.138915054 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.147679782 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.197503041 seconds)
  done (took 153.090342082 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.193024814 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.579549219 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.240496945 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.289282591 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.242019775 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.209015193 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.709154912 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.347202587 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.274366846 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.210585738 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.205077952 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.425176202 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.452842473 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.80782295 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.337603282 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.322094789 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.87112289 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.35775982 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.210046546 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.204575201 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.359684832 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.54999219 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.491011395 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.474054409 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.360772478 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.471143806 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.280070238 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.202056858 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.327524748 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.702138392 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.223057562 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.575536807 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.349042983 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.211912369 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.720658881 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.551307382 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.787755595 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.763159926 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.393026977 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.166710986 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.163031942 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.436444471 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.512761779 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.254367573 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.201932923 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.866532654 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.226388628 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.610263076 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.240460036 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.163610793 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.306115515 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.316577742 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.473023583 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.182275542 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.374095305 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.379663685 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.705731676 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.187374728 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.270790011 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.501276366 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.18299357 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.698022894 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.692457244 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.262495306 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.216437216 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.060349654 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.288695207 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.728188603 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.826206952 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.254845095 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.541482257 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.387161957 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.180168592 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.463937621 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.396012733 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.643360328 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.782300449 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.337738159 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.304511553 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.280657498 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.480688975 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.195306524 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.748709993 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.303448152 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.178955024 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.701063075 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.593780681 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.180607574 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.193741566 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.31438099 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.37210373 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.417912886 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.478610568 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.271113167 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.095904501 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.462515922 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.517660969 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.224585226 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.330141346 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.195096858 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.594403198 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.386003919 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.186307073 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.520256659 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.600413529 seconds)
  done (took 160.037030311 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.908740665 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.258430594 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.45860193 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.734408899 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.542995301 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.62642809 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.422802635 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.280228763 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.460702248 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.413119145 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.431223456 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.289181215 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.160385601 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.955751503 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.255441998 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.370854036 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.270139112 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.851057292 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.535164377 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.182340706 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.500649879 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.937893938 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.513458998 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.603120848 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.583255156 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.687084966 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.846612545 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.348205432 seconds)
  done (took 49.578944682 seconds)
done (took 710.687878647 seconds)
SAVING RESULT...
DONE!
