cset: moving following pidspec: 4147611
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.929366504 seconds)
loading group "shootout"... done (took 0.858577639 seconds)
loading group "string"... done (took 0.241196125 seconds)
loading group "linalg"... done (took 3.301309273 seconds)
loading group "parallel"... done (took 0.024242418 seconds)
loading group "find"... done (took 1.33580182 seconds)
loading group "tuple"... done (took 0.816371714 seconds)
loading group "union"... done (took 3.380874583 seconds)
loading group "dates"... done (took 0.1594473 seconds)
loading group "micro"... done (took 0.060620679 seconds)
loading group "simd"... done (took 0.378345385 seconds)
loading group "io"... done (took 1.485793884 seconds)
loading group "random"... done (took 2.952655597 seconds)
loading group "problem"... done (took 1.337185813 seconds)
loading group "array"... done (took 5.287990689 seconds)
loading group "misc"... done (took 1.135644969 seconds)
loading group "scalar"... done (took 3.78315181 seconds)
loading group "sort"... done (took 0.342421813 seconds)
loading group "sparse"... done (took 4.014453226 seconds)
loading group "collection"... done (took 6.598234974 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.561264969 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.075792777 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.269189917 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.083394463 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.288359514 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.085549579 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.094866738 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.07450198 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.076642552 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.175924855 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.232457258 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426495117 seconds)
done (took 5.234199481 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.274528936 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034532288 seconds)
    (2/2) benchmarking "String"...
    done (took 0.134625395 seconds)
  done (took 0.849839316 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.145649558 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.017652301 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025835297 seconds)
  done (took 0.862699039 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.023256232 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.105123393 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.024481688 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.025336609 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.024917487 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.023992353 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.024176527 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.023832998 seconds)
  done (took 0.925846382 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029487932 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025437362 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.023603868 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.025378951 seconds)
  done (took 0.77451286 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023228814 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.088699939 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.022927544 seconds)
    (4/4) benchmarking "different"...
    done (took 0.023058764 seconds)
  done (took 0.830133 seconds)
done (took 5.228062352 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.210428156 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.815002727 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.006674399 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.189869902 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.37508559 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.316098613 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.081616555 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.252251144 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.156087366 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.034650422 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.188826975 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.042575707 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.633549129 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.467853916 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.030870308 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.1515327 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.589123631 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039561204 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.07213692 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.264444508 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.042777513 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.043923948 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.050402832 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.030384914 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.189837078 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.14491137 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.602978543 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.070003085 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.03049076 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.143526649 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.030205554 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.032972582 seconds)
  done (took 10.0463364 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.151829309 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.149007322 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.025264929 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060839749 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.052174465 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.026225024 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.035429968 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.027044718 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.049448767 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.099464652 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.052368027 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.168250314 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.023797953 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.026752546 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.146398653 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.12725733 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.041712104 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.04360964 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.026849059 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.044147337 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.052876259 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.036178272 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035341734 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.034745491 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.077093381 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.094619842 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044522437 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.073274558 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02327046 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.037062616 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.054324304 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.065515937 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.024249398 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.022657086 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.068900632 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041995012 seconds)
  done (took 2.858641493 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.068875574 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051239284 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.141719925 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.132298931 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.064451675 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050946073 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.182310016 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.083157221 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.059258938 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026299133 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.217659885 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.661493761 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.173322048 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.096366979 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028752936 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.189938352 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.921842778 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.955319335 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025141349 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025801798 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.140640034 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028660056 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.187227356 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.023655185 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.142500934 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.853429944 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029671278 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028069763 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.060905239 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.158094239 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.024121184 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.109467034 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.057148143 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028660539 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.589426561 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022674697 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020857249 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.043895711 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.055250136 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024929424 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.025587303 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.037173921 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.024152018 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.079281469 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037045514 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.546895398 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027217775 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.710458499 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.86937857 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.034285356 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.031712143 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064962802 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.023180117 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027038226 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.619366667 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.115344624 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.026434352 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.275624798 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.027100233 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.028472339 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.029028613 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.064810008 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.0279314 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.028822097 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.03138948 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.047001028 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.058022993 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.03444199 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.047485454 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.02406921 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026654236 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.024923555 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.431951038 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.031940013 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.0293874 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.024390231 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.031226066 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027012407 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02657097 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.071289443 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.052995706 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.053473373 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.030646925 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027664951 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.026412348 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.556504275 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.117636518 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02639698 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028121612 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.543513337 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023775128 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026061651 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02848226 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.048942917 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.027492621 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.023968864 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.064048032 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027788472 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.140182562 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.50589512 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.027326719 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.024042758 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.748529232 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.0279686 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059071998 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.085807418 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02725933 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.067453878 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.026947982 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.023777972 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.032026718 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.024130797 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.029411882 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.025895446 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.026885959 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.025483602 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.026535776 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.028076661 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027283192 seconds)
  done (took 21.059121689 seconds)
done (took 35.706977391 seconds)
(4/20) benchmarking "parallel"...
done (took 0.855075957 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.222409166 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.052910823 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.021743001 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.173184862 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.047937004 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.14461149 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.189222059 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.134415211 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.048723374 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.048660593 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.049145237 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.191522302 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.204397533 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.050165249 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.126471474 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.202860459 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.050455966 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.021415261 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.049016252 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.049692364 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.049629641 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.021153061 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.049164308 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.049240104 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.12263556 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.048936839 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.021279756 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.131823339 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.052837666 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.135829355 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.052876372 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.052250707 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.052772017 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.134488454 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.054229467 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.133877892 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.02408047 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.05398565 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.053503378 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.054199536 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.053664966 seconds)
  done (took 4.272625649 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.050175643 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.04423398 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046871032 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020668308 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.032289494 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044446866 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.021032062 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044435006 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.048604265 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.043258532 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.044298818 seconds)
  done (took 1.294358322 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.043542489 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.044122209 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.047473397 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020665515 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.032814792 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.045242994 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020976177 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.044859697 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.04752648 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.045415271 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.045680345 seconds)
  done (took 1.221146143 seconds)
done (took 7.561087753 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.16431761 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.131070974 seconds)
  done (took 1.071414388 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.604825584 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.250902626 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.142207318 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.267673951 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.135952324 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.168011837 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.760754643 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.178723871 seconds)
  done (took 8.349225457 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.09406508 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.165027558 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.031200595 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.028615581 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.028930853 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.028795214 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.031013382 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.029652225 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.028619172 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.031187856 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.030425176 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.028860218 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.029693204 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.031049852 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.028927816 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.029736897 seconds)
  done (took 1.700098609 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.032011746 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.030797573 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.033666331 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020906241 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.034166089 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.032531451 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.034667259 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.035737144 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.034001539 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.033639821 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.031779749 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.034995593 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.032836724 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.031468152 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.033747747 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.021051961 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.033973061 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.033715848 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.035727213 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.0343123 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.033341587 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.030135203 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.034697101 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.033271911 seconds)
  done (took 1.657534089 seconds)
done (took 13.571318661 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.162919879 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.036637523 seconds)
  done (took 1.061347306 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.147486223 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.146776119 seconds)
  done (took 1.171213862 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.031459127 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.019435152 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.037241111 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.028274336 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.020064249 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.019628776 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.036144874 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.019951662 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.019659266 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.019534342 seconds)
  done (took 1.138991697 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021215456 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.026948607 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.02510369 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.023341636 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.0248412 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.020565409 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.023137395 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021122782 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027168496 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019993546 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023577158 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.046645501 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.024004123 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.047016444 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023807392 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.024431789 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.026527283 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.023896739 seconds)
  done (took 1.341104276 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019671165 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.02060327 seconds)
  done (took 0.920313767 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.022427322 seconds)
    (2/7) benchmarking "second"...
    done (took 0.020405299 seconds)
    (3/7) benchmarking "month"...
    done (took 0.022557797 seconds)
    (4/7) benchmarking "year"...
    done (took 0.022124019 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020023696 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.019434919 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.020022576 seconds)
  done (took 1.023317971 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.470123768 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.106673146 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.385308958 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.03047201 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.044728412 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.262505625 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.024581505 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.029560977 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.029168084 seconds)
  done (took 2.252700576 seconds)
done (took 9.794406189 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.047470309 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.16605794 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.174410792 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.542402598 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.040670948 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.028769509 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.059631447 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.261624345 seconds)
done (took 2.215324707 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.513665492 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.499015348 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.241112131 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.029687345 seconds)
  done (took 2.664588208 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.364433556 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.160656795 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.035138349 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.027154387 seconds)
  done (took 1.455375344 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024595796 seconds)
    (2/2) benchmarking "read"...
    done (took 0.033583532 seconds)
  done (took 0.931066176 seconds)
done (took 6.467021224 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03291204 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.020031946 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.026897752 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.021535485 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.021064054 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.020389349 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.020771253 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.021679484 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018986617 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.022092463 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.022215158 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022415531 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022006901 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021331551 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.021328074 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022194494 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.020178857 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.021816818 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021452336 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021862616 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.020204371 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022283601 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.020802032 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.020866565 seconds)
  done (took 1.388115922 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.037550764 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.023507644 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.023947814 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.023825887 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.02561176 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.025995865 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.026162887 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.025044737 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.025528596 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.024758976 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.026909124 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.026250828 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.024840499 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.027145067 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025469436 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.02568522 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.024891179 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02396707 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02392863 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.025601284 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02496164 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024081414 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.025584128 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025305345 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.027280928 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.027125512 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.025529982 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.024908605 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02649321 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.027013036 seconds)
  done (took 1.621328982 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.024950459 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.018235244 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.018672972 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.031570593 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.018034599 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.017857955 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019033066 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.018038014 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.018579654 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019244863 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.01826046 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.01820105 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019232383 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.018263424 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.018256965 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017643853 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.022834978 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.043073463 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.018560389 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.018310865 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.024221656 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.017990179 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.018334385 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.018376051 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.018884447 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.018451548 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.017611093 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018473047 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.018368531 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.018868233 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.018221204 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.023641066 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.023714841 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01780257 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.028377416 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.022836203 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.017270787 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.024499465 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.017920252 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016913013 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016885579 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016632379 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.016827713 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.01693271 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.028727582 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017938775 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019434698 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.018646189 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.01845609 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.017980819 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017750249 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019600504 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.025566503 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019602322 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.018203118 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019166941 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.018134056 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019105378 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.018349478 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.018177761 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.018207349 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.02212854 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.01885751 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018141773 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.041091487 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.018935533 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.029742183 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.017683664 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.018184461 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022466077 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.018899009 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.042998245 seconds)
  done (took 2.313733853 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028279981 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.028402727 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.038431993 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02811069 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020826823 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01843418 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022539204 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019414623 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.030636565 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022711407 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019332766 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.02282157 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.030423815 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022708612 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020637184 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.030475503 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.023334379 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021615459 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018268892 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02221875 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019700017 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.02176287 seconds)
  done (took 1.372884358 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.108964271 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025058264 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.071859929 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.028565735 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.027335767 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.028790471 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.025235366 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02494583 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025134672 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026048638 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026285968 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02540407 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.027457153 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025917793 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025650415 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025562761 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02483329 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025392543 seconds)
  done (took 1.422706715 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.036102162 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.024496125 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.055191807 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024678553 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.02463751 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.024415774 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028215797 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028451653 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.024130117 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.024639759 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028337485 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024173119 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.02443756 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025070443 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024320974 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.024284116 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.023803382 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024157844 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.027921624 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.028276089 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028599958 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.028557485 seconds)
  done (took 1.44013546 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036552483 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022939266 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.040958248 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.024242417 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017355582 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017584934 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.024444271 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.022654339 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.023713867 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.021845979 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022602833 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017108281 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.024614736 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022381954 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.024989874 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022512585 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022222689 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022872624 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021742187 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016725568 seconds)
  done (took 1.294688782 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.13597377 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019697813 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019382657 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024624285 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01981535 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019692283 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024634277 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019778281 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019904821 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.046971677 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.0200997 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02036413 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025235415 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023552766 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020545765 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025270157 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025376117 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025402807 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02055119 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020443561 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0468067 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.020419506 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025348263 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.020574034 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020722032 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.020903253 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.020643159 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023758219 seconds)
  done (took 1.570887077 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039538218 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020159339 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.017889696 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.022304289 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.021985109 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.036254007 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.022484368 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.022172576 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.020737488 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018272993 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.020314502 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.020928783 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.021081584 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.032099407 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020076226 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.02011596 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.030996867 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.021792788 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.035185552 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.036467868 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.020911682 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.032099492 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.020678283 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.0180014 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.036386762 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.020621002 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022899778 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023707031 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02081059 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018432268 seconds)
  done (took 1.566784115 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030396726 seconds)
    (2/2) benchmarking "in"...
    done (took 0.029070911 seconds)
  done (took 0.888794457 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.019718188 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.037809469 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.017092355 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.033125015 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028139489 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.023296129 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028131738 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.028089638 seconds)
  done (took 1.05589872 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.135511477 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.168219934 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019909631 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020060042 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.136424607 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.099106295 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.149812706 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.033447744 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.035642237 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.023981768 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.019982223 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.151231069 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019312834 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.035936286 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021146662 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.03025228 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027899011 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.04102817 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.03631915 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018612101 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.035941481 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021271692 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.019677209 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.021249265 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.021241101 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02842527 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.038762871 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.033942467 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029572768 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.018053145 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.042342716 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018940532 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.019609368 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.030298453 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.13825363 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.018711688 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.062884452 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.019205754 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.023728226 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018628648 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.033348662 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.044420845 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.03594403 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.039749165 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020288934 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021182705 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018503692 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.02060096 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02387801 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.030077187 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019155481 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028241702 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.018605709 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020463543 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.031375009 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018882788 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023842466 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.030189796 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.035821246 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.03176122 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.033869317 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.03797239 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.029945921 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.02820646 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.019299396 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.041846171 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020711641 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.035520404 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.037125318 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020211032 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.03446132 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.018828425 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017892143 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.018787781 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.058655207 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020374616 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019894816 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019074329 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019090071 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.02024321 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.03050521 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023921597 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.028004462 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022074993 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.038277821 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.029333295 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.018402649 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.026623736 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.042100783 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.024644531 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019489004 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.040273969 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.024677631 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019236428 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.041372973 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.0326348 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020718265 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.019961645 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.023739283 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034793255 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020619659 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018144917 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029620495 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020943448 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.140400121 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.024699377 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028707497 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.018852421 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.031781099 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.026373239 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020958316 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.018414136 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.025883837 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020345297 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018506868 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.031389595 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019971393 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.037250201 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.027926229 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.036933737 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.037333212 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.032181767 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.039724473 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.019191228 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018841722 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.043285353 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.032022891 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021332017 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.0428687 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019611688 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.032951363 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019565311 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.021348426 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.03144395 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.018787968 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021335169 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019475411 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.026407597 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.02110118 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021878414 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.027666919 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.030699612 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.034950301 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021032776 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.031091434 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020147131 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.039562348 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.031935623 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.026202542 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023262421 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020407301 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.034420779 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.02872916 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.03149677 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019682443 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020755381 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019940558 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.033895 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031753465 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021617932 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.030011548 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.026037529 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020764354 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.01968073 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020432709 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.02436785 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.02350133 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020502637 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.030033413 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.031049019 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.03709665 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02815281 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.030972807 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019056717 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019652787 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021696452 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019442811 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.026187349 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.030752711 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.038300925 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.034560993 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.047675657 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020313131 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.032271805 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021903897 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.041592466 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.036680623 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020847954 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.024974749 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.018566579 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021820443 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.030742259 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032729863 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.036475218 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.038151224 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.02622776 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.025931207 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019471296 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.038918451 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020098051 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029789104 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.03078638 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.02640782 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019305239 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021274564 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.030711005 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.026149072 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.020838453 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.039201332 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.028105645 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019537078 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.037729325 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.01998061 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.032716036 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019515732 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.023635724 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.025833075 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021807307 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.03189652 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.038717515 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018838605 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.02022028 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.039357434 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.021961942 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022040382 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.02968129 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.038718989 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.025866362 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.028966576 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032303178 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.03325877 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.182341187 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.032937138 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019974883 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.030823524 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021706259 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.033319301 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019044384 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.04227486 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018473392 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.039121677 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.01995314 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.032911421 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.01979419 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030953322 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019974661 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.039568892 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.02037156 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019606639 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.032979635 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017881774 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.030323162 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018850826 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.026315165 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.027698198 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.030558927 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020523696 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.030616013 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020564221 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.030139084 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.025322639 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.029154915 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.029355046 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.024849869 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018399405 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.029619786 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.031867443 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.029252747 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020247995 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020480363 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.019591176 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.03049502 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020772722 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019955514 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029126194 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.025439779 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.026502838 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019619308 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.02009149 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019949201 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028896105 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.030113376 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040526845 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.029752989 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.028456918 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.030533015 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.018689483 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.038111616 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.018555619 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.027996288 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.017556553 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024862718 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.029936273 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.018683599 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.04110361 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.019916921 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.028128485 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032665517 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029063977 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.02368083 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.040064167 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021353787 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.028710816 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.02763867 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.02423084 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.026678795 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019663747 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.028670667 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.029572705 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.030647543 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018938851 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.026868119 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028985304 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019834949 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.026368736 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019660601 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.028350382 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019955742 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.017588671 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.024503705 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030525261 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.024909643 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.024782192 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.018613124 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.017356476 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.018440024 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.026010321 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.024043294 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.02900478 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036369822 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.017486778 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019200598 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018350607 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.023919222 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039857087 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.029215476 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.027401277 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02501228 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.017922617 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020200485 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020254091 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.018878383 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.022195207 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.018000996 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018606578 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.030519734 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020301573 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.024408493 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018835554 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.019682705 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.030163668 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.022768963 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01899761 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.027640815 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.018661621 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.026140667 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018091637 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020291211 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.0241973 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.017892651 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.02305149 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.030596538 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.037276208 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.02683865 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.028368894 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.01964038 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.026763949 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.035208219 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02686299 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018982806 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02961228 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.01786479 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.039646614 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.029353091 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028542529 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029661277 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019203146 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.037682989 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.023601335 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.029610159 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.036017117 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019300126 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.027326673 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.018196814 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.036729729 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.024319513 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018283437 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.028723675 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027854685 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.025688389 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.032271838 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019805272 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.028598444 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.024309388 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.02317849 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020659092 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020592407 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.028733612 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.036998169 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019540767 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.024834668 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02754258 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.028023973 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.024028421 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032359904 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.027848338 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019496304 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020309305 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.022961062 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.019203278 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.032301508 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01852048 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.023148605 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022893998 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017642487 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.025563645 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.036188841 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.027893836 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028845515 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.018772096 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017808019 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.038096556 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.022971178 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.022340967 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.026897752 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.029110357 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031806582 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.027973365 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.037734303 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.018853694 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.024827155 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030931399 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019404711 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.018151484 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.022378942 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019610515 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.028755557 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.029001471 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.025924337 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019752006 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.02592477 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.033908216 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019979464 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.023513306 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.025110882 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.019230797 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.030029586 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.027633532 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.028089819 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019655253 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017572168 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.021744818 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.028369858 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.027386306 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.028742694 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019299248 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.027676712 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.034601688 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.027319201 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022183997 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017349277 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021374541 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.02740323 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.02498522 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017605835 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022982452 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.02172396 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027631031 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.028452803 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.023054774 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017492417 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.036683175 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.027440045 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.027496193 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020002467 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019773146 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018137753 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.01814428 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030282916 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017879086 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019824893 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.023192597 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020012092 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.037508296 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.026932403 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.035469062 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019079465 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.023317558 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.017772146 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028436333 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.023759239 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.018278054 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.029077342 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.017165215 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.035435557 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.031874051 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.026821048 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018325998 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.024308107 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.028328234 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.036805822 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02907023 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.029407502 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.023046447 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030336541 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.17093687 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.030107292 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.017301978 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.016098063 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.027305792 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025898927 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.029100071 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016191757 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.027201339 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018281789 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.025552781 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.025464837 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.018672039 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018940025 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.018955784 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028039975 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.023419278 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.027434363 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.022524037 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.034744814 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017469466 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.028493632 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.02756008 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.028600126 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.033288457 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030434697 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.026368608 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016990826 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024173104 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.025669652 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.018265598 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.023214181 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020115929 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040824224 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018860996 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.018938003 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032588578 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.024534364 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.017063323 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.023461741 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.022060461 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.027294197 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017709867 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.028598898 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021921859 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.01782685 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.022181928 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.022148673 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.016042621 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.016718923 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.017007953 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027367435 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.022116956 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016574859 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037083679 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.018205341 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.025783329 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029497704 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.024560501 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017726741 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015983434 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.017566282 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.030752018 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032672673 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020832297 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025732802 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017948871 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.026285889 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.016226491 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.026605881 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.025349215 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025843162 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01661339 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016721441 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.032064287 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033314084 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021796427 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.034500134 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.026108561 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.018349163 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039778633 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.026299791 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017777962 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02810368 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018601834 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.016210575 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.016226169 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.018525572 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.028915188 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017023253 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020134945 seconds)
  done (took 17.516903792 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060526657 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017798474 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.016152662 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016072466 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023478039 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018333678 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017157898 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017879842 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.017895281 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018306297 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015956561 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01605935 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021449093 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031289469 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025074078 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020725161 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.016527685 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017651337 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.016310309 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017653527 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023457973 seconds)
  done (took 1.283664253 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020003712 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021455676 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021756962 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022357552 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021640833 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018510739 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.022214367 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018476492 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022535275 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018794795 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022775966 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018748966 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018868157 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.01898905 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018913692 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020089841 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022829666 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.02224191 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.019012376 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022504527 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020374059 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.022392757 seconds)
  done (took 1.317746968 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01956177 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.019038672 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.028705846 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.018249921 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.01818207 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.021027356 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017666117 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.023885931 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.024760402 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.024871959 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.029660917 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.01926889 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.018636208 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.026910112 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.018712298 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019568034 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.07291135 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019426098 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.01952839 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.018556426 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020875257 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.030087613 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.018720377 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.018953568 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.024843088 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.021355933 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.018560255 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021188661 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.01926474 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.024509033 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.019396554 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.018302657 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.030538026 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.029308801 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.025294978 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.025346198 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.02018744 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.0191691 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.018346744 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.018434088 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.028934024 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.01967151 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.018989098 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020011269 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.03034365 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.019133302 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.018726162 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.0305521 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.018949296 seconds)
  done (took 2.017255669 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.030701058 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.083322913 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.027379388 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061688313 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.031914502 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.024062974 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.026283402 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063533513 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.019951971 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.020644657 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.033858576 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.034064743 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.021912034 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.023289216 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.028176934 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.021990153 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.022686842 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.021339581 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.02442349 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.021644751 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.024523952 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.027912881 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.032964489 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.0340307 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.022960296 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.021229137 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.021609137 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.023285861 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.03347991 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.024738775 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.023067169 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.023108895 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.033587823 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.028521143 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.021453763 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.021558098 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.034592226 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.022422908 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.022215746 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.020542573 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.021831566 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.023172222 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.027641618 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.034154889 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.021967149 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.028298685 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.021547438 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.019807055 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.033969644 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.021629696 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.025500548 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.033746873 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.022663371 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.022041633 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.023589627 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.033918796 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.022115778 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.021009458 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.022501107 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.034090183 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.020436663 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.022919074 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.035147691 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.021787887 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.025630395 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.035059417 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.028822685 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.023404644 seconds)
  done (took 2.962999792 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.028782741 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.063684258 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.037187321 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.036400446 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.031429327 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.031838732 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.031438303 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.030980472 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031131256 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.034317483 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.031593344 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.193645923 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.027294293 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.032193942 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.030996142 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.031133472 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.030504766 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.030965438 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.030844678 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.031114266 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.03146508 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.036889823 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.032801454 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.038782867 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.038098329 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.029668434 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.033580692 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.033774499 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.038378369 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.032654793 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.037246217 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.032485478 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.032511403 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.037450524 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.036159898 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.031332516 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.019792957 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031467626 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.032297964 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.031997556 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.028110274 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.03758608 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.032058155 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.028893621 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.032803054 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.032467861 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.038396752 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.038370962 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.03535333 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.036880157 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.034108015 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.039756245 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.033512257 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.033153384 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.038196892 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.041890237 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.038508612 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.037704455 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.031948724 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.036909814 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.037498687 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.040826752 seconds)
  done (took 3.220495537 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03430686 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.025522502 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.042541167 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.019333099 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.019589093 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.031798582 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.020489714 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.020417706 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.027349107 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.026874779 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.028144732 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.032169821 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.034480481 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02847892 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.031386102 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.033453976 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.03124132 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.03048453 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.025085342 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.030031814 seconds)
  done (took 1.617080066 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.021409812 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.02516547 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.020066474 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.041257048 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.020214139 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.02945936 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.020350504 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020210124 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020424678 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020432047 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.025898388 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.025762815 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020537813 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.030546212 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.024080571 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.029597657 seconds)
  done (took 1.423746124 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.023428113 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.029191956 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.148201335 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.020674976 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.022715426 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020175216 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.020838675 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.019488228 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.022311533 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.036362675 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.020985786 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.02304203 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.021072387 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.019524755 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.02016284 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.023512047 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.022678936 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.021637826 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.021332043 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.149566703 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.03148665 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.021798343 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.023113137 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021793595 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.022840321 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.031180965 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.022723722 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.023059821 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.021219373 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.023390941 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.022895884 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.034385524 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.023410103 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.022227237 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.019994568 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.02102065 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.021462233 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.023824853 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.024116536 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.021528909 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.020675598 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.02364822 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.021725528 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.022074166 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.0229437 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.024430358 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.023107946 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.033927935 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.021253966 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.023169293 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.021249525 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022391178 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.021750902 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.035048356 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.023674848 seconds)
  done (took 2.574473791 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.042860419 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.026835892 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.019426482 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019629693 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.026220655 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.02681568 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.026227321 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.02699998 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026884481 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.018832907 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.026647997 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02627306 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.027468088 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.027205321 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.027566614 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.026848358 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.019135449 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.027115737 seconds)
  done (took 1.504706596 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.027638758 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.025094732 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.025931933 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.021610062 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.021648833 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.026175781 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019830771 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.02129781 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021051095 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021691259 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021582961 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.021765123 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021680335 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.021589844 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025734834 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021578109 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.021093284 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020007028 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.02150405 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019711337 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02612946 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019969264 seconds)
  done (took 1.525697826 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.22831726 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.179014421 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.050887684 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.044431612 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.034239309 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.064978717 seconds)
  done (took 1.62410616 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.061172733 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064667866 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026263536 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026154373 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030504337 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02872717 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028990027 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028779806 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032157376 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.035572195 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029692048 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032775086 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032409646 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.035047264 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032014801 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.032287071 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03037698 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.03062512 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027085894 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03859642 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030622533 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.033529266 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030375253 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030622393 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030484105 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.035834987 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032888815 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03582901 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029436135 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033090408 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031461187 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029727849 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.033035416 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03567708 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026773237 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032178132 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029286058 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.038654851 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031940048 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03498919 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.026339238 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031062846 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032608894 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032650321 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.032933413 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029119882 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032586405 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030129001 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030845316 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.043001045 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.032197413 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.035785904 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032149555 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033583658 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03340996 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.042287095 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.036790502 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.035881827 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032188567 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.036616312 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.036320184 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032718336 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03662599 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.037311466 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031985695 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.035846649 seconds)
  done (took 3.242273156 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071587588 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.027394384 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030069988 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.035152136 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.034126474 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029400747 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030004466 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030157419 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030166256 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027932848 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073337605 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03050932 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035548322 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.035278269 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029781153 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029841565 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029937215 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.034779276 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026722685 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.041312741 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030084106 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03568506 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.035305168 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.035612433 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.036152178 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031442484 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030068929 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030174695 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030281871 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030212949 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033333016 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029501835 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.034929479 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.027211539 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034576553 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029064305 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028425283 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031958525 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028881093 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030494028 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.034086202 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.037131013 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029698554 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029662147 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.036438682 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030085118 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029459274 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026552504 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030267313 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027896626 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.037874265 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.037458538 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.036809482 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.036390275 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031156114 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0309768 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030501178 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030211267 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030197027 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03200657 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.180882011 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030261891 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.043010739 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030726539 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03090438 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03621343 seconds)
  done (took 3.384431959 seconds)
done (took 62.00535554 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.23657219 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191070391 seconds)
  done (took 1.428099486 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.16137335 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.159927866 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.195384023 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.031220418 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.105916081 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.240304064 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.152027281 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.030804422 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.030692233 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.03242678 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.030475495 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.032254812 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.032761073 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.030101452 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.110229575 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.030230873 seconds)
  done (took 2.41330882 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.087444852 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.293740086 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.073899233 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.029994114 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.128702886 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.03695932 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.03134868 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.035683896 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.036021447 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.029033806 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.086430321 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.047145603 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.036104482 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.036067906 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.031165795 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.035648778 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.036285209 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.037025198 seconds)
  done (took 2.145951933 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.089079294 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.04026033 seconds)
  done (took 1.137589517 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.149297345 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.070079738 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.12129858 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.366205775 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.106363399 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.110711371 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.113378651 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.106283984 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.07714035 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.102807957 seconds)
  done (took 2.309519259 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.071524042 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.07059137 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.339861199 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.067747988 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.043014837 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.035614039 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.035127414 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.036770865 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.035996183 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.035186523 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.091595509 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035198736 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.03119734 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.087702824 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.059977252 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.074459848 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.030138546 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.037769979 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.041111339 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.029131636 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.034258635 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.037171491 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.152237989 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.036721723 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.061534665 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.034793433 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.036543886 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.035818357 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.035511371 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.03769189 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.03857793 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.062602821 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.037557074 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.04427744 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.036018966 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.059277454 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.030209681 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.059295919 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.033488944 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.030285916 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.033406266 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.037706633 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.030817851 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.037277315 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.0367963 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.037023174 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.038230428 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.029309276 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.036477653 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.03389842 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.031011787 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.035777526 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.035370917 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.03684806 seconds)
  done (took 3.695251544 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.091715111 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.07829962 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.030046383 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.087111009 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077018859 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.030085247 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.093199784 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071445061 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.090351462 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.029749081 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.029334931 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.028830736 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.037610621 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.04157508 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.089091174 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.081939938 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.031905894 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.030307494 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080847536 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.082387776 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.028607137 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.092706604 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.083864921 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.080392684 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.028566771 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.030304285 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.029008867 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.02949 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.037366387 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.037727873 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02911236 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.040271326 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.041804585 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.037017251 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.028623112 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.028732707 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.028918576 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.038596202 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.040356493 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.040420279 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.036821818 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.029133571 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.029240203 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.029655412 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.030091246 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02851021 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.039565113 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.036939057 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.03805424 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.028222333 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.028514391 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.028028213 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02942756 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.03758913 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.036542093 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.037710209 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.041115753 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.029602102 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.029785157 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.03132286 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.04205238 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03849991 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.03866194 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.030419332 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03865724 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.027648416 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038912603 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.043526036 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.029250186 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.029969066 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.029288155 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.029427517 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.030163176 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.036835797 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.03694255 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.029936576 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.029691515 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.029435874 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.038595915 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.036363135 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.028798746 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.038405972 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.028338307 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.028203663 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.029147339 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.029685737 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.039430057 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.037748913 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.029826603 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.029290666 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.029581206 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.029457804 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.028387627 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.039267213 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.039471914 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.039144191 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.041361293 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.030037552 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.04213922 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.039061876 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.030181176 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.038143891 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.029812659 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.030061038 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.030225968 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.037957202 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.037829392 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03964247 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.030049386 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.029915159 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.039207475 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.041064223 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.02930793 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.037534344 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.040242649 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.038042952 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.028899274 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.041541946 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.029509111 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.04038999 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.029418282 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.040341272 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.029516901 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.038291566 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.029279836 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.028863165 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.029500197 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.042028664 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.029612183 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.029323555 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.029958996 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.029635114 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.038632757 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.043363923 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.030624141 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.039397495 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.039298443 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.030393992 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.041742488 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.030250674 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.041707907 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.029987366 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.030006597 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028726297 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.042140788 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02814689 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.029223778 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.029543368 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.040920782 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.029731212 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040517144 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.03752683 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.029260383 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.042096586 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.039953217 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.037799734 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.040253481 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.030129244 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.029672181 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.029599347 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.029986075 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.040980042 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.042790792 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.03070977 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.029625281 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.037468597 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.041566778 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.029054456 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.037335287 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.037724941 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.038456229 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.03000865 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.181551568 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.03978819 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.040929515 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.035219533 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.038816134 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.037215585 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.029145316 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.036184319 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.038901891 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.029493832 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.043850297 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02996029 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.039944657 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.038737375 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03530592 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.039244674 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.040276987 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.038620897 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.037852805 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.039795354 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.028598457 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.029014779 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.035727671 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02896485 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.028783361 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.035371688 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.029996371 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.030136937 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.042301163 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.029332573 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.039120011 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.029040976 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.036314172 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.028565379 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.029027163 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040829865 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.029284292 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.029331579 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.035645432 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.028708155 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.034727057 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038629707 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.035464545 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.029309319 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.029712965 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.040075013 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.039185731 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.029449923 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.028902322 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.029621029 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.038526205 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.037753046 seconds)
  done (took 9.491096098 seconds)
done (took 23.640041544 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.176073617 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.083992922 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.193223287 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.108976393 seconds)
  done (took 1.539159469 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.065227253 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.023621767 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.156980901 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.168237454 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.0236444 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.15357116 seconds)
  done (took 1.5769531 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.239864603 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.155884124 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.15622524 seconds)
  done (took 1.511965956 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.157029427 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.330147227 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.626511235 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.152399467 seconds)
  done (took 2.237458653 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.196396308 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.185624177 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.035838383 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.203708513 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.043310137 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.019228714 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.112891244 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.027080587 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.058503841 seconds)
  done (took 1.910530628 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.108898091 seconds)
done (took 9.862481562 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.203241666 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.153979967 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.038795596 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.032069428 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.151300706 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.145753461 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.15980214 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.034571835 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.150155216 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.338984293 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.185317707 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.055972424 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.175558375 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.05041128 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.295852609 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.036516233 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.033886034 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.028813136 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.163885169 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.14410826 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.266728407 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.03312205 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.109993782 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.035849285 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.122179509 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.091988567 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.192173938 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.327529857 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.305105894 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.035456794 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.145311156 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.049859133 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.138103754 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.150683639 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.148021315 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.055971157 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.02400392 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.270056051 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.128238039 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.338215044 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.170959044 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.031619571 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.160129329 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.029387175 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.022547049 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.157975207 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.038830912 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.030483269 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.050152975 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030581718 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.046891868 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.030969999 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.159235704 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.028001395 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.105628916 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.152490874 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.184424021 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.113555333 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.030263054 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.044749293 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.034228942 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.174407542 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.045933498 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.03053945 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.038206545 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.02371312 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.151745788 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.046365598 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.024158892 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.035945503 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.034172928 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.130374063 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.171921632 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.074253956 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.038102175 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.134817113 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.109764886 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.056220338 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.056196218 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.035856789 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.023487489 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.191610831 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.029814662 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.04499617 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.031400496 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.060052401 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.023121846 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.041453669 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.175875455 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.168292864 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.102081094 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.024357344 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.266501141 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.026470114 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.21882557 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.02492699 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.023506837 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.190322037 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.023526032 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.023863821 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.035209376 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.033591406 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.025547644 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.173427073 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.126688234 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.033605221 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.032211962 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.025104168 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.031238498 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.025244122 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.024896262 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.02500575 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.111727125 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.042316612 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.023729255 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.124888127 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.149788477 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.037558894 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.046021169 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.101282766 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.028201494 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.034665909 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.03237635 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.149038969 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.034801147 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.15862027 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.025664164 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.05094198 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.139659802 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.114077077 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.124575553 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.024243602 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.179673047 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.036217236 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.023712892 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.032448785 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.056962311 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.035067425 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.043092638 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.034315081 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.179909913 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.036505414 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030261024 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.139052293 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.023403793 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.131414915 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.113558508 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.150352356 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.03011562 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.035833331 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.111716248 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.0529152 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.056952987 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.05039533 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.028715438 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.023676435 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.023591141 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.04229579 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.023239839 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.024311961 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.041574644 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.031913479 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.024385771 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.273652309 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.035243945 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.029885315 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.296618661 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.039355958 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.118385199 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.049508068 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.02478668 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.125604329 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.027112056 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.048106172 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.098121719 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.024866282 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.112841025 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.024568656 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.024302944 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.033379419 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.026300251 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.035367593 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.040521017 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.024547296 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.040093823 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.032763413 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.025055143 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.124805962 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.026336493 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.194023776 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.123894713 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.135154289 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.024900616 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.044653149 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.024101919 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.156276392 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.024215593 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.080538202 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.135826021 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.044331837 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.047958908 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.025893569 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.113268478 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.042881231 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.02445247 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.118602268 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.150383242 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.118461786 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.032959268 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.275627365 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.035186608 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.025048078 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.03305656 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.034383601 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.025661417 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.113421101 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.029370736 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.023187857 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.023694735 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.025603306 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.023305963 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.053986958 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.022844967 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.033284536 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.024481549 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.027654438 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.026349474 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.022888241 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.034143932 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.115449464 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.151767623 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.031262826 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.046772419 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.039510359 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.037169179 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.078970805 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.03190165 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.164292404 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.023221136 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.035261643 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.050360127 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.023620867 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.029696445 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.024436391 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.046550573 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.028341201 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.026257493 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.03390155 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.024267041 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.024983503 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.024000194 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.02436503 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.034215806 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.025760024 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.023565113 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.023685342 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.024777557 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.029506163 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.029526543 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.036304674 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.046219537 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.52260364 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.025752984 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.026108895 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.023386013 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.022842906 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.023253822 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.025906541 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.023319118 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.025719568 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.023986341 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.023341407 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.054825031 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.028221923 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.024514255 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.048352736 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.023898209 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.034466067 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.142647678 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.042483746 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.029326163 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.022396187 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.289885025 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.123461223 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.047921683 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.047342182 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.197945353 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.03691753 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.024405801 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.024531907 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.023040666 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.052939776 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.02861037 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.024483178 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.022770711 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.023463389 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.078081268 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.031744433 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.022991151 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.032984249 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.023035611 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.023082798 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.052126234 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02207745 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020529908 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.04165982 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.035782366 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104644364 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.033095054 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023153356 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.071135987 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019390275 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019906197 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020317244 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.114622702 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.0339217 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021726052 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.02001313 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027372778 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028794906 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.074107011 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.027102044 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023207254 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027993196 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.01918269 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020497026 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.045778314 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.049412704 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021168903 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023948555 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020325653 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020579391 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.095201706 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027891116 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024434168 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.104495805 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021780949 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027837576 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019120089 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.482527932 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.026091533 seconds)
  done (took 25.315218147 seconds)
done (took 26.283082707 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.163573785 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.034834263 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.034018394 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028841257 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032454453 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.03242841 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033430059 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029128347 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032085169 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031454888 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.140856747 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.01929442 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027046337 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034529515 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028192343 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035363425 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031911974 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.034727794 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020041816 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034968463 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030138115 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032612276 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028299521 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034351938 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019946069 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028052344 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154984988 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.039033682 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023642179 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.02964909 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027418652 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.038905902 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027351736 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026930928 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029116455 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025026064 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029893066 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026058606 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.156899911 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025672621 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020782324 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032987223 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027015533 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027757203 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028455045 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031773846 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025017879 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033523785 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019339426 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.03276257 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.158667417 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.025518455 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.024355597 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.029564623 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.026400527 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.030575333 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.023656561 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.032575372 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025702441 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.034319687 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.029069698 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.029876426 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.021623375 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.031043139 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.029599314 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.03004467 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.0205147 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.026668188 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.02188563 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.021745529 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.021017399 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.031145607 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.029551309 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.027215229 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.021034982 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.02144206 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.020813464 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.035178624 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.029938095 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.031809602 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.022358706 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.028153297 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.026873829 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.021822053 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.026337851 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.034212209 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.020588096 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.021347094 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.01974666 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.0326654 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.027285724 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.02028799 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.033548409 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025345101 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024866177 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.020560036 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.020006133 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024970107 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.028587418 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020460409 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019535732 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025337184 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025405869 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029951536 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020542373 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024700387 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024545081 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.01898877 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028942623 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.027568206 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029265984 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.033399802 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.02972365 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032939368 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.02176389 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.021052572 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.032092731 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.022144055 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.026703158 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.029256948 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.026756992 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.029390785 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.021490177 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.020228144 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025386023 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.026698801 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.021043111 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.021379876 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.021874897 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.030153723 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.028330763 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019946548 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020596615 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.030740046 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.030139334 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.020388931 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.020148377 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.029735219 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020798212 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.026954215 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.026797284 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.030755964 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.020985534 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.021452715 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019645688 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019839463 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019613936 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025779122 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024850986 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020463687 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.030004667 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.02859142 seconds)
done (took 5.686063808 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.035693829 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.066666021 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.184407196 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.145801016 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.035193841 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.023018826 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.027688498 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.044482074 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02522977 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.047498821 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04892163 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.046114606 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.169544824 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.02069045 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.021636951 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.022394095 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.019583408 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.034626609 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.151149747 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.047426169 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.065859015 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.02084247 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.038980919 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.043743335 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.035899414 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.04319005 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.023238956 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.023064499 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.024825795 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.039602323 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047036648 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.021054061 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02298676 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.043523847 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.039482717 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.033328895 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.023684212 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.029691032 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.021891562 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.02064684 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.022638683 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.039852838 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027986887 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.028297015 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022119439 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.021246215 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021004935 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.030033809 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.036596292 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.028404524 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.035278952 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.039450189 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.023326839 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.021662294 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.020814512 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.030476914 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.022677504 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.022747609 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.022433855 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.021049003 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.022234851 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.02408589 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.027450857 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.033264373 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.025972567 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.030166584 seconds)
  done (took 3.509913124 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039707693 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.049286809 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034406957 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035250554 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020459012 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021178873 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020972299 seconds)
  done (took 1.146484941 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068095152 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.142721421 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.148295756 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.148975025 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.160729384 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.147898649 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.037508183 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.053956398 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.022331951 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.16718497 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.160309215 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.153177765 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.026166828 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.035084276 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.054617048 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.154724797 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.035089642 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028948562 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.147538772 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.156080246 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027651096 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.0533723 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034674769 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022950641 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.151855744 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.145249672 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025816787 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.022678132 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02446724 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021479614 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021490995 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.045971466 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.143785933 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.040745052 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025413989 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.022945899 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.148563657 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024514192 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.151485401 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.032085408 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.150710882 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.026856406 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.027021157 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.024294568 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.025270166 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.155924686 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02576808 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.024258802 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.023779241 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.154252276 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.023418908 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.153196908 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.027077561 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.03024576 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.031914748 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.031514824 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.032664393 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.024634382 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.155807597 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.034909832 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.026315432 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.165154136 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.164676746 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.151857931 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.163009457 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.033835521 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.151767399 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.150749256 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02342017 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.032908951 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.024221936 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.164076955 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.027673255 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.026774268 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.029160064 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031617683 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.169243306 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.168994556 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.170505029 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.039563075 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.026741788 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.024616328 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.167551219 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.17114469 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.029768492 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024047423 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.025231502 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.04198661 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.05170885 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.025740932 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.028579837 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.023861916 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.03533789 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.026786333 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.026963433 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.162864112 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.024774203 seconds)
  done (took 8.171916601 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.029920404 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.02427765 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02415609 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.024846432 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.025224148 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.025081153 seconds)
  done (took 1.280103333 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.050619248 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.024279395 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.037377769 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.024403505 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.0480738 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.151793391 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.152786262 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025550434 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.041518529 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.037352424 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.152197167 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.156918148 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.15567431 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.026291353 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.155383776 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.037280296 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.155147551 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029893114 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.037549697 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026927157 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.040266252 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.025592769 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026046601 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.162494467 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.026900876 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.0364941 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.034305951 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.036079469 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.035721182 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.025673413 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.025187886 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.026872351 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.031510155 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.024994061 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.153600854 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.032061173 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024840258 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.028895196 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026864716 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.025985459 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.158096782 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026471665 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.030430851 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.029601505 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.026126375 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.03292601 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.029783986 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029411163 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.156417009 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.029418013 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.028936776 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.024775525 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.026702476 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.029296009 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.032165437 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026249371 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.029224281 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.156481241 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.025809317 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.032630343 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.024835759 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.02652599 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025965225 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.026393521 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.030685091 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.029803796 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.033304306 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.027053051 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026675414 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.02516152 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.029536996 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.025308863 seconds)
  done (took 4.694452582 seconds)
done (took 19.773279451 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.524549507 seconds)
  done (took 1.602744714 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.120116128 seconds)
  done (took 2.225306672 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.055751399 seconds)
  done (took 1.131554175 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.313294836 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.410343987 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.802987642 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.100073603 seconds)
  done (took 2.694384118 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.878702796 seconds)
  done (took 1.981623864 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.24199163 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.197652124 seconds)
  done (took 1.547017357 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.516588837 seconds)
  done (took 1.57639922 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.660684789 seconds)
  done (took 2.736363307 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.209736932 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.140349694 seconds)
  done (took 1.485573701 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.687295077 seconds)
  done (took 1.814645336 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.136041514 seconds)
  done (took 6.263540223 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.198703927 seconds)
  done (took 1.25644137 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.194070861 seconds)
  done (took 1.178362286 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.697886043 seconds)
  done (took 1.651000217 seconds)
done (took 30.227444499 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043635813 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.041175874 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.041697286 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.036650053 seconds)
  done (took 1.111478951 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031277186 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.02683927 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.028966583 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.030044582 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.027899953 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.028730841 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.028099768 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024262915 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.026158391 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024840375 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.02278947 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024044739 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.027405621 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024345994 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026167981 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028673263 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.025641786 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.026380877 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.027412503 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024929362 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.02744071 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.025372283 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.025250951 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.027676027 seconds)
  done (took 1.651480596 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.035355812 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.027562675 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.030166946 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.02652367 seconds)
  done (took 1.135360845 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033165885 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.032517917 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.039993535 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.04459002 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030338028 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031109756 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038211721 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038200406 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.044755104 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.041389568 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021995393 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021588134 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020965571 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.040380737 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.038088755 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.017495903 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.018479743 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.033022873 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.032268489 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.035881637 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.025178447 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.020579869 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031990522 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.032897268 seconds)
  done (took 1.79008245 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037732056 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.01961896 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.037226654 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.049406691 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.05022169 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.020381916 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.035408997 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.049210133 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.087376767 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.020364277 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026815137 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.020394351 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.062175158 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.020493163 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.037050977 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.071323548 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.072844212 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.025315815 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.055978407 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.020763725 seconds)
  done (took 1.845348131 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029001107 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025478752 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025948327 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020484777 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.031763167 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.028141703 seconds)
  done (took 1.18134672 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.026133735 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.025816535 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.02464319 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.031093878 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.026524407 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.025725879 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.023630465 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.022686132 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023099606 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.024451892 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.024598385 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.025301761 seconds)
  done (took 1.394274368 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.187838525 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.029805934 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.028454838 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.023981737 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.026059928 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.024941117 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.040555676 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.025407239 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.043814448 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.024422075 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.024640121 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.027462234 seconds)
  done (took 1.613004595 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067786075 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075702734 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114441051 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079680096 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079598437 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056736457 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.21853231 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.037444448 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.137775521 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10480356 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082557615 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051771641 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046918232 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.027980493 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061598713 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081563984 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104765826 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031942926 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077204482 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.267026101 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098607798 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.096574525 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109458492 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077038468 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.050651107 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107018366 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054036056 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061512555 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081106221 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088280003 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080824708 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.058390661 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.027532839 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.026239065 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111579839 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.06452417 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078148313 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.050295786 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063350301 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.046686967 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066978528 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024532702 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037902218 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.070614512 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043446031 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104826844 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.05641675 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084877179 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040392339 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106287585 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094670899 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.205481779 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050888917 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072055857 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10944103 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08467436 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116948813 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080175247 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044729466 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.249472702 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.073096294 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067647272 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074904661 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042146632 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152370919 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051918938 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.082555006 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079160915 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.060989686 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061097663 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07227838 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107329418 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096536425 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.098149102 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110049148 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056200277 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085164299 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.064713385 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.098782487 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068006098 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.033058994 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091783511 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099900112 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064967101 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067474442 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103670634 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058017969 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037973396 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.06931909 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.08651155 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041814824 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.083644703 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042916974 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.077087894 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113376851 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062982614 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080370251 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090100082 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039080898 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13125146 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07657845 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033465636 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086878945 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082183668 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133647941 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060908838 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.037927917 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.067293785 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070544894 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.128101088 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079275874 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042296108 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080609887 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116013865 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062040538 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.304004034 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063113246 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120702195 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08613586 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05393926 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.037387458 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.057666561 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.251872259 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075334751 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080419245 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059463512 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.047201873 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049650042 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08320505 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057222068 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043378446 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084200716 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.07061079 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.035787648 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051009258 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.038517174 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115279696 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03856884 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103723182 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098791214 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.035848687 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073618251 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0610395 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074261611 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.063712891 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08732976 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107163315 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.168773788 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.05414592 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.058520465 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07528766 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.118590315 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097327222 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.058647446 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.039955576 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067805629 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081064148 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.065333828 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092230365 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059137519 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078689656 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073816502 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119827036 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11632688 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064672918 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069111547 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078704504 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.092988893 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037177465 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133994959 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071667156 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091566114 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.051510768 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118775357 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.081349447 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055120349 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05149476 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067505984 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.070947247 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074012891 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123994958 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.064736641 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.034080177 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061301462 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127602577 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040097389 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081448632 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.057414777 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.058490132 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089616394 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.060870937 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0447866 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.02951422 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.279712347 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129806533 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.029940331 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082841643 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.071929851 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067394474 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.093533673 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.029261778 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082994666 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106764019 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089083702 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111335647 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137889723 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080538927 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083412175 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.078629772 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073350152 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042703279 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.099298002 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110882952 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058519798 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05455276 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103275881 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089375764 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.110963355 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.088828122 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089734477 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.072828079 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076840058 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071412709 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.074232138 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123322788 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09100362 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.098217873 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048244678 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076548229 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092113432 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108070486 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044116676 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113992672 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.049137056 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09167826 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.041034167 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097340833 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.036626492 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.14344393 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04028979 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068279317 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.030331833 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.035727515 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120702072 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.087217376 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076078505 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069093488 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.116759892 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11561119 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.038924306 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079476419 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088666496 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070580015 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.257191604 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07851873 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.055008419 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058171594 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076443693 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048494043 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.042957951 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0854155 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055452457 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094663342 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04715415 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.035935153 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108324083 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070521457 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057817129 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038210202 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072980166 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.091830421 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056469022 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048877747 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083119398 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070582993 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114546687 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.054890572 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.063181719 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090747652 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039482602 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.053497231 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.029025787 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.04855529 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.037476792 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097380949 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036852964 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080528062 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.027863967 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100566135 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.050406635 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.059473945 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.070407642 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078600111 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094356625 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055541028 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114577962 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054156946 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093374423 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075423184 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054939777 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048003616 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066502957 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063911083 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092898683 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.064506078 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094386916 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111475189 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068844169 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115828943 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054406265 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092433234 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072867778 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095654708 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078825457 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145353926 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117999522 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083762084 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080587387 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.036163395 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062285497 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075563349 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085710823 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.330472166 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093967729 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.032461974 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068965552 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.058790714 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078503142 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07020934 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044325969 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111394187 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061741836 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.04743684 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07630752 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.052153493 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072095834 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037164562 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064439286 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.068048197 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057087152 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060113592 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075872015 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094289452 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080489937 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116755443 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.067897919 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.056788224 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.085581455 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07668019 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073359064 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047443458 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049101871 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108559737 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089976049 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.094237304 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.064483876 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074894957 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079030786 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062684147 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093785946 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075222814 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.09857439 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041333754 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.038064667 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.027700405 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.032454988 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094153264 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075140673 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08032435 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064632349 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.032764719 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071160233 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071012744 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032238796 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051422415 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058091924 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.063294725 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.05718045 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076286764 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.07902339 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.062608254 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072538429 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063106217 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120358024 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.066891183 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054152165 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124377429 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131560535 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052532409 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060627461 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.03252216 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041918398 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086611438 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130026708 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.291068084 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.040202081 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051698495 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.049169917 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049277716 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.032600673 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.051040189 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.053859733 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07149185 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061397941 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.079190003 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072455615 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03673062 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072182346 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06586848 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057968463 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.072159951 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086453437 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095241718 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.111137973 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081358413 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074673631 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036721504 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.042271282 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036862982 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040434701 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069183751 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.040636146 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035584719 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112638128 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.054467346 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071155286 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075463408 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05126183 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035905671 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106638661 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.029112786 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107577411 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.031441542 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044751302 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.044671541 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040440488 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0573279 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10933114 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078474694 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079992977 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074274001 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072569426 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133578578 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135042935 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043741629 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11585053 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0367897 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036430881 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036525625 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079616839 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053084368 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083000224 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112956623 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053928964 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067234205 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038637968 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117199285 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.068915862 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070599551 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049996689 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042824489 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122806047 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043252132 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.046763409 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05501672 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07997681 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.033068486 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072331738 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047342994 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042424315 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.302821288 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.678959216 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053992549 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.036543662 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062528292 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114785287 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103064343 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060941319 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072814539 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.085936559 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.064738982 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.057040632 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074510727 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.164431128 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033639815 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055309797 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.067011754 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062766854 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065946471 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.063195283 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.048642027 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.056151393 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.051045577 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040578147 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071847801 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049913389 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059653227 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0705178 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045317449 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.050881462 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101111679 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.069332188 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.044989003 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050574689 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.066281907 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050137905 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0673042 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.028481277 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078218241 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052671285 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087161095 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.063910515 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07680854 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095495171 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057520277 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106998782 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.074466365 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091507853 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.051257935 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.039440914 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097459624 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.054142139 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03909945 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116375001 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.060951915 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.068197133 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070009786 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.06014978 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080708373 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08942761 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082533884 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063021788 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04016323 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06901811 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.070350142 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.050671415 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041111529 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.035226133 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.036941446 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075872288 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.050825201 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048805325 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082021151 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052207123 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.226497918 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.066753423 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085867327 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047316081 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064947626 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075356281 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053242 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071631724 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063860711 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.383989296 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140397895 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087105861 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093173573 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096610268 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.034004853 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.032597051 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.025126798 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073772129 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037301492 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.046567328 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035021431 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091226334 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038736464 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069341275 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.208781448 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03711773 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052417877 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053645166 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.025859856 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040531088 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068542086 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046226965 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037856509 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079348766 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039225941 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08981439 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071137692 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058591289 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0542843 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039018801 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074649619 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.061469678 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.090717591 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053478872 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.031508983 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082699748 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062550915 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100481762 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.028709948 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037396125 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091089464 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062290561 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091950912 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037202882 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113491892 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103212268 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059316109 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099694386 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028171155 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04623593 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048615465 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.08744631 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043867593 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073797481 seconds)
  done (took 47.498439327 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147151758 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143278343 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078711254 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.092318199 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.247001355 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.255988257 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.108801153 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.079575218 seconds)
  done (took 2.361226303 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025155109 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.039836953 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.037932566 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.301012806 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.061055785 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.02371473 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.029495088 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.041368307 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024800127 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.02401628 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.063355615 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.02478108 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024026686 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.476188843 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.023719272 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.029827772 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.02503578 seconds)
  done (took 2.433530524 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.334163464 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.927307525 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.509839592 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.642468546 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.111596416 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.578090609 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.033507878 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.042550829 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.660361221 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.408371461 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.105012626 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.186359662 seconds)
  done (took 18.824124425 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.035154659 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.185653157 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.183039283 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.031808081 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.031464232 seconds)
  done (took 1.830607983 seconds)
done (took 85.6983961 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.047303281 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.159759195 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.026068267 seconds)
  done (took 1.524823666 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.181317384 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.179309469 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.18199253 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.176442398 seconds)
  done (took 2.019083119 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.033021072 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.03576778 seconds)
  done (took 1.335203301 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.195802322 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.280729735 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.048011855 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.041065619 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.038325854 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.03959198 seconds)
  done (took 1.296730797 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028882846 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.028975323 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.02910304 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.028632494 seconds)
  done (took 1.289521186 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.137643043 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020764773 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.023130619 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.027421805 seconds)
  done (took 1.367811883 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040875506 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.04191559 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.072374433 seconds)
  done (took 1.339762355 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040297218 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.045586313 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.039437672 seconds)
  done (took 1.300202723 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.071445264 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.057522148 seconds)
  done (took 1.313427856 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035870737 seconds)
  done (took 1.215027308 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.052991064 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.058649995 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.237049939 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.206685855 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.23761956 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.229180906 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.032633731 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.032434048 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.02819521 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.027319152 seconds)
  done (took 2.317966035 seconds)
done (took 18.192136678 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036806311 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.149051168 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.39715039 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.044302324 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.610646016 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.392967736 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.6866337 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.048486056 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.057147225 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022901861 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040733991 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.587278382 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.69150097 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.106836697 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.675487582 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.098474911 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.519529627 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026099046 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02454903 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02539421 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.670344431 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025256738 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025542063 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025780541 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.518130624 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.29384331 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027082743 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.101286418 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025691214 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030154068 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.274662881 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026907612 seconds)
  done (took 12.44671945 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027886475 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.088662999 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.031352995 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.04428298 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.028484624 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027928019 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.030204941 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.02677638 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.076017897 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025963912 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046320638 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.025609997 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.030431755 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.027254205 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.049970091 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02613387 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.028784769 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026889204 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025803334 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.026592491 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.047535078 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025566766 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026526811 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026825067 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.026704129 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.042913597 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027578519 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025905365 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02644565 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.03063737 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031990802 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027382054 seconds)
  done (took 2.361722985 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.087197864 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.091576541 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.03239411 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.073406775 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.085414978 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.028890606 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.123688623 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.051765868 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.079596256 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02679451 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.046862214 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.026623767 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069284983 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.027675496 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.050680132 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02622985 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.029326911 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.027204293 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.026516121 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.026739835 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.048558565 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.026089308 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026412538 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.027155281 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.027079332 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.04454437 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027782741 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.026283392 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.026647257 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030367104 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.032066877 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027603578 seconds)
  done (took 2.674959716 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026816422 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.029914149 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.037501 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.041554592 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.024045803 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.02692883 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.027654034 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.024492419 seconds)
  done (took 1.510109112 seconds)
done (took 20.204231099 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037269061 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.023833151 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.027142549 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.045042979 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.030889171 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.150188627 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.021131716 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.031267712 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.028290796 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028492217 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.029852038 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.022484335 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.026189789 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020354312 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.027970011 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.021807314 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.154059063 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.026807616 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.153063518 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.155865616 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.024872374 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028176758 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.03082435 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.152265503 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.155515147 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.154855598 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.032269794 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.028857726 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.02258636 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.025454874 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.150171194 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.153081604 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.025333169 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.147781479 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.02245872 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02203286 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.027085485 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.023852849 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.155251261 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.031583215 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.024298864 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.030821135 seconds)
  done (took 3.74517114 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.15558128 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.162994349 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.154551879 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.034915598 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.031824317 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.034728081 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.160254671 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.031717205 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029937255 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.161764298 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026599436 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.031446464 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.033960102 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.024122662 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.031355473 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027264558 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.032056811 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023731519 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.03063508 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.03114417 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.160425917 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.023013682 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.030800657 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031878421 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.025891943 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.032589539 seconds)
  done (took 2.741964509 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032187537 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.049232231 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.05370145 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.113223122 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.072161028 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.042051013 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.042305921 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.053546369 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.061922209 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025354778 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.049369341 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.055013659 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.057163803 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033406089 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.068840982 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.046082552 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.039716126 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.027081917 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.032921852 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.063530875 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.050310626 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.046123538 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.061492606 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.047088185 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.024043401 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03531394 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033863366 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.043534315 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.033306079 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.038759435 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.029212091 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.028878767 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026140768 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.038809972 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.029383889 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.02330053 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.050037239 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.038881444 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040879541 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.067356115 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.03624141 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.026625851 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.056354871 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.098879242 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.024200821 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.027654687 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029169004 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038530732 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025832738 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.057557158 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.043072686 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.024413079 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.044844811 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.026153866 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026137086 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.043068169 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026582326 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.027284755 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037766209 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.031739274 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.048214957 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.03021288 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.048946932 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.024594006 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.037369233 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.026262247 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.02656684 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.023249056 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.063209858 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033184484 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.082386403 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.026297662 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022986533 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.038677141 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.037839379 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.033096516 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.024804418 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.047266659 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.039463742 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.028921391 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.037021125 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.028058218 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.027417519 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.064970594 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.024119817 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.023147909 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.023163305 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.028493597 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.029396442 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.026310355 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.03995266 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.024709476 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.028705166 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.041945353 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.025061133 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025762333 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.027877286 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.026663311 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.024267291 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037406036 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.029196349 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.026861017 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.039572914 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026647356 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028649068 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.041380033 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.035903445 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.024275132 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.025873518 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.027843441 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.026736605 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.030069682 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.028008042 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.026833456 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.030349822 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.033524106 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.031476881 seconds)
  done (took 5.61511074 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.259786491 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.251124678 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.025737716 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.249204919 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.034162023 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.176453595 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.263795482 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.259809544 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026387474 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.027622203 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.025289849 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.195011915 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.190271109 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.203280949 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.180732183 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02814129 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.056474515 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.202077156 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.261034265 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.25636173 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.054545272 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.034314501 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.028632863 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.027299049 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026257258 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.035423911 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.045177618 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.0353874 seconds)
  done (took 4.747421803 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.032055015 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.076686779 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.030468551 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.053727273 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.044711298 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.025800052 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.028149646 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.027089186 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.04417311 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.03173669 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025613895 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.030294102 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.030066039 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.028131866 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026297697 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.03277158 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.032856325 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.033800451 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.030026103 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.031254517 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.037612769 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.051568411 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.029794101 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.025398175 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.029355532 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.026128435 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030884762 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.034895673 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02488051 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.025319056 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.022219538 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030533053 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.042038877 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026957678 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.025489559 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.025848853 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.025238313 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.025777623 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.026016635 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.0239992 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.023845192 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.030892256 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.024074267 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.030485726 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.041003678 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.02818785 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.027339199 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02848016 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.02832086 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.022313398 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.029493131 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.028636562 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.028274737 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.035293551 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.030083027 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.028125245 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.026982208 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.04165915 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.031026543 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.024975856 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.024365689 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.024050386 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.027443115 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.032007761 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.043534792 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.027230606 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.024260067 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.025893852 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.026816922 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.040771835 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.024424548 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.032100655 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.022168036 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.025999996 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.028604046 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.028744538 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.02655013 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.023846787 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.024954054 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025571319 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.025470399 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.02586045 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.024413336 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.028316755 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.022635752 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.02327845 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.025706682 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.026557136 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.030948986 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.024345462 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.028698821 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027322004 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.02390829 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.027452136 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.030000674 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.027996722 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.04768392 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.033773362 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.025725514 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.021991629 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040715006 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.026555933 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024278019 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.026815706 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030517958 seconds)
  done (took 4.472300342 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.054599784 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.027708883 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.045829575 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.05834335 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.035011557 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.029933102 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.0388305 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.025352178 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.046162885 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.023157533 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.034336039 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022898295 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.038406938 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.033713253 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.026595783 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.0338562 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02625613 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.0447299 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.038549649 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022374572 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033212307 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.036910846 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.037938926 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044186298 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.044049359 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.045078491 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.038404659 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.02795989 seconds)
  done (took 2.286876713 seconds)
done (took 24.870628626 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.225520795 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.423635881 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.30405975 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.094503627 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.511718981 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.231603808 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.591083895 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.35998226 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.125441846 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.503208193 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.100705392 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.25659408 seconds)
done (took 61.999177572 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.444196506 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.490129347 seconds)
    (2/2) benchmarking "String"...
    done (took 1.561597065 seconds)
  done (took 4.362599124 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.739858498 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.306223337 seconds)
    (3/3) benchmarking "different"...
    done (took 1.272848272 seconds)
  done (took 5.617129165 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.510835542 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.831523286 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.577338051 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.340405632 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.303399483 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.604962275 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.291319329 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.807233498 seconds)
  done (took 27.978697325 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.305172163 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.517680109 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.699242752 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.720572196 seconds)
  done (took 18.438601124 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.654807139 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.542493672 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.550745285 seconds)
    (4/4) benchmarking "different"...
    done (took 1.88996305 seconds)
  done (took 7.956450435 seconds)
done (took 74.67616951 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.231871624 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.685658253 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.112870389 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.281427167 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.154324755 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.251762765 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.217851119 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.135242714 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.214560686 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.268765701 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.122264514 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.269159395 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.277971308 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.26336509 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.298594408 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.319879485 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.394685243 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.108504067 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.174929244 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.012750469 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.451494196 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.14392398 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.241973339 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.23995835 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.895194626 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.311728818 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.762639147 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.272547528 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.897293855 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.276444365 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.292971701 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.230982675 seconds)
  done (took 185.986249959 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.222655655 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.309437153 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.271521144 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.382959377 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.887895443 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.739387822 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.221604648 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.749306829 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.224437868 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.191770372 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.256808248 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.143132626 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.371564185 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.742604555 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.290969691 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.288448889 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.152696593 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.141974829 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.226776728 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.130777387 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.17300998 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.663309108 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.617422031 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.090084411 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.135663044 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.107439501 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.126786281 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.180869095 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.761412968 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.136054912 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.214132361 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.327416249 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.537739003 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.581333531 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.346939261 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.232039692 seconds)
  done (took 158.388367041 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.53717092 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.287483661 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.321756029 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.40100311 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.331097429 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.094350382 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.269234868 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.271582837 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.281293098 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.150828047 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.12431782 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.224093182 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.138054624 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.736724761 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.29652781 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.313132799 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.311870075 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.429360612 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.265612027 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.304267633 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.289326649 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.38745076 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.628260098 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.340428311 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.201185266 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.237456352 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.305848794 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.278648607 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.227115195 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.203921985 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.31408862 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.211545704 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.335174301 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.288700394 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.194307093 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.306485428 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.252873491 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.655531916 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.293433932 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.282615148 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.248934366 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.345683371 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.298715814 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.555774589 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.454352295 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.34822617 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.371820778 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.85154829 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.913074264 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.314027061 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.300848367 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.298492097 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.29529449 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.274210226 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.752725596 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.313168538 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.310340922 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.075766911 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.261242808 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.297851861 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.333211122 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.31145829 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.321347127 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.337681212 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.341530205 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.85963535 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.081477248 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.759496835 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.284036927 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.337499404 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.326370411 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.331043481 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.587947165 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.251919862 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.20642569 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.18790154 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.368849853 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.296536728 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.297892155 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.23563776 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.221438896 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.247819522 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.225245112 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.139663768 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.148704178 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.284584927 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.749402041 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.301196985 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.318653602 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.435398464 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.386038551 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.375171592 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.393025349 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.370404019 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.393903518 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.411412951 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.027951541 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.379732157 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.329932572 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.697031088 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.66510514 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.325168649 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.407007377 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.738410193 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.275807464 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.166554648 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.134941189 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.170685063 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.137933197 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.166055613 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.139689577 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.2068831 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.271558081 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.283096935 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.287989559 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.272221354 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.278294757 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.266548593 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.132435408 seconds)
  done (took 349.215330079 seconds)
done (took 696.442984994 seconds)
(4/20) benchmarking "parallel"...
done (took 1.25641817 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.528875858 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.225126398 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.362049114 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.5749565 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.525892328 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.482563344 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.50112356 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.615242599 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.543247926 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.474596246 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.48713946 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.38725462 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.494736267 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.425343286 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.452290092 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.452348972 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.360317065 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.808993926 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.492874239 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.447023569 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.480395724 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.442776634 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.411912847 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.331219618 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.396957825 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.269729841 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.487208311 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.333243204 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.315278315 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.349858911 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.364151939 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.379809067 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.313101065 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.379584264 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.353516441 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.440583021 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.267083508 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.367450811 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.294838859 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.34556453 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.348747471 seconds)
  done (took 66.566880337 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.441328442 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.324034296 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.45199399 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.424300969 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.914684384 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.522496618 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.648252206 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.463272921 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.453411037 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.612995659 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.613215512 seconds)
  done (took 18.990560782 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.554642815 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.461916479 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.570530908 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.565650609 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.657702764 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.547409243 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.606257034 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.401793992 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.467041785 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.589650034 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.61471861 seconds)
  done (took 19.332844686 seconds)
done (took 106.140245674 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.907553657 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.392033814 seconds)
  done (took 4.621842597 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.370399751 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.350393442 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.347839754 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.358379119 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.35560059 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.35097031 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.409307244 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.36087664 seconds)
  done (took 12.175797865 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.351042729 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.33073955 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.334235787 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.337894895 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.335914897 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.330214989 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.329142346 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.340572752 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.35040047 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.352259157 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.340181209 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.332137545 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.327774464 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.292046999 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.280334267 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.272612308 seconds)
  done (took 22.583615128 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.250780527 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.263749411 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.261336549 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.279489253 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.315586656 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.32863312 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.32755388 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.339831527 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.338274681 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.34821165 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.296488072 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.298796272 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.302897697 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.255358164 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.27663186 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.368671646 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.366070176 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.358581715 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.357942713 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.331214111 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.265602661 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.259700222 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.264066502 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.239298156 seconds)
  done (took 32.531661811 seconds)
done (took 73.251990583 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.927312562 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.26495422 seconds)
  done (took 7.475561015 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.304918759 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.324176952 seconds)
  done (took 3.985771998 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.254183495 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.215255142 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.308928715 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.29659452 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.275070746 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.284885677 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.276220849 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.300729887 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.30500389 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.275552617 seconds)
  done (took 14.092291984 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.222275511 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.163967456 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.144507407 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.17562482 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.196950514 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.218435697 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.223665021 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.208337192 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.288745465 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.306600691 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.319991194 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.516198333 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.350778538 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.578572482 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.316996459 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.30973561 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.339376255 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.34745463 seconds)
  done (took 24.394406735 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.350691399 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.347712776 seconds)
  done (took 4.03510814 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.303086747 seconds)
    (2/7) benchmarking "second"...
    done (took 1.266632619 seconds)
    (3/7) benchmarking "month"...
    done (took 1.249510975 seconds)
    (4/7) benchmarking "year"...
    done (took 1.254821191 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.252387875 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.244577411 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.295984674 seconds)
  done (took 10.178646261 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.791728582 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.500056203 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.553122339 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.785506548 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.799223556 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.143015275 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.828702369 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.14398444 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.03409349 seconds)
  done (took 17.891074587 seconds)
done (took 83.250495348 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.95418086 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.16503662 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.837859306 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.306959868 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.259250252 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.552289576 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.285332265 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.879475833 seconds)
done (took 38.489950867 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.498839144 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.174011475 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.377661726 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.213041384 seconds)
  done (took 19.943539827 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.402101964 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.964245766 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.425454677 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.372740753 seconds)
  done (took 20.654075348 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.83820074 seconds)
    (2/2) benchmarking "read"...
    done (took 1.85195281 seconds)
  done (took 5.021064842 seconds)
done (took 53.292501089 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.334515891 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.318252766 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.293483341 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.259356995 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.258145019 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.227231771 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.295330137 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.32386069 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.331425499 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.31651705 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.333129755 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.304996298 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.313800596 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.325657715 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.33997074 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.340099835 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.333356872 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.310346414 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.205376238 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.197557543 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.177492354 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.15780103 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.200097509 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.173498257 seconds)
  done (took 31.993748085 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.199791208 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.213753314 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.254271865 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.266877759 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.294651392 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.297854942 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.276445238 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.252698622 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.414769683 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.395419866 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.382705207 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.432958514 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.404529023 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.408588343 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.36104772 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.420657797 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.403135858 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.376482868 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.346675367 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.380601155 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.349150524 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.308416856 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.357789785 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.334328317 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.444590126 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.388845989 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.394182029 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.398509413 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.368995724 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.421491447 seconds)
  done (took 41.695234456 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.377581661 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.332027907 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.369882247 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.460286947 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.358703857 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.348990642 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.346664032 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.322118979 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.287916266 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.213572015 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.202595957 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.18031147 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.179202112 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.180220797 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.179497173 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.178478677 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.202531991 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.342933444 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.172737928 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.140780973 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.183750142 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.198623684 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.177728764 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.187101625 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.175336053 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.196591217 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.171699731 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.166303854 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.15590218 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.109026083 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.104486887 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.152042893 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.190956721 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.154231239 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.284848563 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.239788206 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.193393316 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.723139536 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.255667865 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.296820541 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.276226704 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.144749397 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.150513986 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.141834786 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.209631999 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.148375569 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.1410899 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.145088028 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.141329183 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.141858351 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.142448241 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.143005252 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.158047713 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.12887607 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.127556137 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.126633314 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.128144275 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.125680052 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.12705397 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.12633344 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.126657394 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.201283982 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.145773469 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.145771374 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.517863954 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.145821471 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.204509257 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.140421123 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.134895697 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.347883285 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.138203999 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.339378422 seconds)
  done (took 91.568199324 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.132701284 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.146323102 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.245025647 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.240011322 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.168382795 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.105211741 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.098284519 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.107838799 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.759752585 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.101144966 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.104065165 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.177053748 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.80885039 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.140725259 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.140713006 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.216487719 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.140550615 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.140359032 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.139577355 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.138974884 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.140266772 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.140295308 seconds)
  done (took 27.651173116 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.181401532 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.155422542 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.188967186 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.155060102 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.154703336 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.156006323 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.182177017 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.155614377 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.187576952 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.179430466 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.183066719 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.183357953 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.146517309 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.165553694 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.165691377 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.225204867 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.170430441 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.223064219 seconds)
  done (took 22.288283412 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.300282336 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.295630162 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.213887426 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.172709302 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.387548691 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.367401323 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.233173315 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.305410442 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.177715866 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.29245546 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.310557662 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.174278726 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.361911286 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.237041176 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.174721576 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.362664577 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.183134923 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.144148655 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.381494271 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.341168223 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.424807822 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.37030498 seconds)
  done (took 29.326849741 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.297646339 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.307221386 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.343375684 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.337036114 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.262002448 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.26333451 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.320270385 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.300800056 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.278923467 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.30230315 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.300283131 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.260927187 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.351731084 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.313407366 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.352807172 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.302458887 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.311357729 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.317154119 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.300053846 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.262783348 seconds)
  done (took 27.332084668 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.261770435 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.262260953 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.263644128 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.26148351 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.261845363 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.262583518 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.263368437 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.258208214 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.256114658 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.495578477 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.25641127 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.257756044 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.25915372 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.223274803 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.162749137 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.117505226 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.136895958 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.141839918 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.158429965 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.213629243 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.463007476 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.229831383 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.230586265 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.224743201 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.227714461 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.261166801 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.248424884 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.210906666 seconds)
  done (took 36.118405154 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.197132508 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.110226754 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.101789418 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.102063237 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.111897919 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.166335322 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.102406002 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.10763834 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.111498794 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.105108634 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.10454975 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.10507478 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.103464682 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.17536976 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.165666304 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.12632819 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.175687539 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.103583248 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.160547515 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.087288817 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.104732171 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.195231337 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.107862154 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.112964557 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.086687947 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.108295339 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.098847847 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.096892257 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.098261894 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.097859213 seconds)
  done (took 52.806478057 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.118847511 seconds)
    (2/2) benchmarking "in"...
    done (took 1.12197639 seconds)
  done (took 3.324181063 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.097974229 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.198859593 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.099253952 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.296744172 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.264154327 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.275999318 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.265164561 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.202827274 seconds)
  done (took 10.785544771 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.097699978 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.525496238 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.11882115 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.097545399 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.100161519 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.601366594 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.047169093 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.027600308 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.921693214 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.968816073 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.208883473 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.570791633 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.071824835 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.429368209 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.219337632 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.96335708 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.361396555 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.695522507 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.206655136 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.23164386 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.858833685 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.206776775 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.101053875 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.106843447 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.098203661 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.004542684 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.001664259 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.542201236 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.310034642 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.230048622 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.885222972 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.186603262 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.09838892 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.406511586 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.222735326 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.099949819 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.267540648 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.213301597 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.099615455 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.09769288 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.892078587 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.821831689 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.394376254 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.337190647 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.191746526 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.098767188 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.09786139 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.098777903 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.374867338 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.7157383 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.073893959 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.085078341 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.245880414 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.108341444 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.845166295 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.114187118 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.100231076 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.007483655 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.718474328 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.371062198 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.424984247 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.220636899 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.153083519 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.236044343 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.106984106 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.280124245 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.917478269 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.919148327 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.911409346 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.218423548 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.62641565 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.118203325 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.097692304 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.098100276 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.04277799 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.413871303 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.097885869 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.09841723 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.09778215 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.098212504 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.412042038 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.223207664 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.939718728 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.246420969 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.279834682 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.590968784 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.234538397 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.098184571 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.778318604 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.954977203 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.207917761 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.771529028 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.337396285 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.245299472 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.118213566 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.465761527 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.139426726 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.109267417 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.951219168 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.742601223 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.111943067 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.096639734 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.394535823 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.129868139 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.100604529 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.097659058 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.815208294 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.233043119 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.237901703 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.145695493 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.098366622 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.097284138 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.684710476 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.213507578 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.10002903 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.54928018 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.074685892 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.636155968 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.370695645 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.456868499 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.461388261 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.093413484 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.354496136 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.917101436 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.1010417 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.655008719 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.917998798 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.681624342 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.36964557 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.230473846 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.974047972 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.170110521 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.097160975 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.23171644 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.182438764 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.098054594 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.097445522 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.097535005 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.096870992 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.098064723 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.222986406 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.532155716 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.980991832 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.113096445 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.343037242 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.226182704 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.986870641 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.340826083 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.803530961 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.244771306 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.097124816 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.896799762 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.378960272 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.874792971 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.234371048 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.097929735 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.097503509 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.94895191 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.139494299 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.204078182 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.098156059 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.70913904 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.213937288 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.100633423 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.098569719 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.564926952 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.244437125 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.098604709 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.223184274 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.931249313 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.99631112 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.113941376 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.416958306 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.222280945 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.099182618 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.098420064 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.09754873 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.896199217 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.728179983 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.265001036 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.708078874 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.867216213 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.19795045 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.269558669 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.199239592 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.405831059 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.346359986 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.247358861 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.099118008 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.097436201 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.097751729 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.570802615 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.936701343 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.183058301 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.979377137 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.121378333 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.072493503 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.202884885 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.905856742 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.116942709 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.8319669 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.123822682 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.209675202 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.099303294 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.098215713 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.267472234 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.299077594 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.246957756 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.69272318 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.114568512 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.098183296 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.813269629 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.234598231 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.786422943 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.21301657 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.941254717 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.235084767 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.232543151 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.245120097 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.793796027 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.236292449 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.098620772 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.836860977 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.256457759 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.098363185 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.190313675 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.818965358 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.916035397 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.843514119 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.761979532 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.051889599 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.694230138 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.367827961 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.2463839 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.972844751 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.20799139 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.29928387 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.147806494 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.62647022 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.121028957 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.854751297 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.117252967 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.892830461 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.113566919 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.150121874 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.230777248 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.615468801 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.225269052 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.099249565 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.283560085 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.20193206 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.809517831 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.233755539 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.223488648 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.467518478 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.050916657 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.208078914 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.308545505 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.148674888 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.026172927 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.072826854 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.449175315 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.081078317 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.105776738 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.204726459 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.908400375 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.268077877 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.348774161 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.242876543 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.099061501 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.098515795 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.327826001 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.193859697 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.09928841 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.443043757 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.095094859 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.15011623 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.203586835 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.101961316 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.099534798 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.333923743 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.29578607 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.422463804 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.618463335 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.707473043 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.979890492 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.234024619 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.803645093 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.239635281 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.762768245 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.212187163 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.101854632 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.824185044 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.234422781 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.388450223 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.254039877 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.213223883 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.781153671 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.270604472 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.408977819 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.264954797 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.23044235 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.904085175 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.685134071 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.359023202 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.524523785 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.142738818 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.61681766 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.172137997 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.64196095 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.095758377 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.774855741 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.184931538 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.163071615 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.098981801 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.100301838 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.601757908 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.067383937 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.10190553 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.890753384 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.821288651 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.020304246 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.830977674 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.214609566 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.103203705 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.098811832 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.099779537 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.010596116 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.227321058 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.479556697 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.243220504 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.100104262 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.09944922 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.081515242 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.471587875 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.965355515 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.025506795 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.092133646 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.244400085 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.100002894 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.099710274 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.099890473 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.099974815 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.099163726 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.100240055 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.617393618 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.115345031 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.695124665 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.216021314 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.102572608 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.315051588 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.171097122 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.100227154 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.339231818 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.190567631 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.213995533 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.173607534 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.100270357 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.520034326 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.247716544 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.071373348 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.396735564 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.404102727 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.348937914 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.724943939 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.155671458 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.547636771 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.410252643 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.874006534 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.102707971 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.007407408 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.204461946 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.898094774 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.090450554 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.583752237 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.687844577 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.087787404 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.407615219 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.148419922 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.445448403 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.241990361 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.174011174 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.100010535 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.100128889 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.189423703 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.355091846 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.151405403 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.39221121 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.318534904 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.089058903 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.406688306 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.202942826 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.339084852 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.135005092 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.115154469 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.099892867 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.099426311 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.612386332 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.012662937 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.197960547 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.100856202 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.005367275 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.0138095 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.024830461 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.734836574 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.980382063 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.243644576 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.100819566 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.302088915 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.157402857 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.934957361 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.124526344 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.897125888 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.442350565 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.152400177 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.322281479 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.498552485 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.844292393 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.541032827 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.223126895 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.099625237 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.489673518 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.115691328 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.250073988 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.000505235 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.447617529 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.633677629 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.519090571 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.364505855 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.222909027 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.999139493 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.635167669 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.089616794 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.103976914 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.956443721 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.250458792 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.430530527 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.081828976 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.392246236 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.248413534 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.740594871 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.799885243 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.246765543 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.722834837 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.248192142 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.100612676 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.931130456 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.021649736 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.324030442 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.228901296 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.100772107 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.115603583 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.833411633 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.703952579 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.347913475 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.184301978 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.100115089 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.902637845 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.787241112 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.214573656 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.103234043 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.100814158 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.598171721 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.154533119 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.100193449 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.517903923 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.720541365 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.246754352 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.562736542 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.215436027 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.249027717 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.389672534 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.526377422 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.461767481 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.168223033 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.101509329 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.100147174 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.099642256 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.681289579 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.115589947 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.101017287 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.695746969 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.247834883 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.861198569 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.027658312 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.370387224 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.177377992 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.544300975 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.247215435 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.577726239 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.971371563 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.204228696 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.327031502 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.151811329 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.221629271 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.874774112 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.212282421 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.10042726 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.06197444 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.469667973 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.474322481 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.557869171 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.466699077 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.194111673 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.814048172 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.219001135 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.894766855 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.12286982 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.101364688 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.563449106 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.270476567 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.561950818 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.260372702 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.626123297 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.22411519 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.379347775 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.3401257 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.199325298 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.102034504 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.101083453 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.15527286 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.137438613 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.639687256 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.981361816 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.591424453 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.240890351 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.8889771 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.641581968 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.014212385 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.284458726 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.406405627 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.405928728 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.139306105 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.087669633 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.496345978 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.19107525 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.272701923 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.201530058 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.908426238 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.180407892 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.100264708 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.68732389 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.116199317 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.100534031 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.101293804 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.007532713 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.902070713 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.212803208 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.319740342 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.205151555 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.101318654 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.723215902 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.485027239 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.142939176 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.100905401 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.101478454 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.987835429 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.218995265 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.101399258 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.462741124 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.263110602 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.449829039 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.936158837 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.570058269 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.198390749 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.101323566 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.100959264 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.813710671 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.702552723 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.139983067 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.387537932 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.132979588 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.588256846 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.080483887 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.600101039 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.652230627 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.130326688 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.231425995 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.102034734 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.121471559 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.042521 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.023164123 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.844337583 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.560750911 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.199622283 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.911370221 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.112884409 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.16916078 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.248285217 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.177769798 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.100694288 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.100652336 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.101310166 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.562501418 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.086744674 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.104915209 seconds)
  done (took 1433.773044035 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.36894971 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.100867364 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.100765686 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.10061811 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.10089604 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.100869484 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.100667112 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.101066545 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.100451735 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.100947767 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.100070969 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.100887672 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.101012145 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.375328832 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.101095884 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.100796268 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.100920418 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.101005154 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.100876857 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.100396923 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.100603893 seconds)
  done (took 24.747080123 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.101823488 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.100837874 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.100255636 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.101904223 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.100506857 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.101709932 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.101343126 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.101949387 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.101922337 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101093964 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.10209082 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.101871397 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.10040689 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.100711549 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.101129263 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.102348302 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.102088772 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.101377923 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.101795849 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.10044804 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.102181245 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.100857504 seconds)
  done (took 25.318710762 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.101172586 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.100852653 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.847914541 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.232786157 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.101983975 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.101916972 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.101538186 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.301999415 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.148140467 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.99769366 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.458917411 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.138137292 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.104406533 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.289967706 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.20319802 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.10280322 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.222874646 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.102054329 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.101498799 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.100888992 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.101704578 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.338796614 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.24632031 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.101612359 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.943437734 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.252170629 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.102109434 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.101661421 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.101123109 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.07427237 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.201990657 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.105855191 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.014989324 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.8866735 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.457093874 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.000928715 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.214558961 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.104607708 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.101455109 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.101361773 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.291042253 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.875025153 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.104542061 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.10151209 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.407831499 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.224720115 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.102527639 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.409622266 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.136286835 seconds)
  done (took 88.156295249 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.101682475 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.232908033 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.164308152 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.101725175 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.224557029 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.101896868 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.156515556 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.102082088 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.100806573 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.101426501 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.238896042 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.257016186 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.101949711 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.102756465 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.186577584 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.101454275 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.100917901 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.101651686 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.101617844 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.101661699 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.101378592 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.152906252 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.216456308 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.253967843 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.102164662 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.101507334 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.101870719 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.1020309 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.245576536 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.101493171 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.102724792 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.101932523 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.227609621 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.209133763 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.101309812 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.102498037 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.23181384 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.102132185 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.102534212 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.100841782 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.102508819 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.102101666 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.156018414 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.240899784 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.101271452 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.205915353 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.101199962 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.101597069 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.246581797 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.102643615 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.1021617 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.258141174 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.102730139 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.101712476 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.102952994 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.222106889 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.10160072 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.101534875 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.102628879 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.242744807 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.101705094 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.102145904 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.259376758 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.102224828 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.102419233 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.272013095 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.211018759 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.102999833 seconds)
  done (took 78.890077988 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.101192836 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.237612484 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.277114358 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.278019433 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.23776466 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.233941351 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.241594864 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.237898717 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.237742612 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.240790885 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.237474924 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.188746868 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.208162778 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.187713353 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.240957754 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.22332314 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.226176189 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.223365958 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.241233 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.241577508 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.226620111 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.276473019 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.237833693 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.277720731 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.456681491 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.208059558 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.238062193 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.240767081 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.280617684 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.238095685 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.455917414 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.240454656 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.238421068 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.280962836 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.453890133 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.234997988 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.101437858 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.23766618 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.240634852 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.238084821 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.208456965 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.279417023 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.235480363 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.208343771 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.23188419 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.235269134 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.27919822 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.452871274 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.18841847 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.241075805 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.238415581 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.279701299 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.235530135 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.233233085 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.279105591 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.19704004 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.276490248 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.279710131 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.241108428 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.276540962 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.278161346 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.197060202 seconds)
  done (took 78.608134775 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.102573109 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.102237998 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.186010352 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.101643728 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.102428571 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.186814542 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.102803308 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.101822016 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.102279138 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.102239438 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.10265351 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.186250078 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.460111303 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.102335798 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.186532559 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.460557528 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.185939003 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.186803171 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.10287759 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.18699148 seconds)
  done (took 26.440252994 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.101285921 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.102118961 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.101587767 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.258696008 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.10249837 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.23814836 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.102721962 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102430875 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101502699 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.102288524 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.102016417 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.102591456 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.101443543 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.258938965 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.102442705 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.237547372 seconds)
  done (took 19.306942569 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.102049495 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.102337968 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.103654431 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.103304243 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.101530716 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.101789281 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.102181847 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.101656589 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.101672245 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.559916434 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.102796444 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.1023351 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.102376213 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.103026375 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.10119885 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.102741073 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.101826072 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.101341616 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.102708077 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.102032545 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.674967544 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.10194608 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.102458701 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.103176341 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.101822229 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.678687187 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.101448767 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.101747949 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.101997992 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.102916181 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.10191844 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.57606145 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.102068012 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.102043041 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.10174483 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.101658148 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.102818197 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.102444773 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.102578403 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.102311154 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.103157536 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.101997992 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.102440499 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.102563269 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.101753927 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.102828427 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.101731153 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.554723738 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.101954049 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.102637604 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.102533146 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.10209919 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.102568291 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.577452358 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.102696674 seconds)
  done (took 64.722389995 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.143921264 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.15646286 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.101902845 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.102418318 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.158039857 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.140899413 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.144393252 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.11697837 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.143112315 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.102607061 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.16406347 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.117895341 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.140246021 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.156201728 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.164665023 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.139253228 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.10170073 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.172825865 seconds)
  done (took 21.556538365 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.101715813 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.101797018 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.102948423 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.102275283 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.101593419 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.102791416 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.101473639 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.10257646 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.102397018 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.101284237 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.102065574 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.103538869 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.102522118 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.103067102 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.101429513 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.102299399 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.102028927 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.102573584 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.102085769 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.101843161 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.102570663 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.102389746 seconds)
  done (took 25.337746973 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.13429718 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.147416188 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.102807872 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.102624508 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.102808863 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.125821674 seconds)
  done (took 7.803919109 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.154235005 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.168620754 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.137861657 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.150383541 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174421938 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.180093803 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.18728046 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186842583 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.175973186 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.400792637 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.191379823 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.179173098 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.17765904 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.232376383 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.168185513 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174221139 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.196866928 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186169339 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.1530154 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188700182 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.198155508 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.176758452 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200446973 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.179403987 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.197530066 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.232477361 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.177827145 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.403016304 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.185312114 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.175179242 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174559057 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197317365 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.181225638 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.394270374 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.148225285 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.176540241 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.191212273 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188695528 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174527884 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.227399014 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.138678711 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.168801809 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.175609506 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.196848243 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.1771805 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193098746 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191188026 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.202887143 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.196991012 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.400923562 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174131392 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.226830081 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.16605554 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.180474493 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.177658793 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.390380679 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.398270638 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.225174328 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.168015628 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.402015958 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.228977678 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174465472 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.227001658 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.404669034 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.168394091 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.228488644 seconds)
  done (took 81.038784428 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.227944126 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.144282304 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.200083077 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.406256225 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.226704044 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.187458292 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.194238221 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.196394483 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.200700891 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.16508318 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.193121249 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.196185099 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.228271414 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23302313 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.189912062 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.191424094 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18848193 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227252667 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.165028909 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.394803574 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186998445 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.228453466 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.230021358 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.228604332 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.393688739 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186323944 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.195000088 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191458457 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18602816 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.19191823 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197803205 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.196076057 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.230759812 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.144132067 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.228216158 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.193282682 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.19365841 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197805046 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.194656304 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.181550574 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.232120141 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194241143 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.190885016 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.192864627 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.39559665 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.19576181 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.201970243 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.164796988 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194305655 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.16520982 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.395728335 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.393723013 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.408449298 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.228431881 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195819649 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190398468 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.194853557 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.19492305 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.196853719 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183280589 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.228305364 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190318688 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.397832283 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187496053 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.20119042 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.2284787 seconds)
  done (took 81.767688527 seconds)
done (took 2433.697952659 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.183811499 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.205746683 seconds)
  done (took 13.478184847 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.102885845 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.102973946 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.258908226 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.103827483 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.108147071 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.196811205 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.194200535 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.114037122 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.103244105 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.193224404 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.103085536 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.240188562 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.208745372 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.103514037 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.129792632 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.113392083 seconds)
  done (took 39.483397474 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.209307502 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.645285738 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.059405192 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.913693283 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.139419463 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.861042329 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.431380042 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.804700521 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.408547257 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.555588297 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.365656806 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.99905294 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.913997744 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.269374727 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.567569911 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.617988711 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.69386387 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.74196435 seconds)
  done (took 60.287240614 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.098097418 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.254979421 seconds)
  done (took 8.468618505 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.117810154 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.136902049 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.127559467 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.134121333 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.128332722 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.113026087 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.109976005 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.113577944 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.116923544 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.131066937 seconds)
  done (took 62.337229049 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.135704809 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.583718 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.411270597 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.568430269 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.735166765 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.589051927 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.267624876 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.504634675 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.199831748 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.090765984 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.40118108 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.484345598 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.962371292 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.403292547 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.741019294 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.375756457 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.881176604 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.523976698 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.432913046 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.544828741 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.346565995 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.270542764 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.558827392 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.96556483 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.114202388 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.740104431 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.27895815 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.256904979 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.176844338 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.273506293 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.511434317 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.119148531 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.437872077 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.110683379 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.173508623 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.776672999 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.81772183 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.303313897 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.675799065 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.455354911 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.482455422 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.795038651 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.17268013 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.784695492 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.260803762 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.483771997 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.144017591 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.34353194 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.18735503 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.221436957 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.616536197 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.284371278 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.23941617 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.221219405 seconds)
  done (took 154.545499373 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.091504317 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.477050702 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.245061688 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.094918689 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.503065268 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.311409073 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.720478221 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.60971331 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.11593873 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.329002055 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.272223314 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.226865738 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.0941647 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.093390181 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.097219127 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.093338722 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.281390575 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.627403864 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.113394052 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.092621001 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.301220759 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.337041196 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.229879235 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.096076646 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.266440129 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.342402312 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.525373192 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.234056539 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.476641126 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.092479008 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.553517087 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.112691722 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.0953363 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.992686779 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.502566553 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.464493499 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.526109175 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.103160349 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.839202621 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.093861553 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.78369522 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.300695464 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.433729716 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.240971879 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.349015312 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.331241689 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.698544885 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.091911484 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.851094349 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.278259665 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.319168343 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.331956922 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.382598789 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.098596083 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.643571913 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.094404637 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.092624557 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.353652049 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.251470689 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.221271076 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.094619716 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.094290656 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.09362861 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.341678719 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.094598335 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.214791135 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.09350365 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.09515404 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.216460796 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.222672732 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.256504837 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.346585052 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.343006368 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.321562288 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.085384408 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.334208115 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.516202015 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.341088426 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.09510054 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.092436569 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.505643345 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.524869281 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.262778484 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.340388798 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.411239989 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.381724077 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.62068986 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.091496209 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.316368174 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.260251967 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.459187298 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.359894998 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.453663302 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.973206567 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.092849038 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.093776107 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.380011932 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.227912865 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.094165113 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.610656869 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.366807497 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.721922393 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.274272722 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.559453741 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.205738223 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.094582941 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.659939579 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.103477097 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.326126661 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.431728824 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.133017938 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.145623593 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.257294845 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.092255649 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.092960921 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.512458468 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.478705386 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.099736781 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.266655849 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.093986696 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.35079445 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.901652373 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.330207225 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.873978463 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.379318303 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.320711179 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.378864029 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.094235477 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.440422789 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.367549704 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.499419771 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.419219348 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.094060709 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.09412762 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.404227695 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.093817752 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.092829855 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.271569845 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.056678143 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.273119691 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.094079181 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.466694366 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.2586711 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.467437962 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.093060191 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.366570819 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.345780449 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.464443135 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.095887785 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.241348686 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.093288704 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.056310171 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.263161327 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.092538914 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.094364501 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.943545988 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.094674716 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.25371281 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.328864246 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.777487743 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.468472514 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.45494185 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.091774343 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.513242342 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.299115017 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.543684717 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.60337755 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.274963803 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.834017611 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.346519404 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.101888051 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.34587727 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.393004115 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.092262315 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.093912774 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.816162641 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.220212295 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.092542574 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.296658482 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.779698676 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.558596201 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.33185003 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.094299236 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.457767927 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.109399136 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.302309166 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.635988651 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.360341218 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.101918476 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.102994498 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.103027344 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.143890116 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.321022279 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.342018628 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.655917882 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.248229352 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.39860796 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.316837873 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.420480706 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.555632374 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.102987409 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.427361848 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.09400274 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.490908318 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.100639765 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.262373754 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.350580845 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.097205594 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.316372172 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.45804674 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.163718047 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.490312767 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.095620652 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.093420973 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.673641624 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.268286457 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.512318142 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.092897172 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.204041821 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.462226792 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.224572675 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.297318398 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.34206433 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.094207699 seconds)
  done (took 726.160176664 seconds)
done (took 1065.848452526 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.090467823 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.095769056 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.099402557 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.099110543 seconds)
  done (took 25.473672696 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.078354059 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.170223724 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.281689215 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.104240577 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.454086655 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.161084658 seconds)
  done (took 11.34648308 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.090719411 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.096886961 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.101006563 seconds)
  done (took 19.377436736 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.379378468 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.577553626 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.2655429 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.192006397 seconds)
  done (took 6.510809918 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.127560652 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.130409197 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.103063515 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.135157585 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.103262802 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.103054286 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.133244611 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.121405866 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.102954296 seconds)
  done (took 11.153821836 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.564117472 seconds)
done (took 80.516372581 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.36275388 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.402404532 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.105772196 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.411089327 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.229475214 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.46680176 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.221554724 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.115512315 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.452345923 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.526807607 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.549413134 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.231294705 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.508237659 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.520956984 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.353385279 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.130364832 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.112255843 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.16488452 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.689736527 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.268151921 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.510819385 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.236557721 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.091199686 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.130406338 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.037595322 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.237905863 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.350884906 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.905808539 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.055256837 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.12711266 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.187449686 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.580629245 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.357805418 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.451204446 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.199947781 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.001340685 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.523356961 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.105520279 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.382218288 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.607928975 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.394137973 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.225741812 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.090910104 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.270329275 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.453661941 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.12112412 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.054138169 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.26198185 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.573778165 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.267974332 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.543169019 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.105639188 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.71830645 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.179959243 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.18559655 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.093237074 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.006199894 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.625734764 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.255167612 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.416814848 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.116560736 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.226393715 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.010721763 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.134557422 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.209112726 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.378779031 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.516472708 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.191261543 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.556193082 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.130367846 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.112472853 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.127216835 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.785674473 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.246729693 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.091266243 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.246551201 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.427004787 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.259841834 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.09928345 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.285687131 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.331010285 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.094261218 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.242083807 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.456189513 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.267799117 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.476223976 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.539973472 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.448723794 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.477992805 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.956474277 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.686223828 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.992446343 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.204544529 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.140290318 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.520782701 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.216388866 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.863919226 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.596765024 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.239887368 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.637662648 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.132278082 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.112412115 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.451364323 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.407174047 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.903045008 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.137409414 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.228059986 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.092182401 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.394315792 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.910700349 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.191325029 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.654314035 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.106067915 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.163802745 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.629909975 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.105324426 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.455287052 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.538614895 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.15899183 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.099778777 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.394805952 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.10587912 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.224077957 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.594019643 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.477630841 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.317338885 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.097034528 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.788555417 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.105021323 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.292273981 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.108346495 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.686051974 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.620056638 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.136127033 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.393876191 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.227263575 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.091680788 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.452254 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.151963626 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.326471738 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.407400131 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.409684983 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.223215637 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.091940564 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.453005018 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.104975829 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.343833011 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.445113716 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.268764679 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.418330693 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.230288049 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.11559377 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.015043394 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.501334375 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.759976876 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.65895882 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.346391962 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.235584995 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.613925301 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.454740867 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.924852749 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.195947703 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.151729533 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.104635938 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.119738773 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.164904146 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.092965884 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.103372666 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.393872295 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.340316946 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.597415098 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.909790699 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.007248796 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.427201997 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.256987987 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.019158636 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.693600146 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.110327366 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.410985116 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.607019932 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.345112457 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.131141148 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.095661309 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.122936463 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.801517798 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.137707724 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.378246516 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.596882197 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.430884129 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.452427943 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.361937143 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.141370948 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.434832642 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.370517938 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.367547765 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.317648234 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.483620562 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.243734239 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.434808749 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.20944023 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.373488359 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.105277019 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.185910822 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.341876002 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.600503094 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.483384531 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.328838024 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.272093362 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.414472215 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.104835651 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.24624439 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.202910138 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.476326705 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.127021736 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.278229456 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.202172498 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.550610497 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.989855323 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.222533742 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.421848497 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.25325904 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.247577694 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.619032778 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.116945002 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.406371354 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.267651097 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.295811403 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.347155985 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.134396151 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.231074282 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.299855261 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.235027644 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.331977318 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.951360533 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.499775351 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.547778291 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.229798263 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.092231998 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.632845834 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.128547874 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.115325468 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.348385183 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.26330158 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.404491681 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.230801579 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.270601573 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.185137864 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.135758316 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.598145779 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.966437992 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.671848736 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.026248993 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.135688158 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.092308819 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.53194022 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.462075616 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.16748461 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.239308296 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.685802984 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.140110659 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.264572198 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.108227329 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.107762446 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.851103918 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.237300273 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.348695692 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.58245748 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.108627796 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.791913778 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.164622589 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.528687448 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.617011742 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.158042228 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.225087796 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.298790381 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.118151831 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.482392798 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.126989664 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.274598903 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.474176132 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.224969813 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.213360933 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.095330537 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.141975176 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.592996417 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.343510754 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.583268833 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.133638678 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.437597452 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.103570871 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.335821371 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.123791952 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.230155484 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.443529243 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.258496886 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.442386158 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.108110423 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.263159329 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.354433836 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.122947806 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.123732069 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.241880738 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.577448081 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.445259918 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.385757654 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.256737222 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.061171149 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.346046557 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.103803409 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.822863661 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.246093738 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.211358728 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.748144917 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.590574662 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.106969533 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.313244126 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.095169866 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.457252237 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.130976373 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.112876954 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.257692647 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.186662181 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.092481021 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.787097101 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.288133802 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.582771657 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.258920018 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.019224371 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.148339927 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.27789872 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.215966017 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.380558012 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.888680182 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.120657498 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.242545283 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.719862229 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.307188655 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.136217698 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.354649584 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.106596937 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.695582645 seconds)
  done (took 861.778250167 seconds)
done (took 863.040322289 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.287575979 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.468302303 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.335738318 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.026439179 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.899759566 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.739530751 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.35434763 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.329426393 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.173333346 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.350878646 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.016841811 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.899735965 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.190946266 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.214307456 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.194197645 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.232643586 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.315588795 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.335519649 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.213654922 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.160692302 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.611395009 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.160248223 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.514329868 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.392479553 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.469885515 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.201188562 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.301071442 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.485959811 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.485887916 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.283615472 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.295680829 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.318152737 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.929070539 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.340801482 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.193274517 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.179180014 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.976139712 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.191105714 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.29343497 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.179008001 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.470474033 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.222994923 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.810471167 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.960005473 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.876123912 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.511729518 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.937267816 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.198805889 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.221444567 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.299007388 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.29100145 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.298807569 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.486668052 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.305253457 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.989366659 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.955098323 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.486932665 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.985738568 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.831853913 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.298981716 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.4907052 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.193192163 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.299293676 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.326475955 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.213865481 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.383343013 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.510301738 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.295255437 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.318728557 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.358185743 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.343200816 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.320994057 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.211019038 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.224996627 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.235992147 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.350978924 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.94022773 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.335024457 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.886739656 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.200929698 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.042292813 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.013805878 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.049642563 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.173443706 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.288045361 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.870901565 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.044801011 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.042919326 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.212487608 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.317638143 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.016198502 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.334838388 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.555400847 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.301312989 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.288061683 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.333034761 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.055354622 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.286412507 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.060960495 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.317571 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.877416219 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.301484084 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.135052333 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.18719365 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.200136028 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.293081587 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.302415967 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.513715593 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.322260506 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.255878592 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.469466235 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.23523898 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.321423197 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.213963316 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.17295345 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.874735297 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.372314398 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.946470145 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.286159301 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.76837164 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.393879423 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.186816695 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.504877866 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.393559375 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.287328985 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.189219599 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.200078036 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.03410182 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.199280632 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.193997023 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.278412152 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.546841912 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.300119338 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.033989172 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.322946957 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.884718062 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.334816855 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.322406402 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.172538548 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.029390419 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.18997839 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.048448373 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.392326295 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.474035947 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.335911179 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.392880452 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.212365963 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.371744236 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.286119839 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.213864179 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.321309442 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.225779697 seconds)
done (took 243.460473873 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.449975219 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.320647036 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.364832373 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.39084084 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.458442833 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.463310292 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.169164846 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.526117619 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.225412705 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.516247541 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.399413798 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.99155604 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.342703323 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.324443692 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.46063014 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.340963918 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.225789632 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.361404965 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.54829565 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.464695023 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.894596912 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.355489364 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.25401471 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.516251735 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.092633309 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.893400208 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.456400995 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.231161282 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.38197426 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.900330782 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.902117682 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.366036511 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.455058331 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.903723854 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.61145392 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.853755219 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.460033165 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.968202696 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.449745328 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.45060088 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.364148344 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.093591628 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.905639173 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.920007556 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.263350285 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.460581198 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.168410925 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.090024666 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.094185838 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.866105231 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.363718035 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.970209624 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.98690151 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.43009243 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.322317354 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.865441925 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.5789318 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.593325618 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.465094748 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.402769178 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.451083244 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.524994688 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.548338072 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.299971734 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.908615009 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.381559842 seconds)
  done (took 148.153417734 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.531248039 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.398365751 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.502439142 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.508265397 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.670198778 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.52137326 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.61174601 seconds)
  done (took 13.834488439 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.171783333 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.147130965 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.350707068 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.350311004 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.156675441 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.279282276 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.237809986 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.923092752 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.397887063 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.19121495 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.464363216 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.343938217 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.836029633 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.945039321 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.238473808 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.389298365 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.117104023 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.21702962 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.210588033 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.408391066 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.915018852 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.89870166 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.338462817 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.239005359 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.159846331 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.191977363 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.147246846 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.124105826 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.189731992 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.136444869 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.163016358 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.262837839 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.149209477 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.879693025 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.172966987 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.463905001 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.156178091 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.198092175 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.291151652 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.094868992 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.130477833 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.155765716 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.29063914 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.160909721 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.134294418 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.339170959 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.136404683 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.163655948 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.131455454 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.146956198 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.338134094 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.14990192 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.172541161 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.835994741 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.35788467 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.883876564 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.216875524 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.143964302 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.145333398 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.205322642 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.148088838 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.411867725 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.393916243 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.130140818 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.367213147 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.434370994 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.151147277 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.131097953 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.133770919 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.372289334 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.144401217 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.343793664 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.15184631 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.199860594 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.207426841 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.286219379 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.340005378 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.947704338 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.908975571 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.825538267 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.12074378 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.133632917 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.441504315 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.084013467 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.836642644 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.134007187 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.197517355 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.823976381 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.055167723 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.150098917 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.458688713 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.134504198 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.205376398 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.198646699 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.177426613 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.20924146 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.397469365 seconds)
  done (took 151.851702713 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.300903837 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.737762501 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.36969937 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.138776537 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.269390681 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.407962242 seconds)
  done (took 15.315662247 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.454809538 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.940737251 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.166839127 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.165669443 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.206259948 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.145506638 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.145662431 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.312623097 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.264902226 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.158413573 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.149173217 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.167814165 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.148179095 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.285892707 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.144624633 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.15429059 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.144469144 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.170821459 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.155749015 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.21444363 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.461426447 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.204904368 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.215631088 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.07764202 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.186101029 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.158537298 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.101058568 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.155254468 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.154513949 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.466106641 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.343411054 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.148811818 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.97293062 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.470265522 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.901748878 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.071869192 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.273963159 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.171329541 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.210633177 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.145848679 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.168053564 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.214893163 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.162885196 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.167497626 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.489116973 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.980955719 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.212982049 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.415829993 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.145328448 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.176851537 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.178491783 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.178306602 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.147388634 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.167298677 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.672473055 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.549367784 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.103615215 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.152461294 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.205831217 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.074829198 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.203079451 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.15145999 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.476396847 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.075589846 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.860860613 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.168616528 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.079566262 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.265483009 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.219762744 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.166393697 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.168011636 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.161610749 seconds)
  done (took 117.304015931 seconds)
done (took 447.54954706 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.09400947 seconds)
  done (took 7.185273882 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.176191122 seconds)
  done (took 7.413308291 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.096005458 seconds)
  done (took 7.199204297 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.119838163 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.131964987 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.120413088 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.126505411 seconds)
  done (took 25.629734544 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.258605053 seconds)
  done (took 7.352822705 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.094341971 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.116928613 seconds)
  done (took 13.414033079 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.265236452 seconds)
  done (took 7.381253042 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.380875909 seconds)
  done (took 7.485812091 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.114400827 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.114122997 seconds)
  done (took 13.359200207 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.094330946 seconds)
  done (took 7.186236978 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.542501507 seconds)
  done (took 8.741989307 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.097080617 seconds)
  done (took 7.233726086 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.162659849 seconds)
  done (took 7.256669433 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.144547285 seconds)
  done (took 7.237394444 seconds)
done (took 135.167512686 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.094214969 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.09802564 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.097594891 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.096595871 seconds)
  done (took 25.477494566 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.430932066 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.429352318 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.40787642 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.580491404 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.374696405 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.374096124 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.43100322 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.430129033 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.373738413 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.476987983 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.431109882 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.474635507 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.581083794 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.408331402 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.408079386 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.476381366 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.482289518 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.431152843 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.374502554 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.407920386 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.473504098 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.480509795 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.848645172 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.844814051 seconds)
  done (took 36.528530463 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.317381881 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.552449253 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.260606869 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.423022812 seconds)
  done (took 6.645095724 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.139100642 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.480247592 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.463420692 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.521368882 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.462747375 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.275899746 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.462998908 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.315131032 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.25485813 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.285214686 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.730216036 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.256536161 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.269760571 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.521885408 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.277423362 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.106146809 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.106115054 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.28555499 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.480451086 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.306888009 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.371759398 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.462883515 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.462858148 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.463293015 seconds)
  done (took 33.855479615 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.865514118 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.035450745 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.46279101 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.11062803 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.806333088 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.897219422 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.38416846 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.604438891 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.371356639 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.347264548 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.82720712 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.885722651 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.248631943 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.990382517 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.864454889 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.281394406 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.281110326 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.954005694 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.709440372 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.404474817 seconds)
  done (took 38.424625444 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.09424439 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.351129777 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.323989412 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.271556589 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.094029873 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.09843234 seconds)
  done (took 26.325634606 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.146184777 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.253438947 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.436536151 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.381690143 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.268803692 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.245984414 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.735992404 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.322173478 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.87107572 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.871087389 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.707789593 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.561431503 seconds)
  done (took 21.901923745 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.093853266 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.135239604 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.101244184 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.270279331 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.91661936 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.969888422 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.420843863 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.094138988 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.1652576 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.300093093 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.965196154 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.268672332 seconds)
  done (took 39.814645607 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.358743079 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.332996029 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.442617315 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.934979569 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.639349169 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.19193887 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.52181707 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.61111949 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.182028636 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.939125821 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.641722526 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.160946079 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.630563045 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.071201809 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.095597068 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.409312905 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.920538326 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.109753345 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.545523969 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.181432084 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061128949 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.251516073 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103215549 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.642502566 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.42712066 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103403133 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.310337025 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.343991502 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.094828125 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.31316064 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.095369062 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.580764051 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.353431671 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.403896346 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.628238499 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.197963752 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.216024074 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.205387177 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.699110043 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.392973139 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.249737491 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.25973632 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.624831657 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.315438945 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.354732501 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.879347489 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.101134288 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.75028609 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080579629 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.221612399 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.99301129 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.976408223 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.424410242 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.813685355 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.239528589 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.40915898 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.259061873 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.216957346 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.40164444 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.133801097 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.294032508 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.213340079 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.356950986 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069655138 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.581799146 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.444026859 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.461662212 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.424902614 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.39467471 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.413825346 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.451625153 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.209423581 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.918564729 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.23504513 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.647002898 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.008309201 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.45175039 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.096026494 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.829495365 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.632772934 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.074871578 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.211448468 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.746442553 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061992635 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.09452085 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264418441 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.965862766 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068203511 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.190184258 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.141024466 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.504615188 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.233431863 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.251041703 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.366116772 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.799237854 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079812814 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.868247458 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.394455641 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.064226671 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.660635529 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.095061287 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.083172523 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.095557136 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.672698982 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.525241187 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151372912 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.871591306 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.731584693 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.419717335 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.728397868 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255309736 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.929797838 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.451154956 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.427546087 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.094536776 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.785939507 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.195564499 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.19152129 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460941825 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.095013865 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070340025 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.518319441 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.354382854 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095172567 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.334329817 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.097858389 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.245311573 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.09414051 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.910063558 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.697537077 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.341663927 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.630373389 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.424833607 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.19308263 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.068341597 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.241096918 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.601614122 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.19201692 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451204644 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.54120237 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.701730754 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.57136783 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.089397967 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.948698762 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.578463011 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.368028327 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.436795422 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.722962869 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.280635878 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.189538153 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.094255619 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.267814573 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.106813997 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.625964735 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.103551135 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.760769225 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.865102527 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.447216393 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.094899174 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.075878408 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.211076883 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.399878356 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.764951051 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.151518171 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.266926139 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.375897966 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.334729933 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.095813179 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068888791 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.474912466 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.371167734 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.637566625 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.360216699 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.740664295 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.458402913 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.579707589 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.309078516 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.443261205 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.858191081 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.344896568 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.450449184 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.705256871 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.126261816 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.625864771 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.175687596 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.524667663 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.32566383 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.816646281 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.202456239 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.702886435 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.150424105 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.089946975 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.071170985 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246178017 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.582845326 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.134797616 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.662697689 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.278812791 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.345386858 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.427181184 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.130247683 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.060250332 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.193037698 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.519660826 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.472146854 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.411460445 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079001752 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.826270349 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.664039979 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.618021422 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.242389602 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.47698445 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.352833131 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.164655132 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.095790039 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.444383506 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.117603438 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.892335434 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.440222583 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.922157772 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.767165457 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.256829176 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.094844834 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.10136163 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.049044018 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275417973 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.153975681 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.273478827 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.642800934 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.369880962 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.426285544 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.095091344 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099864432 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.372681151 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.404832921 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.369717021 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.606825965 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.718249884 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.782688601 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.210537788 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.73153117 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.263608116 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.13652082 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.762937734 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.42858339 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049448651 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.342114362 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.892333475 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.231776206 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.170581141 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.380644395 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.096101778 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.579641006 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.723694633 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.098104258 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.12272464 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.247310098 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.096238563 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.361988951 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.860023612 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.331259829 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.277764411 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386899844 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.399297551 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.342575456 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507230975 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.63328328 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.892745441 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.070477951 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.251387287 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.183803445 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.416358826 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.096008557 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.400975472 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.777784446 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.758308949 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.927192317 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.642866636 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.337588253 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.864478268 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.576119334 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.354670674 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.412879805 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.056329032 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.735458489 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.080189321 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.238096049 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.069319143 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.867701857 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.426043817 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.485854247 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.583052382 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.169752558 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.636278453 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.507767474 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.142496421 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.254121861 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.354754997 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.095176441 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.429546048 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.095276301 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.165465573 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.504539299 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.097840774 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.627276266 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295943845 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429257577 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.252922043 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.653232715 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14266982 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241306429 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.851821697 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.273141124 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.235377667 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.436567291 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.177237664 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.168130186 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.118558801 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.600548486 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.726233424 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.575516181 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.719913606 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.702710901 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.513529783 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.86907115 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.096500027 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.31209936 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.260635483 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.868837545 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.292667456 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508749723 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.141626462 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.360586846 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.428241867 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.267277134 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.657153994 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078453749 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.697001993 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.294161222 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.614487905 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.649162551 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.880585343 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.577461705 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.28110461 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.623335447 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.083715687 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.263178057 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.487329715 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.831704636 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.94795034 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.943251125 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.890349853 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.23882497 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.536186682 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.189876379 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.875997743 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.260410176 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.332710646 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.309657637 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.236688248 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.067137014 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.692765558 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.877218966 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.371693225 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.260467703 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.341420529 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.213970185 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.402624412 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.659310147 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.409439885 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.869626539 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.579359202 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.353203947 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071273541 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.096190432 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.792982777 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.280213392 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.191619127 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.415997043 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.535184735 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.159058843 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.171624983 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.215843014 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.630255315 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.861899875 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.82278211 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.444478528 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.645942769 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.70185018 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.86352412 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.870117135 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.312707161 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.457120893 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.519419789 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.009817992 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.529117717 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.416952401 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.253016876 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066514995 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.345476493 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.101788441 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.183063712 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.8685717 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.426995603 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.163339004 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.249763701 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.694365333 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.228179632 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.145019164 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.702124035 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.386641633 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.293988735 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.095268009 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.689861048 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.523380496 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.263210579 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084255706 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.859422247 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.066402318 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.311661273 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.225799957 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.302338793 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.950728327 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.167145648 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.775589278 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.642452409 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.308443547 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.315541198 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.071145574 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.175283871 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.124938333 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.757281453 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.923785258 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.346686402 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.614499908 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.341974171 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.103447118 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.426023302 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.233794013 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.437867508 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.391364854 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.584656979 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.522809291 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.47671076 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.398128698 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.570031732 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.254431781 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.339355513 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.065794723 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.146279813 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107267934 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.470841045 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.473165302 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095357617 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.656653501 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.345700309 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.240148924 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.276358177 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.206273768 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.69228815 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.307306977 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.217066473 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.268556746 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.333962209 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.458831591 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.096408651 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.370216067 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.096265879 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.106023237 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.31232922 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.34815415 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.478401846 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.409815125 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.698254043 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.25952109 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.577546874 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072827078 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.630379311 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.098146239 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.209479959 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.466779315 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.097172042 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.586374739 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.750245623 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.343771095 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.797029065 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.142741707 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.043400705 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.303438372 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.614853552 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.106779273 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.7561044 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.521672381 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.096742527 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.576663377 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.178880269 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.262563053 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.841853494 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.596285373 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.097331625 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.881642671 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.193548712 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.639747489 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.370831027 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.275432243 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109061569 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.926481019 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.074653357 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.097856496 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.234233782 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.631712888 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.108533039 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.684025586 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.21651606 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.265674706 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109337024 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.238056646 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.104087298 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.310914037 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.288611633 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.343831214 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.371205146 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.343612746 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106412539 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.66578976 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.789861324 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.161302519 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.310909686 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.029091278 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.499045409 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.844720581 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.023475036 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.677386449 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.336461087 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.301379534 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.53167969 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.357349644 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.137560563 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.358044864 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.096156129 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.376525841 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.257663826 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.669420856 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.37179651 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.07235615 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.345695254 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.114239287 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.651041093 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.578205283 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.984573909 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.09706147 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40748222 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.095810024 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.17071803 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.747262688 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.297804397 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.243407944 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.346733741 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.681807945 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.422165754 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.232680541 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.098080256 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.312167475 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.603201937 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.06878101 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171266998 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.989112889 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.294027053 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.428894045 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070087868 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.344464602 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115792569 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.077514344 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.596243665 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.097730305 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.469617026 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07194222 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.650529156 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.075756902 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.190613136 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.264160533 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.438843425 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.097255784 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.818173863 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.268116956 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.095892121 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.096582714 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.459869501 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.197590577 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.352561819 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.575126575 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.315177649 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.439735237 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.003712619 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.154836624 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.117642048 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.406956514 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.928484925 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.656203358 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.177152254 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.621191157 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.87111538 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.119531244 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.651622475 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.346066134 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.821276318 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.242800042 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.591235903 seconds)
  done (took 1936.75222603 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.143435601 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.209728667 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.143107915 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.169779263 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.127062975 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.152612563 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.181346339 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.147664682 seconds)
  done (took 50.369404398 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.095764896 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.041855056 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.549919817 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.285367571 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.125558094 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.300966391 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.260557818 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.611794933 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.303706044 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.14137779 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.16480257 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.148509815 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.114630692 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.137585424 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.986688796 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.188958527 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.102304791 seconds)
  done (took 90.66659091 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.126965746 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.147441121 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.125185656 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.016868893 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.130682819 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.499537147 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.111993901 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.097026717 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.527715241 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.776849987 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.16299718 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.25297067 seconds)
  done (took 81.111011677 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.135106313 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.134569002 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.13462243 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.135506814 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.136273006 seconds)
  done (took 6.76974453 seconds)
done (took 2395.767489841 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.352070785 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.536020658 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.624459979 seconds)
  done (took 4.254069914 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.164847854 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.228531389 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.29952169 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.245121114 seconds)
  done (took 6.059264206 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.40344302 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.585788302 seconds)
  done (took 4.082411695 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.560779652 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.112971353 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.637970481 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.097743313 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.105534445 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.107116708 seconds)
  done (took 19.421526529 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.131935095 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.130720481 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.131605447 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.125415499 seconds)
  done (took 5.622287587 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.095463236 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.101329599 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.107622651 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.07550611 seconds)
  done (took 18.473332572 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.275111847 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.188235867 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.853335093 seconds)
  done (took 5.423983805 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.91675303 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.479313502 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.900284658 seconds)
  done (took 6.389999078 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.054572118 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.125790452 seconds)
  done (took 5.274165838 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.25530872 seconds)
  done (took 2.349972454 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.584480934 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.587018249 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.960064603 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.000881608 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.13049142 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.42342497 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.449070589 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.524828645 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.805315944 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.653330855 seconds)
  done (took 18.213340906 seconds)
done (took 107.321357802 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.050988366 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.5162409 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.261253645 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.783647379 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.198786837 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.262246074 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.714474692 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.5714395 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.707081785 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.702263983 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.812051381 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.198736486 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.123566159 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.498071818 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.125061031 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.445092587 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.504418266 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.060290151 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.007133141 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.719181145 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.731202999 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.39633162 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.512796547 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.414771343 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.52030688 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.24233425 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.995862353 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.46685108 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.253043539 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.996928957 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.257624051 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.986635853 seconds)
  done (took 152.13199555 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.095700682 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.111791907 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.11261743 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.106989196 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.987079597 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.112553206 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.107452457 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.107432696 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.023836235 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.029686977 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.113107709 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.972941357 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.115629912 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.107429308 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.114093476 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.107300879 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.23777146 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.112643606 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.113767905 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.112229742 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.112912086 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.72374653 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.11228942 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.719479475 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.238128986 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.115164258 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.107425458 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.112047366 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.113778663 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.112158097 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.112449009 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.107497884 seconds)
  done (took 187.700829053 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.095680617 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.111916496 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.112941453 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.108210906 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.112221491 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.111286959 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.110214213 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.107845 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.110553649 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.111024391 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.111254343 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.111749706 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.114763708 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.108793542 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.111454362 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.10740963 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.110810972 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.111281337 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.112014619 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.109944089 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.114797077 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.108990156 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.110174 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.110883066 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.110995526 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.112348159 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.108389169 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.11185189 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.110972069 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.111801461 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.112233874 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.107935261 seconds)
  done (took 196.644231676 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.406954809 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.138719018 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.048094287 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.924469908 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.020265989 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.132879345 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.847651103 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.408406593 seconds)
  done (took 14.036569531 seconds)
done (took 551.622620501 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.717492461 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.0041083 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.289525836 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.364091681 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.706205042 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.400936324 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.361643742 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.595423189 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.843442645 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.567034316 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.610355783 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.318220785 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.948474852 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.377256304 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.295761141 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.587626825 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.532674407 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.821256883 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.314894558 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.982783352 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.323896507 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.961947108 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.590472818 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.888987322 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.612351441 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.010692798 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.200648643 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.539427343 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.365414496 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.321773538 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.104973356 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.474609276 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.336598013 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.331463461 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.57187534 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.57147173 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.429568884 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.522009938 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.282555205 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.768699906 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.994110029 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.711674073 seconds)
  done (took 74.649682068 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.126300077 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.154131023 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.296814609 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.203218397 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.753097282 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.207546054 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.37463503 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.343151952 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.222590744 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.35568955 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.385389556 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.784425213 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.385733633 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.75176959 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.364804525 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.397301933 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.2113024 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.726609494 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.367490937 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.348810062 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.172265059 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.300609355 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.169350932 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.319650537 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.163401537 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.178324782 seconds)
  done (took 36.18831404 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.188637324 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.31438081 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.387634547 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.516621868 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.361029314 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.15839829 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.466136916 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.295898259 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.045310451 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.364109946 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.234189137 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.234460028 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.310302252 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.417339647 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.726559109 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.299324568 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.295489529 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.29093611 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.322255499 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.349831917 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.29001823 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.220045001 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.470947533 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.322309467 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.816676916 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.504159641 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.487455033 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.708143128 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.700194527 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.297076415 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.261480947 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.448550092 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.520890524 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.391683515 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.276935531 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.155099506 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.158828198 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.237032658 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.085120122 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.304408935 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.464108538 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.361705041 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.533651073 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.668815667 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.259940965 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.389782149 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.56848165 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.244195371 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.262389645 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.951968594 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.440804591 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.111697792 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.298059631 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.335602751 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.254901388 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.556394971 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.336714603 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.403756971 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.322425378 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.908466244 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.215433163 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.526136717 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.327376001 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.260123062 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.471688363 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.342181627 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.29865654 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.593636928 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.530630678 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.619563827 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.689918168 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.216108809 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.178040077 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.232996164 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.317372356 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.599686948 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.607867686 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.41735647 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.538873411 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.452300756 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.700256774 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.56988771 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.132695073 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.877069675 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.201843548 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.148393378 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.224530908 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.45595667 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.449699922 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.611043842 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.675987787 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.421322588 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.719599677 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.567113534 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.597628608 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.536104453 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.139889837 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.158015639 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.376852578 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.677648108 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.21909119 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.419194289 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.796024087 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.605161423 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.567433454 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.440284414 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.540154166 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.264963552 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.568658619 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.130756239 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.356015264 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.398078248 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.398541749 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.495454927 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.127664249 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.645917833 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.257699814 seconds)
  done (took 228.917078293 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.097150119 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.113214895 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.098470172 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.11371646 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.097448937 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.729655658 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.179146197 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.097320583 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.728957673 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.178706534 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.097848217 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.099853893 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.099748812 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.099555267 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.737342275 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.711487759 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.753620032 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.097477594 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.096509233 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.109182452 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.810009804 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.100753525 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.097831902 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.108675996 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.100578056 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.098088602 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.101426832 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.15620069 seconds)
  done (took 152.011057885 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.157630403 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.540309808 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.199029867 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.255932271 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.202042512 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.170665571 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.667930349 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.303022061 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.233715052 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.170368908 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.167460944 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.38467235 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.407063695 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.760675473 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.293063601 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.27515099 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.820098511 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.304961951 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.170143346 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.165254424 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.318911635 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.511287775 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.43870378 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.445789428 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.318449921 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.441430639 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.240925212 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.163972942 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.28499154 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.650920235 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.182067251 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.533826076 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.308860476 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.17134359 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.666558661 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.512771928 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.746459529 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.717316098 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.353226759 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.125028486 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.126922386 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.397328335 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.469418281 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.214833347 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.162484974 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.822048526 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.185513207 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.568417121 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.210466006 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.123933369 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.255598818 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.270610544 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.424542066 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.293293743 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.338805614 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.339062605 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.663534909 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.147228682 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.228131573 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.525674909 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.138394666 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.646550202 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.113403667 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.224794091 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.17598836 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.015725338 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.252217419 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.685788145 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.7738071 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.214247706 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.499035388 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.348824325 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.139700138 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.421864932 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.337184715 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.615379324 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.735928256 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.309112931 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.273358657 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.238733712 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.437936014 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.157471408 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.704904043 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.264496699 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.139148893 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.653717958 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.551502738 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.141058583 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.158480673 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.28012492 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.317744183 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.375037967 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.447224522 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.234992907 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.052308512 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.420052763 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.481033877 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.184031579 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.286844004 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.154124158 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.581668129 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.344447168 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.144757753 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.480451851 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.559487797 seconds)
  done (took 156.365543013 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.835556111 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.222754401 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.400950848 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.687890125 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.498733431 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.616716405 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.378844958 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.239928738 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.418469004 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.37182063 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.380556838 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.245520507 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.120764863 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.915335421 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.21608606 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.329733398 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.232842558 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.802218584 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.492335714 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.213084631 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.57745882 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.880684005 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.468827816 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.569597187 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.540711591 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.65570647 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.828009047 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.303196405 seconds)
  done (took 48.553337587 seconds)
done (took 697.778279806 seconds)
SAVING RESULT...
DONE!
