cset: moving following pidspec: 489620
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.947035832 seconds)
loading group "shootout"... done (took 0.904853401 seconds)
loading group "string"... done (took 0.225652554 seconds)
loading group "linalg"... done (took 3.350458473 seconds)
loading group "parallel"... done (took 0.024962289 seconds)
loading group "find"... done (took 1.619143656 seconds)
loading group "tuple"... done (took 0.823063681 seconds)
loading group "union"... done (took 3.446673666 seconds)
loading group "dates"... done (took 0.194890721 seconds)
loading group "micro"... done (took 0.062881868 seconds)
loading group "simd"... done (took 0.392423372 seconds)
loading group "io"... done (took 1.432560069 seconds)
loading group "random"... done (took 2.59067506 seconds)
loading group "problem"... done (took 1.315999829 seconds)
loading group "array"... done (took 5.1756057 seconds)
loading group "misc"... done (took 1.047648161 seconds)
loading group "scalar"... done (took 3.79384749 seconds)
loading group "sort"... done (took 0.339857429 seconds)
loading group "sparse"... done (took 3.878633883 seconds)
loading group "collection"... done (took 6.869424165 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.4654516 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.078384112 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.088009582 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.088100156 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.172962168 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.090155253 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.094122521 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.074704176 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.274836072 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.076186135 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.076494225 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.395289205 seconds)
done (took 4.949131202 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.265533216 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.032010564 seconds)
    (2/2) benchmarking "String"...
    done (took 0.027712134 seconds)
  done (took 0.679819491 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.027134762 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015076321 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021756769 seconds)
  done (took 0.671840725 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020080113 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.0947059 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021076033 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021746072 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021676983 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021035274 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020746987 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020795215 seconds)
  done (took 0.829566252 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028151268 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022277008 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020394757 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.0219728 seconds)
  done (took 0.694199779 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022087978 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.082683574 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.01970933 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019552364 seconds)
  done (took 0.740813733 seconds)
done (took 4.529373216 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.096930889 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.684390749 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.724079058 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.076582858 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.243635675 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.332127259 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.074972678 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.136409696 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.043313214 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030355025 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.077640876 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035638974 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.355818063 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.32950418 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025966276 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.140239884 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.586517095 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039055282 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.072017395 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.253033447 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036278292 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038406907 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043145953 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.025818604 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.153205117 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.136503647 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.595512731 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.057990293 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.024423361 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.052007499 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029176867 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03179375 seconds)
  done (took 8.220395181 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048628361 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.043435686 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022753348 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.05879091 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.048408178 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024040974 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029369752 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022081243 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042141012 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087844679 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044970903 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.052729829 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020752063 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023443708 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.025658262 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.115004147 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037053952 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.035912631 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021629886 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.03558498 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049148863 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033712469 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033059919 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.033582586 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.06870754 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.090122945 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.045747656 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064194549 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022056051 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033981545 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052632146 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.06319827 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022257209 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020733124 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064362381 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041553981 seconds)
  done (took 2.2150407 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.983097223 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.050050053 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037111963 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028202753 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063141666 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.051329205 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076734314 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076252181 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.05419187 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023471004 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.103786205 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.630476248 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.062970151 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.038783305 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027961135 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076779945 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.317377414 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.862932015 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023852496 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023070076 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.025064054 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024843754 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067792225 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.023770404 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.132253531 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.57215987 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029215229 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02471913 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052405245 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.038915825 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023697472 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.102462715 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051241092 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.02854058 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.531936074 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022010859 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020064953 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.047069339 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050990612 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022616916 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023665725 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034521135 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021816004 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.078531451 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036448993 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.648744144 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024782219 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.591574368 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.176833645 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.027037974 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025538285 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.0563573 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.018864306 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022264085 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.580104308 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.098619536 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.021808269 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.243605631 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02445601 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022991944 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023347662 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054623224 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022628083 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023604905 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025559526 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040616147 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.969525741 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.040835481 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041550646 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020605776 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021804064 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020209004 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.379886319 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028775736 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024383675 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019883544 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025705274 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021945653 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02145243 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.063114216 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047961735 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.045500349 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025316408 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022534266 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021842691 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.538913944 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.946417197 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024528272 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023782434 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.462446809 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020355527 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022473164 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023936994 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043543728 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022785888 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019502039 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058627732 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024230968 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.023781275 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.551819914 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024291326 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019818219 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.546146531 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.025443901 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.060682575 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.078095644 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022594677 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.063314734 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.02308846 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020174573 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026427824 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019851943 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024213451 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.166315623 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021371826 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020236212 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022015888 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023133831 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022089601 seconds)
  done (took 17.164894417 seconds)
done (took 29.189898292 seconds)
(4/20) benchmarking "parallel"...
done (took 0.684841145 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.088837079 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049560391 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.109977939 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.056230125 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.023244207 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.056242042 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.061837047 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.059176432 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.023187197 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.023154955 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.023075877 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.057203235 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.059671295 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.023135738 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052723064 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.058330739 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.023136712 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.018989793 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.023159532 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.023052109 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.023302571 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019248634 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.023392868 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.023376695 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.054577955 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.023329086 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019074159 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.053838816 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.023310126 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.053285202 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.023241769 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.023279283 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.023214983 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.054775293 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.023286393 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.054239847 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.01913575 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.023277174 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.023247786 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.023943004 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.023319507 seconds)
  done (took 2.241767389 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03993965 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036493178 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038781209 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017393587 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.026524557 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036623002 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017414973 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036036747 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.039232153 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.092612123 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036931421 seconds)
  done (took 1.084625843 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038824235 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037748167 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038351301 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017417396 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028275636 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037625307 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017316182 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036977557 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.03917249 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.0376531 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037671467 seconds)
  done (took 1.024670832 seconds)
done (took 5.022133947 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.044538219 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.019621197 seconds)
  done (took 0.717015783 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.459946099 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.118700601 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.025885431 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.146371258 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.021721536 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.047819219 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.800101066 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.042611809 seconds)
  done (took 7.360344138 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073829313 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.025928039 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023222341 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023758887 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023454785 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022817331 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024075764 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022545818 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022240687 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024438816 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024185257 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022203086 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.02287978 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024696239 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022577618 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022728246 seconds)
  done (took 1.198127855 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027812953 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024823307 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026027397 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.01647932 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026868256 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025527689 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026500865 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026912449 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.025823673 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025852979 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023754019 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026598537 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025522029 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024191407 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026428377 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016484923 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026624982 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.025888302 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027986269 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027072918 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025976405 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023821329 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027645132 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025115601 seconds)
  done (took 1.290037996 seconds)
done (took 11.223123052 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.139832207 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.03065629 seconds)
  done (took 0.848149546 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.024139756 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.023210575 seconds)
  done (took 0.712296628 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027663359 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015511437 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.030997403 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023468802 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015655742 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015387794 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031174367 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.017439196 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016513991 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.01634662 seconds)
  done (took 0.885874176 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018799484 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022439983 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020469312 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.01867485 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020304393 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016457672 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018614558 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016558863 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.02224753 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.01587135 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019506156 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.036508378 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020842592 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.038304674 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019711646 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.01971771 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021358519 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018949282 seconds)
  done (took 1.059696041 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.01768664 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017273021 seconds)
  done (took 0.712255301 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020136687 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016525162 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018176356 seconds)
    (4/7) benchmarking "year"...
    done (took 0.017982449 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016113617 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015992697 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016095954 seconds)
  done (took 0.817066322 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.379140516 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.078497649 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.29349463 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024216623 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.031391685 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.217929398 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019331813 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023694755 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023411995 seconds)
  done (took 1.760833143 seconds)
done (took 7.463668563 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039142776 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137981203 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.042687406 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.388906404 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.035057251 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.025064203 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.053998685 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.132959895 seconds)
done (took 1.537254944 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.259436705 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.423204713 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.333504897 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.114198775 seconds)
  done (took 2.60386618 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.317400171 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.042618066 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.032908268 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.025413479 seconds)
  done (took 1.194461169 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022755886 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029877063 seconds)
  done (took 0.81609973 seconds)
done (took 5.590928184 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.027211382 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017541573 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023559013 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.019916996 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.019113563 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.019075712 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019528238 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020562091 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018479749 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.02081843 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.021083519 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021335374 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020844751 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02081943 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.02017335 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020797523 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018646038 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.020586355 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020593734 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020303579 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.018337331 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019613211 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018853871 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.020419226 seconds)
  done (took 1.23982512 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.037428174 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.023043792 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.023645915 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.023400736 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.024635303 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.024438324 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.02440254 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.023218082 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.024206531 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.023527996 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024980419 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.025035304 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.023360382 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.024577017 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022798912 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.023845008 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.024314721 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023318054 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022527307 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.023830836 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022468734 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022199882 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.025045708 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024473222 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.024413913 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024323184 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.022866341 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.023462339 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.023829989 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.024024627 seconds)
  done (took 1.482943362 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.02292133 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.01625917 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.01724971 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.028652766 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016653629 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.017079897 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.01705022 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01620108 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017048624 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.01775603 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.017514051 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.016697989 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.017551308 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.016501215 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017108723 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017794511 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.023260988 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.039799849 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017129203 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.017253124 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.022020477 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.017222009 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.017464189 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.017286228 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.01784212 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.017062669 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.01696899 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017654389 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.017080429 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017767538 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.017095847 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.022121155 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.023389848 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017403787 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.029714462 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.022854093 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.016971723 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.022460625 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.018248658 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.017080296 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.017012559 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.017089621 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.017369662 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.017191465 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.029886496 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017267406 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018022493 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.017681596 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.017425874 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.017018694 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017303125 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019148278 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.024001366 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.018673949 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.016951704 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.01838719 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.017165818 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.017926024 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.01744628 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.017321164 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.017002046 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.022047733 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.018863817 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018059053 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.04076863 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.018779247 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.030268979 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.017355019 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.017987321 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022012226 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.01782827 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.038067478 seconds)
  done (took 2.167208542 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.027085601 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.028313603 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.038117899 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02779568 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020818709 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.018064488 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021147691 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018006483 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027982506 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021801812 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018122757 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021454955 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.028832865 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021852247 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019263938 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.028068115 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021833575 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021075563 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018164563 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021877064 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019268918 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021392671 seconds)
  done (took 1.285518849 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.102089494 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023843066 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.066691587 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.02740846 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.025791463 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.026994896 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023792558 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.023943296 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024383702 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025219107 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025236951 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024693284 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.026465807 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024685608 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024496643 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024375338 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024016049 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.024752287 seconds)
  done (took 1.335063706 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.03519081 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.023927913 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.050392104 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023765816 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.023612493 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.023160338 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027147623 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027384549 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.02338015 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.023897802 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.027862966 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02353786 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.023387943 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02409696 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023721767 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.024361174 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.023957059 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023740319 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.027558796 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.026923488 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.026830947 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.027380352 seconds)
  done (took 1.35404796 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035493009 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022392987 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.039831335 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.024692649 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.017478761 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.017489833 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.024160442 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.023099255 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.023711651 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.022338022 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023121908 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017359756 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.025010732 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023098508 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.025181977 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023397829 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023056903 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023512067 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023288689 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017641628 seconds)
  done (took 1.236640757 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.027690719 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018472943 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.018676062 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024000464 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019397488 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.01947757 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024036874 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019290419 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019218829 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.041786148 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019205255 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019042776 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024635882 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022526259 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019404812 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024580959 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024353562 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024373776 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.01925279 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019371232 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.043069755 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019520785 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023861578 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019629835 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019630367 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.019573827 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019792867 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023187152 seconds)
  done (took 1.394151335 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.021008963 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.019396049 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.019918601 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019931714 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.020842629 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.020755345 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.020444538 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.020034708 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.020060124 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.021235782 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.021630366 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.021762215 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.021544628 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.021663599 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02139653 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.020800627 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021201847 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.021330166 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021062764 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02164293 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.020274925 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020465023 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.020167747 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.021206322 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021835747 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.021673664 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021776287 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021677857 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020804988 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.020531352 seconds)
  done (took 1.392413897 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030654998 seconds)
    (2/2) benchmarking "in"...
    done (took 0.02954724 seconds)
  done (took 0.826860273 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018206855 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.034567633 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015982819 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.030615012 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025845076 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020694307 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025596648 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02479516 seconds)
  done (took 0.935896754 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022571635 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.047184527 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017742275 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017678219 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020523866 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.086767738 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.031904713 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.030976435 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034233312 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.02221655 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.019174733 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.032365907 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.017886439 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.033938511 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020344583 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.030035805 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027339963 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.038385354 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.033839178 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.017468805 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.033518354 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019299687 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.017186343 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.018731476 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018639721 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.026357017 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.035421202 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.032478826 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028428471 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.016749343 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.039713217 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.017856331 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.01845205 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028666296 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.02181206 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.017486003 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.058060448 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.017666008 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022326929 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.017666071 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.031180222 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.040877554 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.034109164 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.037788408 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.019214529 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020032042 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.017585278 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020006859 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02275907 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.028482758 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.01811317 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026497454 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.017492181 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.019277407 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.030185132 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018165487 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02274934 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.027870206 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032536645 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.028769052 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.031232339 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.035578587 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.028075932 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.025698031 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.018691215 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.040708396 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019234825 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.032843731 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.034892131 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019195317 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.032789241 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01789757 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017226488 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.018256546 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.057116862 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019229528 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.018784023 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018079187 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018213509 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019374997 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.028574216 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022861017 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026395802 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021106093 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.035902933 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.028420399 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.017921117 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024185188 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.038271702 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.023230062 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018587822 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.03746179 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.0232664 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01783026 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.038411654 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.030294249 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019609105 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.018940623 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.022952956 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033729985 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.01958367 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.017166173 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.028022594 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.01968253 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.021004871 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022450333 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027857257 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.017885195 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.029751544 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022763064 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019797679 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.017306791 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.023910872 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.018986738 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.017187471 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02915923 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018278772 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.03484524 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.026615357 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.03576579 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.035806254 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.030485464 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.036321404 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.017933491 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.017223146 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.039139435 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.029637433 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020368074 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.039364467 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018368118 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.030619245 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.018638893 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.02018315 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.029518943 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.018069373 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020325487 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018544746 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.023659879 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.019959509 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02039487 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.025586399 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.02814388 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.032247819 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019737742 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.028810535 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018787234 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.03720967 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.030141157 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.024189286 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021786082 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019141086 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.031891247 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.026657192 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.028955621 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.018102096 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.018996586 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.018322386 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.030854836 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029170964 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.01993641 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026214301 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.023789948 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.019061081 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.018366705 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019546971 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.023147329 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.022094673 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.019005561 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027295856 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.028586503 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.034714672 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.026534705 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.028754837 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.017844746 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018292275 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020380276 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018480549 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.024075001 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.029596667 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036242079 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.031949808 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.042850299 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.018812091 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02991047 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020310716 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.037316403 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.03306202 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019314207 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023623978 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017552907 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020429637 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.029325885 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030989366 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.034179482 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.035219255 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.024104697 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.024150934 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.018841043 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.036468114 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019195607 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028230536 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.028896134 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023347653 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.018258904 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020442425 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.028873514 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.024136082 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.01854775 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.035691279 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025217839 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.018208215 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.034480216 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.018601903 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.030435769 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.018362875 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.023094703 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.02493629 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020546907 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.029307137 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0359884 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017606097 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.01891019 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.036099692 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020449949 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020522924 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.027728063 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.035923411 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.024565436 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.027938736 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.031414467 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.03123801 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.024771149 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.031463106 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020326186 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.030421731 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.022791168 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.032779244 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018929455 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040770772 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.017976123 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.036889508 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019970536 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.031864291 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019329049 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02979299 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019679617 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.038400234 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020797739 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.02015028 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.032555337 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017692036 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.029856882 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018934486 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.025047195 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.027500225 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.029433118 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020815887 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029712507 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020649026 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.028679898 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.024585362 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.028898483 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.029152302 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.024307151 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018354872 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.027645664 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.031090866 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.027927889 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020313116 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.164737445 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018295381 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.028341698 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019138886 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.01873514 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027874768 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.024261273 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.025171366 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019373175 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019474694 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019254199 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027960897 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.0293009 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038691013 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028047068 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.026531746 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.028406362 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017672429 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.035702731 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017867342 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.026704578 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.017077431 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.023089657 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.029346902 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.018230396 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040682864 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.019537095 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.027303681 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031548081 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028016205 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.022971871 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.038900209 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020818585 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.027518455 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.026937401 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.023261646 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.026025423 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019177553 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.027775654 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.028369903 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.029370695 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018478908 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.026487261 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028208319 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019101093 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024291174 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019181793 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.027599881 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019325335 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.016918245 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.023361737 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030560922 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.023758247 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.024139 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.017538941 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.016536117 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.017726946 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023179013 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.023561467 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.028155387 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035840338 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.0168977 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.018128199 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.017094662 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.022291255 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037880823 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028356399 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.026800042 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.023340579 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.016952422 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.019028741 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.019119003 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01748668 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020464922 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.01703899 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.017096112 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.029746463 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018980938 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022753962 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017634829 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01845685 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.028396116 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021699284 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01780039 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.025386007 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.017340882 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.023829756 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01662578 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018534373 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.022739731 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016827564 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.022131263 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.029236883 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.036274429 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.026261325 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.028285289 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.018421613 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.027274472 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.035941528 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02467808 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01902173 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.028593124 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.017490316 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.039897854 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.029554954 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028671831 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029453351 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019042373 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.037156591 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.023966502 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.029432801 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.03612628 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019022083 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.024717078 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.01808085 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.035838547 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.023283725 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.017617325 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.027665803 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026167836 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.024297368 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.030425996 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.01871076 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.026638683 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022773547 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022260534 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019414816 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019171528 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.027308817 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.0350897 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.018706405 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021939128 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.027270099 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.026718191 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.0234771 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031951084 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.027261338 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018997765 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.019710838 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.022635307 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.018375771 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.031854833 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018820132 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.024618458 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.024179803 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.018468823 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.026734539 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.037035616 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.028926661 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.029517267 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.018302724 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017608488 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.038272941 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.022440982 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021824439 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.027760929 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.029413467 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032286798 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.029427067 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.036959441 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.01864747 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.025261158 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031775788 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019146733 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.01785228 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.023168317 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019670014 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.027807435 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.029308806 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.0259498 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019986595 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.025459323 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.031764279 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019280536 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.022895658 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022745849 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018851282 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.029890328 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.026785185 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.02694419 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019337766 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017529903 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.021310518 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.027138368 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.026647765 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.02823959 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018984703 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.024700951 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.032221379 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02506897 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020766336 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016643971 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020487978 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.02664219 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.02306631 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018038181 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.02344886 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.022181672 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02626982 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.028535504 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.022926929 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017064303 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.035461231 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02717531 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.028340072 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019818172 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.02015231 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01849292 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.017799321 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030048753 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017960027 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020161239 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.024687065 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020114951 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.037358726 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.026587744 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.035548748 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019147289 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.022639825 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.017968799 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028876119 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.023983061 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.018449467 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.029876045 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.017559109 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0350743 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.032519462 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024863345 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.017912703 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.024282995 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.028623957 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.035845217 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02966348 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.02845508 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022113104 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028593499 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019583368 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.02943 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.017800236 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.016498136 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.029076093 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027640161 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031307817 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.017585842 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.028838723 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020260648 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.027006303 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.02849297 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020113281 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020249242 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.019883042 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028178498 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.023324566 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.028565901 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.023814363 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.037408005 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.018803848 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.029662911 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.027179903 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.030263198 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.033019529 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.032511006 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.027582451 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018376056 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026007195 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.027769083 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019441278 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.023634052 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.022261022 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.042395118 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019622246 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019691086 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.03302568 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025280629 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.162276326 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022709431 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.022400645 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.02672289 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.01723308 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.028772652 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02037448 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.018684101 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024329247 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.024374332 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.017129003 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.017569967 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.017899605 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028845636 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.023689071 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.017389626 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037214916 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.018566063 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.02656064 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028759072 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.024468439 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.018250486 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.016742042 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018162044 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.032437481 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035892486 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021958079 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026350044 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019090761 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.027845605 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.016380197 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.026201811 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.026603416 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027300488 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.017376115 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017319616 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.032423269 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032694355 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.022706869 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.027210106 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.026894854 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.018845219 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.041389662 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.027091695 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01821834 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.029658961 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019398182 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.0163375 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015836681 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.018482086 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.029559828 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017274994 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019333091 seconds)
  done (took 16.029798239 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.058561672 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01841389 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.016896939 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017362212 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024284485 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018377754 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017426597 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018912615 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018363215 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019332634 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.017083891 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017182018 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023124845 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031457377 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025776195 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021629731 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017986218 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019250395 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017773729 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.019050685 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024033885 seconds)
  done (took 1.263208409 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.021173712 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021618747 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021492295 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021731939 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021288236 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017898773 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021411939 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017707924 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021719895 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018079537 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021871288 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018013595 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.01818889 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018173475 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018186076 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019530115 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022292471 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021515177 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018228655 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021602665 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019356519 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021604126 seconds)
  done (took 1.256648199 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018144244 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017436929 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.027080052 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.016835196 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.016913492 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019730075 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017067022 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.022417769 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.022496121 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.022668466 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.027677219 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.017808213 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.016885822 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.02436308 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.016850952 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.017575577 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.064105432 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.017954005 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.017947936 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017142843 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.019479131 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.027870991 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.017478462 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.017670852 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.023169198 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020118019 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.016894627 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.01927821 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.017417043 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.022494657 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.018199276 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.016963884 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.027035042 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.026529263 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.022823422 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.022790004 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.018227016 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.017797397 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.017078905 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.017130961 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026834485 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.018608383 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.017515463 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.018453655 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.027924428 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017406918 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.017261841 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.02806061 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.017288872 seconds)
  done (took 1.841318809 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.026218368 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.075251947 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.024009573 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.056288372 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.029533379 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.022455326 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.02437584 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06161953 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.018609636 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.019000372 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.030580289 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.0309402 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.019988316 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.021304685 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025476244 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019746288 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020631169 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019270939 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.022480772 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.019884948 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.022380385 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.02541999 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.030378455 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.030985291 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021063893 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019618068 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01985851 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.021300083 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.030928769 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.023109983 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.021628686 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.022007456 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.030572182 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.024419195 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.019542179 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.019822036 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.03149407 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.020360037 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.020168625 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.018482397 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.019900315 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.021388954 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.026094733 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.032040725 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020284108 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.025993328 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020326097 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.018477477 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.031862309 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.020590414 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.024072513 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.032490288 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.021366114 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.020406547 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.021646656 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.03122262 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.020427658 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.019368815 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.020767581 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.030966884 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.018565779 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.0211499 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.032256883 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.020154965 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.023601191 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.032286298 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.026346583 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021122815 seconds)
  done (took 2.691674562 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025594362 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.055506586 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.032691897 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.032917721 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.027832641 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.027775461 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.027643705 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.027674093 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.028189714 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.031341743 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02853123 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.067051734 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02482748 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.029405394 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.027944593 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.027748859 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.027929311 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02774566 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.028130374 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02812697 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.028452836 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.033348394 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.028466014 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.033346347 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030789713 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.025211689 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.028404268 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.027970623 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.033201878 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.028071813 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030358713 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.027975705 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.028160727 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.03329454 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.030533261 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.028298062 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.018239719 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.028440071 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.028926989 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.028573801 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.024842696 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.033276875 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.028461095 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.025293977 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029104781 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029069135 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.033355345 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.030773047 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.029910422 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.031008436 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.028142318 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0329733 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028248984 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.028166991 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.033224404 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.035943534 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.033845167 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.033838161 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029456828 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.03401045 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.034121725 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.03601519 seconds)
  done (took 2.732014313 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.028870838 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022907495 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.037299411 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.016913837 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.016838346 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.026721471 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017218698 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.017063483 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02303708 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.023256279 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024473898 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026477127 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028847058 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.025133044 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.027438572 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.029027974 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.027641063 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02723206 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023493973 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.026883434 seconds)
  done (took 1.316306524 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.032912778 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.03644822 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.022704369 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.026367501 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.022893212 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.026964274 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.022986515 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023822907 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024059638 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023153141 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.027925604 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02779464 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02340067 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.026373839 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.027534838 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.026922513 seconds)
  done (took 1.232096924 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020268546 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024080626 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022585858 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016925396 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.019396977 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016299316 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017334899 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016284592 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018954061 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.031441069 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016977056 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019615307 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017339233 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.016337832 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.01723239 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.020574497 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.019020809 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017397723 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017673517 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.021622551 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.025590353 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.018193554 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019892068 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017323959 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019476233 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.026365471 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.01922854 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.020308156 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017502396 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019986919 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019568586 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.024478817 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.02008152 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017907014 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016247471 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.017481103 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017787625 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.020172623 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019862591 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.018148935 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.01667753 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.020436509 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018932217 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.018917376 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019509589 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020415974 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.019730893 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.023795604 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.017672083 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019957407 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017742543 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.019671632 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.018809854 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.025303519 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.020066477 seconds)
  done (took 1.872472896 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035058144 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022565946 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01598873 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.016211935 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021778892 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.02249786 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.022334602 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022344537 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022901001 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.016340153 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.0234828 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022051621 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022930557 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022116819 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022670196 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022459668 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016544234 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.022521585 seconds)
  done (took 1.185342688 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023543417 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022662356 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021934778 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.01891772 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.018939983 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023135516 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017410494 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018682751 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018678994 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019022047 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019201804 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.01900554 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019179056 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.019149408 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.023066018 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019405888 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.018916698 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018026617 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019387424 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017694624 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023854857 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017984582 seconds)
  done (took 1.246832408 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.087308472 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.048550998 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.043924296 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.039430632 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.030298066 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.056207073 seconds)
  done (took 1.126185245 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053757341 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.058012673 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.02303457 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022983178 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027102582 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025607703 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0258331 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025711099 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02847018 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029428794 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025932747 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029044606 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028840762 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030730464 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027540582 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027704226 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026154712 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02622944 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023411923 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.033488839 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026950733 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030114834 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026463974 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026463716 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026412052 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03106776 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029271578 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029962198 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026527407 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029833977 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027955653 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02633416 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029891042 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030427229 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02339312 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029407273 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026350692 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.033281764 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028283639 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03157705 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023887049 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027973127 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029701089 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029268969 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029659323 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026613368 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029479383 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026373554 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026568813 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034947593 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02828855 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031722983 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028221547 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029812638 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029502599 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.035056691 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030735706 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.03169305 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02847075 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030562711 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031938249 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028645584 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032266558 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03158183 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029092534 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032380893 seconds)
  done (took 2.761573632 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064527121 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.023914081 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026189552 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029443697 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029972256 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025699348 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025846189 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026378899 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025709537 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023398101 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.062586428 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026462541 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03075339 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030600277 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026524939 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026667518 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026842129 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031610277 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024276202 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03475059 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026783069 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031705269 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031625674 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031993008 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030416576 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028236943 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026725987 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027008536 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026864268 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026698787 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02969441 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026840976 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.031867653 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024531775 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032127889 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027009992 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026826782 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029894107 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027399478 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028600697 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032215254 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033768274 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026855847 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026850327 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031073 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0270743 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027251966 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024212596 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026894951 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024173218 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030824525 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031175291 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.03131713 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031963215 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02705393 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027047957 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026998169 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027017383 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027490814 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028241762 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031671562 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027010762 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036369913 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027100557 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027564115 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032382144 seconds)
  done (took 2.774042173 seconds)
done (took 54.743451101 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.21795024 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.17690891 seconds)
  done (took 1.198162936 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.031187505 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.030643482 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.053585134 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.025916298 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.085410367 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.185768713 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.128438317 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026989312 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026178742 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.028969382 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.026425584 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.027481487 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.028735331 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.026647716 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.093716943 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026730304 seconds)
  done (took 1.668533024 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.077119363 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.143558294 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.060735208 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023193837 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.109108797 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.030838963 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.025707209 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.030332462 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.030776589 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.024530513 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.074032801 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.038697587 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.030835572 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.031999942 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.026333029 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.029264941 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.030269246 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.031430467 seconds)
  done (took 1.646773051 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.097652111 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.036152023 seconds)
  done (took 0.928481707 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.114919861 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064950065 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.106200698 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.321212044 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.094888315 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.0995947 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.105945092 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.101395781 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.071660192 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.096482781 seconds)
  done (took 1.964387208 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.065186886 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.065647002 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309743191 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.061902588 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.038902243 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.032873482 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.032666233 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.035367312 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.033042644 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.032736601 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.082145214 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.031344853 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.027583201 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.086357877 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.054589601 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.06689317 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.027239174 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.033644247 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.036607835 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.026382748 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.031615696 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.035477219 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.143058468 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.034707337 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.056616463 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.031570349 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.03303988 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.032442439 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.032768399 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.03461775 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.035104666 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.056873847 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.033821844 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.041020895 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.032124664 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.05324221 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.027655497 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.05479112 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.030490065 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.028130494 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.031222601 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.035155559 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.028308716 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.034516062 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.033220812 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.033819609 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.035772862 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.026770905 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.033105075 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.030638576 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.027467067 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.032401901 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.032262591 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.033532874 seconds)
  done (took 3.329469074 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.080247327 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.06991008 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027224383 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077601571 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070168019 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027934637 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.084566225 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065596098 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.08345252 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026923903 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026667256 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.027010049 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033848696 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.036992872 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079932428 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.072632991 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.028890737 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027373339 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.072846373 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.073073109 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026233903 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.085369141 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.075602295 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.071812727 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.026425969 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027923006 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026368493 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.027157517 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.034717214 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.034134465 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027040657 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.037026588 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.037565892 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032944339 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025644063 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026107717 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026139452 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.034055565 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035626736 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.035626803 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.032596141 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02625097 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026548561 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027437774 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.027388119 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025646039 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035455456 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.033441644 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.035351742 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026563989 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.026892128 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.0260145 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026642065 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.033436659 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.033928537 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.033626849 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036806366 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026724878 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026545606 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.028137007 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.037942167 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034122393 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034233181 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.028059407 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.035682155 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02633093 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037071304 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.039359026 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026859066 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026895804 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.026499077 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026543515 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.026903533 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032860692 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.03336888 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027869433 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027305341 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026758444 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034833853 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032813827 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026348485 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.03550027 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026292342 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026609672 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02708631 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027369078 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.035790786 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.034246964 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027431807 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026666453 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.02724831 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02655687 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.026079241 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.035608983 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.034716664 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.034897469 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.037454761 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027322397 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.037919556 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.035428197 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027162171 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.0340197 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.026843091 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027374601 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027180594 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.034222429 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.034239526 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035859892 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027125391 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026521279 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.034993198 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037351961 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027246284 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.033562413 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036771006 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.033971419 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.026200384 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.037342457 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026549444 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.037144662 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027033835 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.037020521 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027048006 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.034104474 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026964916 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.026551374 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027292967 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.03811408 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028185596 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027042182 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027727066 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026693834 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.034432386 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.038751717 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027212271 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034857896 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.034713803 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.027321845 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.036979413 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.026710994 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.037643591 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.152309912 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027168787 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025827606 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.040003847 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026111347 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027321645 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.027033374 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.037115908 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026110423 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035629492 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033487439 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025682712 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037863537 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03581389 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.034311298 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.037163981 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027322415 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.026668725 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.026269521 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027314071 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.037511261 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.038554427 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.027585978 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026549081 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.03387429 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.037822564 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.025458406 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.033264858 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.033155448 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.034024326 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.025924146 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.025923985 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036918937 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.039128 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.033908535 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.037007856 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034889941 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.025281017 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033171904 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.174926983 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025313237 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037501164 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025581895 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.035379557 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.034887407 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.030691849 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034884152 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.036520155 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.035294389 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.034196911 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.035240946 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.024802878 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.024820306 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.030919131 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.024779361 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024903792 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.030158371 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.025644505 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025520899 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036568944 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026185624 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.034547129 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.02431807 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.031671989 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024814601 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025993436 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036831395 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02536383 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02582941 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031013472 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024626274 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.030748521 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033695227 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.030974762 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025272821 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025983218 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034956171 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.033688797 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025026227 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024190418 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025144948 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.033003905 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.032193918 seconds)
  done (took 8.622042805 seconds)
done (took 20.185536438 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.15983907 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.076620132 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.167103109 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.097586565 seconds)
  done (took 1.305784489 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.060048498 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.022130676 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.037634396 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.046364684 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.021874952 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.032303778 seconds)
  done (took 1.05916239 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.227587625 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.14846584 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.151855304 seconds)
  done (took 1.374163132 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.14139188 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.292838275 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.517331114 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.13628406 seconds)
  done (took 1.938221545 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.070678839 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.058691714 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.03278853 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.070077217 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.040772586 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.01808916 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.092172879 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.026190252 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.054454604 seconds)
  done (took 1.365379884 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.104807739 seconds)
done (took 7.951348106 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.217010997 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.034855443 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.037696656 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.034086222 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.139682351 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.025701806 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.149765011 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.033064666 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.150993458 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.213753405 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.167573288 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.051567218 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.051155898 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.047822563 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.161229806 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.037648797 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.032835609 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027572035 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.164945777 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.139944997 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.13871142 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.034829184 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.10014464 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.033408853 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.121256931 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.086553144 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.174666732 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.220361101 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.177837413 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.03284025 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.130086457 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.046701773 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.13915508 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.134064665 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.024945219 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.050742786 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022281619 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.146948481 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.107303094 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.202922205 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.162464846 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030507302 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.152823691 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027167028 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021216607 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.035281781 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.034938891 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.030436171 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.046395642 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030168018 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.042951981 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028911373 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.142311131 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.025107543 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.098619239 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.02430875 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.164836208 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.086859883 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026543591 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.039441435 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030451476 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.196892768 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.041422676 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027595297 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.033943225 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.021072598 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.023489758 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.038352173 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021293287 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.032394772 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.030531247 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.110857034 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.040421588 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.066804751 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.033543034 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.12303144 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.103396958 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047694788 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.05011757 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030560223 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020454014 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.20141875 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.02587867 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.039810954 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.02107791 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.054048294 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021961387 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.038317514 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.167777601 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.161980739 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.08543226 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.022294036 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.240171956 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.024585348 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.050338265 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023627508 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022819347 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.167023471 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.0217403 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022059005 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.032664082 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.03084418 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.023347067 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.168238526 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.123486661 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.031797742 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.032831408 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.024186136 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.022206067 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.024310257 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.024194014 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.024057337 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095302427 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039913889 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022769135 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.118561001 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.13444898 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035157503 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.044155034 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.09130994 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.026707301 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.033257654 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.032000177 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.143113146 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.032857316 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.15389754 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.025302264 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.048991984 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.130535229 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.108836267 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.117923726 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.023170543 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.200940598 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.036826135 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.022367034 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.031179848 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.054980086 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.036361855 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.04057055 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.02311169 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.200077848 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034165528 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.02182001 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.288271153 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.022157643 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.125460811 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.113665492 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.136495138 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.031180363 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.034013198 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.104095896 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.048814456 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.053038538 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.047465791 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.025823321 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.022585168 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.022358531 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.039755383 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.021841314 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.023187522 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.038661994 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.03236081 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.023070201 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.139458492 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.034953876 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.026893268 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.159552305 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.036518178 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.097499203 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.045437167 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.022720926 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.1220389 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.024858796 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.04299094 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.092065468 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.023243108 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.107401206 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.022449025 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.022466365 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.031455545 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.024393818 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032100104 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.036449111 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.02255491 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.037848674 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.021209996 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.022463107 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.120685185 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.024311545 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.176735433 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.118862518 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.118257523 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.022590512 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.040623257 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.021933894 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.149385221 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.02285409 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.076213798 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.132537241 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.040571133 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.042049761 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.024644005 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.108181433 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.038844674 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.022346206 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.108401891 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.133688745 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098081587 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.031084528 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.139535536 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.03321096 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.022894112 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.031142392 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032376067 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.023989662 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.10956938 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.022427744 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.021632171 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.022185984 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.024713433 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.021716543 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.048312131 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.022027419 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.031368119 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.022996261 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.025766462 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.024525611 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.021654611 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.031420821 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.111295417 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.134699168 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.022175218 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041946156 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.036865881 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034738144 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.07412711 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.029913165 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.192823432 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.021627006 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.032125912 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.045807676 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.021513748 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025960059 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02269221 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.04172763 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.021796323 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.023518069 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.031536234 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022146655 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022604672 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.038524926 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022571696 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.031726628 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.023783768 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.021879221 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.021478521 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.022097849 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.027019839 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025982911 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.033105393 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040651613 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.143987447 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022823366 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.023307365 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.02213187 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.022084755 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022229597 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.024078001 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.021723185 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.024074139 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.022637321 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.021560439 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.052474286 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025779697 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.02277038 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.045479972 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.022403184 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.031610712 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.128534413 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.039602276 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025547856 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.02101795 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.15721186 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.111036841 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.044281204 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.043891531 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.023085152 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.0331939 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.022151973 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.022545476 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.021845327 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.05004479 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025125544 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.02240878 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.021295506 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.021499108 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.071545904 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.029886511 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020791302 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.02921017 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.021158828 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.021311549 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.050003963 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021896185 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020809069 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040359935 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.033974316 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104697326 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03504394 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.020724467 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.07414232 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.021023833 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021151895 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.021747877 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.11647136 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034290543 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.02286177 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.021497292 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.029169093 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.030770279 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.077595785 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.021813821 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.025310878 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.020459527 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.020641712 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.02221106 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.048383641 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.051323213 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.023652462 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.025668706 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.021651812 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.022259539 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.099244029 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.020969399 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.02626142 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.114408049 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.024057413 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.029800545 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.0207675 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.141116328 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025313403 seconds)
  done (took 20.843886704 seconds)
done (took 21.694918289 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.054575816 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035704122 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.035763774 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.030558654 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.03442104 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.03400084 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.037039443 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.03231858 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.03678162 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.032539909 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.031831293 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.0201997 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.029098025 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.038542824 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.030736163 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.038856109 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.034724672 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.038493169 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.022983568 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.038464968 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.032825591 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.035900023 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.031039388 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.036948158 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.022587455 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.030774265 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.046757241 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.039909272 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.025203471 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.032230153 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.029763097 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.036462329 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.030192832 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.030009229 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.032326541 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.027871303 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.031817843 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.027734936 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.046226888 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.027048132 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.022044866 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.034876718 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.029481764 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.030852457 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.030965873 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.034500507 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.027275828 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.038224875 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.020739836 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.035145926 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.045962633 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.026043115 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.02531082 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.031848206 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.028631224 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.032727926 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.025831528 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.03562964 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.028820461 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.036742927 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.032218678 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.032448515 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.02255586 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.03209758 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.030899121 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.03141235 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.021603757 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.027438326 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.022269482 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.022376566 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.021823398 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.032185638 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.031002991 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.028218811 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.022376976 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.022755621 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.021996443 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.036619813 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.030740314 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.03263002 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.023430581 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.029149714 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.02858857 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.023460024 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028254147 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.036410819 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.022205522 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.023713902 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.02239963 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.036757688 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.030809579 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.023606658 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.036612994 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028580252 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028479318 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.023107475 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.022639378 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028096779 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.031975202 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.023017767 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.022028547 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028226183 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.028829424 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.032908508 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.023398464 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028077348 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028381333 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.022235361 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.03276656 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.031836194 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.032995386 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.03721219 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.03282879 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.038265187 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.023264741 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.021671343 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.033512073 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.023401368 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028147468 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.031693744 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.028804184 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.03156816 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.023163693 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.022015531 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.027868639 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.029270988 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.023064287 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023177743 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.023134747 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.032882895 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.030993795 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.021597076 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.022954559 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.032586973 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.032416311 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.022588418 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.022495486 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.032647859 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.023458689 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.029197278 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.028538248 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.032403676 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.022248831 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023080516 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.02182259 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.022604068 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.021978735 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.029135957 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.027650313 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.023085491 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.03192027 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.030429548 seconds)
done (took 5.473572986 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.036998051 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.068852276 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.064966743 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.040530941 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.036814996 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.023584611 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.027597583 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.043553065 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.027107143 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.05031208 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.051208034 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.047001576 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.054436755 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.021476007 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.022921914 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.0241474 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021013006 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.036317965 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.041884263 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.055967459 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.063304802 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.02258995 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.042747082 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.046384723 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.03648812 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.042782672 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.024323099 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.024072058 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.026217899 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.041325531 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.0531583 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.023261135 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.024440033 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.043400326 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.040816882 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.032054261 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.023858783 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.030045837 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.02447236 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.023306806 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.026249466 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.042132703 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.03026182 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.030299705 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.024391931 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.024342643 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.023252705 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.030599299 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.037196114 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.029069038 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.035871929 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.043257472 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.025205782 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.024016819 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.021824363 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.030422723 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.023670168 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.023804708 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.023796245 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.022719155 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.023998351 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.026028799 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.028892675 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.029812887 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.02719656 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.029918379 seconds)
  done (took 3.135057425 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.041450486 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.05220714 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.039116646 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.039656498 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.022872532 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.023705892 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.023850563 seconds)
  done (took 1.180119499 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068883539 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.031496817 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.036328012 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.035626423 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.045961137 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.033878344 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.038578569 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.056008271 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.022749273 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.050136202 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.042643045 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.036744525 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.026591294 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.036636024 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.055926919 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.037977782 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.036001117 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.02946018 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.03081478 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.037586778 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027869942 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.058639711 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.036407424 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.024093423 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.037539122 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.03031097 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.026540843 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.024328094 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025464143 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022356058 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.0223247 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.04764053 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.029674693 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.029434348 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023818486 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.021798945 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.027484968 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024022656 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.027474332 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.031046476 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.026655664 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.025339956 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.025838598 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022600403 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.023751573 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.028298205 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.024493759 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.023405535 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.023354859 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.031739569 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.023116382 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.030426919 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.026440211 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029002969 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.031918299 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.029951663 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.029431408 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.023255211 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.031991558 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.032869388 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024442115 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.036336135 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.034523968 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.025126166 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.034858653 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031732195 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.029466221 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.026456625 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021284105 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029778531 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022108344 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034259441 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025714665 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.025160262 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.028588049 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031781646 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.039791388 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.038612811 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.038437174 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.036698518 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.025348866 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022659679 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.037668955 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.039046978 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026817779 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021468632 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022216857 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.036821855 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049391557 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024650894 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.027532666 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022208216 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.033060219 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.025658801 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025694195 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.030366451 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021865499 seconds)
  done (took 3.968252292 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.025030191 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.024262581 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.023248595 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.022596416 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023286268 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022911117 seconds)
  done (took 1.054272326 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.047546791 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.023298301 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.03438325 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022161374 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.045802964 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.029056154 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.029401215 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024074 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.039155273 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033782981 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.028105686 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.031140942 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.03306286 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.024588222 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.030128965 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.03424384 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.029893123 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027674163 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.034801137 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025713289 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.03834114 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.02480291 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024778248 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.034182962 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.025337184 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.033416924 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.033550467 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.034074548 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033957113 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.024934476 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.025199668 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.026547989 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.030619461 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.025657066 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.030726159 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.030747447 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024164974 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.029380746 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026557464 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.026431084 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.033073579 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026004249 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.027449562 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.02880185 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.026060538 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.031329905 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.029495705 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.028005219 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.030314399 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.02927018 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02930771 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.024809653 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.027248692 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.029834825 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.031424222 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026180533 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.029207217 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.031364014 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.025698329 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.031740011 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.023925739 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.02673835 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025957068 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.026910981 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.029557615 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.029777915 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.031217499 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025821824 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02611787 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024000442 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.028977664 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023968536 seconds)
  done (took 3.003948118 seconds)
done (took 13.279156476 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543403622 seconds)
  done (took 1.471484695 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.627446256 seconds)
  done (took 1.574837724 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052905252 seconds)
  done (took 1.002887074 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.310865576 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.391694536 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.771555534 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.097712766 seconds)
  done (took 2.512483921 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.873976282 seconds)
  done (took 1.82271476 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.226856036 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.191216619 seconds)
  done (took 1.375399281 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.35944297 seconds)
  done (took 1.266974675 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.387926358 seconds)
  done (took 2.29643299 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.201977111 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.123842717 seconds)
  done (took 1.284265478 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.538464522 seconds)
  done (took 1.490966351 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.991419532 seconds)
  done (took 5.943842281 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.213215649 seconds)
  done (took 1.219987117 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.195310103 seconds)
  done (took 1.129009134 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.718115009 seconds)
  done (took 1.638979968 seconds)
done (took 26.980311774 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.046163883 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.043847106 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.04421387 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03885676 seconds)
  done (took 1.107552921 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031340472 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.027598851 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.03111036 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.030879861 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02819595 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.029780084 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.029839512 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.026602727 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.027924964 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.026842764 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.025331576 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.026883283 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.030622013 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.027030312 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029873011 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.030934603 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.026855362 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02676039 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.029421778 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.027225764 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.029618305 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.026823388 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.026640212 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028448228 seconds)
  done (took 1.648670571 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.036181994 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.028575355 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.032447874 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.027645179 seconds)
  done (took 1.082026444 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033948275 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.034618852 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.043623604 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.04889517 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.034229882 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.034804757 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.04209013 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.042699221 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.047883412 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.044649329 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.024701281 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.024130812 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.023595644 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.044353661 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.04171269 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.018011679 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.019529111 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.035020284 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.033946798 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.037254365 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.026981609 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.021872151 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.033594828 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.034270761 seconds)
  done (took 1.77711301 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.039062148 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.022079692 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.038559815 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.05092356 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.052045441 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.022520947 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.036254856 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.05053752 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.090450992 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.022072963 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.028779716 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.022223801 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.065725034 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.022789149 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.03863998 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.069658948 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.074199025 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.027002761 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.05817688 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.022324991 seconds)
  done (took 1.818630199 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029514087 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.027249277 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.02734696 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.022473667 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034364466 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.03044828 seconds)
  done (took 1.144831443 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025132093 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.024965353 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.023355847 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.029750236 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.024244655 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.02460281 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.023996158 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.022732646 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.022555631 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.023657909 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.023359847 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.023684306 seconds)
  done (took 1.248104842 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.120550344 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.029750626 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.027616762 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.022686049 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.024518401 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023460994 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.039919735 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.025783294 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.043144685 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023717801 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.0232569 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.025776248 seconds)
  done (took 1.391442033 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062275263 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070027656 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104293428 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074252212 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075867518 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052944034 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086045781 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033842325 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.123744667 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098018043 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074985039 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052077254 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043614536 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.025305772 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057145814 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077066833 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097951686 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028512894 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072862636 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127100124 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089862729 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.094585741 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107166393 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074057766 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047576876 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108089226 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052853224 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06056637 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083392335 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088585938 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076856789 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055799358 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.027338942 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.027350964 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112039146 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.066748187 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083749341 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.051790121 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.066650599 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.046084695 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066449754 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.025790314 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.051919091 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.07009934 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042377431 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094543845 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.051570034 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077206435 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039993764 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103648584 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092984964 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059754305 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044943341 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06647683 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105487645 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076265519 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106408737 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071953674 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043610983 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.084943088 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.072342929 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063941378 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.224130284 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039613914 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144458921 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047974654 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.074054954 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073537509 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.053747394 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055251329 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.067946567 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097644883 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086761284 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.087166028 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100313503 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055239355 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081239916 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.059384355 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.089621513 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062346708 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.029779007 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08212077 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089935617 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056205898 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058986905 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088696913 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050875033 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035831433 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.0600949 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.079813716 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038221531 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.074040032 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037573365 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.068773712 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100593863 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057622752 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073544743 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079689678 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036701608 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120519029 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069930021 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030570151 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082031459 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075879344 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120614993 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055278425 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.034812977 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061083585 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065918193 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.115160303 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072842692 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039504913 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074042111 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107147517 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055859732 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143125187 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058210632 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110030202 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076426757 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046889712 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033379285 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.051014528 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078732997 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072741445 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078599742 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056673271 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.044919699 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047227471 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.236113449 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052027733 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039421397 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075253937 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.064796387 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.03210413 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045903987 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.034409405 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10518654 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.036246339 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096403466 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09013646 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.033343682 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06551607 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056677556 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067869687 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.056917929 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077988201 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098141575 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.149187139 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048223629 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.052620052 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068740493 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107325683 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08757889 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050342446 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.034608591 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058981633 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07217746 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.056699298 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086440987 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055508732 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070541045 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065691847 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105872839 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108059793 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06058249 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061835695 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069084006 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.084423053 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034668311 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120976603 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064338223 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081676919 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042741898 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105622492 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.073428088 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049718373 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046706756 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05993382 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.063479429 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066382855 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107423556 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.056583669 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.030637413 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054014486 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111484054 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03469577 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073965156 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.051289456 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.054614438 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083656496 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.055898798 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041312565 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.026386929 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096233638 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130797516 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.027842747 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080657936 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.079723778 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.221642059 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.080720448 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.026119847 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077330061 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102033605 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077070199 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098475527 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12547627 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075724068 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076541459 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.070814033 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.064603405 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036711355 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.082734106 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090676948 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050080481 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045818389 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089492403 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074641516 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.094696569 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.07253448 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076645254 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.062124774 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065568218 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060031201 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.063704881 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106817692 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082318861 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.085584527 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043281609 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066703142 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079841907 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096120169 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038513689 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10390768 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.041825062 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079686585 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.034153389 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084563445 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.031957292 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.126919939 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036584357 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05896916 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.025517424 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029533951 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102581307 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.073426306 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065881965 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060586003 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.10103268 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102485942 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.035363865 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071125387 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078936252 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062029939 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079782466 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.069639785 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.049133061 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0559137 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070214088 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044210484 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.040361081 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080006161 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055884905 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.237168586 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042486533 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032688277 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101143794 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065584856 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053827595 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037209705 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069341076 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.08454029 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053154663 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046445052 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07620598 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065887129 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104416715 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.050976748 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057791355 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085299266 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038236074 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.051985981 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.026577355 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.043753172 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.033926562 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086132212 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033661239 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073796015 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.026058223 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093084299 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043566089 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.052808191 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062683979 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069612749 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089351124 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05488447 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103791596 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047937092 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082910866 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067705731 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053710781 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047325525 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063289886 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06082026 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083205548 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.057029703 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085646838 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106916477 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06427956 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107895272 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049615902 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085110659 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06964529 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089588255 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072878907 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132642639 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103484261 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075074311 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075474706 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033258807 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055647116 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069378914 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077740704 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150138555 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094572209 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.030477587 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071624776 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055172644 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074791615 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068645384 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041820575 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116735551 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.216867653 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.047750848 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071974494 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.047809442 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065159567 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033820083 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059830411 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.064320665 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053759767 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057802793 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077122917 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088492865 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072213672 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10589074 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.06094637 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.051948355 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.080055131 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07005893 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068759809 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043180526 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043700752 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097073634 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081424244 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.087423353 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.058944851 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067432196 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072106037 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057329274 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083771203 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067250739 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.087478571 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038328865 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.034120432 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.025587433 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.029906132 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08486281 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070553914 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074194002 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059009415 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029560079 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064205039 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067619935 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029340799 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046596922 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053464157 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055378892 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.05268372 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068914187 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.072411058 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.057035302 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064995341 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060569586 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111490791 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.061138033 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047706799 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10911128 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114390725 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047084596 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053357321 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.029277093 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038089076 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077158908 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119833657 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125619933 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.037117984 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047153806 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.04747502 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048280679 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.029512496 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.05025268 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.05079486 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069689356 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06413045 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.078545998 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.219952601 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033522498 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064135666 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05754532 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050966087 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.065265416 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078098832 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086342117 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.10172666 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071233287 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065535062 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032857989 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.036705847 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032981812 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035524231 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.058136008 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.035211797 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030929071 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101234904 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.048852107 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061202333 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064048379 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044600393 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030980727 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090949769 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024139146 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093148351 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.026566352 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038957676 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.039416536 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035402482 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049389614 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094096224 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070132929 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071412788 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065399727 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062960572 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120875558 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122075217 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038500711 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106040085 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032381531 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031950899 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032400165 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070237408 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048383222 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.075642566 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103001919 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048264471 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060645985 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033002816 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107010107 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.057436899 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062666207 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044277179 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035506476 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105707719 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035902516 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.03811323 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04767638 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067904188 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026560884 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060654418 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039792086 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034483602 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128432392 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.672152962 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050274961 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.033156409 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056107801 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110233177 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101502691 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057807339 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070979677 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.08206032 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.208487848 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053821536 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065904696 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.150888174 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030478552 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051841908 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.062764054 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057080369 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060108776 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.059012545 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.045627061 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.051958755 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.045968356 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037473465 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067375466 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045912277 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057187066 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070947312 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041335214 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.046336508 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093038895 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.062537984 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.039185149 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045773689 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.063035043 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046177807 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063897821 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.026568117 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073230123 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049486643 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078152047 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.058606302 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068555823 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09003035 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053518425 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099990884 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.068677766 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084593547 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047819592 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.03631094 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08866254 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.047046635 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035367524 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106965817 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.053774061 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.06398427 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064486256 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.057025556 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075476048 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078792795 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073029417 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058729137 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037481874 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061246582 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062990073 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044605057 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036332754 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.03191272 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.034392275 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070013522 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04523874 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042279455 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079210157 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050143864 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066216746 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.066726166 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087338951 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047472745 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063421598 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073244313 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052338637 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072145939 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062917895 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095870685 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150423229 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.234420084 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093025734 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096318172 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.03461747 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.032633958 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.026019672 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078040051 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038911879 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.048730005 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039657909 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094163642 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.040861965 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070829217 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.209140469 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038456159 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052889045 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054111424 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.026532037 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040600481 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06651084 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045502131 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038265777 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078121442 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041285095 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087456837 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070070425 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056835147 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052286437 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038153783 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072622341 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.062127383 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.091421244 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053075122 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.032282324 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082919485 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064570238 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099980717 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.031056706 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038605892 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091696876 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06276226 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09393097 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037757386 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113816697 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109505364 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06123806 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09804609 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028206655 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046209276 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048174248 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.088034407 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043215597 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073438688 seconds)
  done (took 43.040555625 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149042998 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141724779 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079591058 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.091225441 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.247753569 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.255277997 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10851798 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.083320764 seconds)
  done (took 2.283820201 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.028541449 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.03924769 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.036242709 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.169604727 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.076789987 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.023073691 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.02740777 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.037634182 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.026114174 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.022350891 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.06343317 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.02253613 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.026256964 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.451993277 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.021161168 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.027049978 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.02603051 seconds)
  done (took 2.217794604 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.317794203 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.271344102 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.40536162 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.339637312 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.117495312 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.644326116 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029849968 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.037943824 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.746250291 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.378157902 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.111328221 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.18409547 seconds)
  done (took 19.640988151 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.033653843 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.035769721 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.03544387 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.031996613 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.031321344 seconds)
  done (took 1.328141421 seconds)
done (took 80.722683746 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.042571482 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.141831049 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023914401 seconds)
  done (took 1.309447655 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.040186474 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.038783407 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.038088489 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.038802464 seconds)
  done (took 1.261069199 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.032807358 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.034980293 seconds)
  done (took 1.17191294 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.198136916 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.14233072 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.048566067 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.04110061 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.03797592 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.038625364 seconds)
  done (took 1.217839415 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027212312 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.026107739 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.027989536 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.028922842 seconds)
  done (took 1.179695014 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.027364074 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.02123095 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.023659526 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.025087116 seconds)
  done (took 1.141801012 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.042006738 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.043109276 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.071477384 seconds)
  done (took 1.203540085 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039529043 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.041296779 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.034312757 seconds)
  done (took 1.176631084 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.069850879 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05625686 seconds)
  done (took 1.218594521 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039370767 seconds)
  done (took 1.148911648 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.049207692 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.05606836 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.100252088 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.066328039 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.103120916 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.088639216 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.03399288 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.034698665 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.029988478 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.028990556 seconds)
  done (took 1.684923709 seconds)
done (took 15.23736711 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.043564713 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.161136644 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.27475838 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.047302202 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.615545513 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.271676635 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.686612211 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049400747 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.059841684 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024599752 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043169759 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.589367688 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.68977882 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.10426421 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.677546786 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.099404498 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.764084815 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025406952 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023870433 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025130328 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.670616841 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024617478 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025832627 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026292278 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.763463121 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.293880139 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026434869 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.096735713 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025363267 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029421558 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.275345374 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026510459 seconds)
  done (took 12.65048041 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.032626354 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.090179833 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.029501219 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.043090115 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.027784901 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.026902251 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.028752391 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.025891893 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.072227583 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025673848 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.047784138 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024574308 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.029332685 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026024562 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.047022248 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024748771 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.027266546 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025809983 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025140226 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.026026704 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.045887693 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024439119 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02531433 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025362291 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025222706 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.039656664 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026076255 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02522719 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02629473 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029509062 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.030236966 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026628433 seconds)
  done (took 2.154572986 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.09058086 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.094207396 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.0310027 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.070497894 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.079133631 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02832161 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.116685478 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.050768573 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.076322458 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025808601 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.044981419 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.025476258 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.065448501 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026719651 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.047986497 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025447287 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.028362748 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026979417 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025395043 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02626909 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04727966 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025437436 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026672163 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026692044 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02664464 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.042516045 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026774301 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025138136 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025526057 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030817664 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031984234 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027377671 seconds)
  done (took 2.481029941 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026809807 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.028819224 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.036619605 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.040666756 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.023970502 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.025796951 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.027329411 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.023185734 seconds)
  done (took 1.344981501 seconds)
done (took 19.740192625 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037077591 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024234619 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.0268508 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.044128978 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.030322789 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.024827172 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.02035317 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.031171824 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.027749836 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.027134027 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.029382963 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021511589 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.026756072 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020800892 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.027762006 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.021145062 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.027229746 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.0255238 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.025338225 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.027482709 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.02411784 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028251854 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.031256369 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.025635047 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.024818373 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.024686215 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.031067798 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.02848488 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.023048765 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.025120395 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.026237841 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.026374412 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.025680955 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.028609185 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.021305035 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.021684224 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.026775584 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.024559848 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.029957338 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.032935235 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025883511 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.032638844 seconds)
  done (took 2.21321949 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.029883827 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.034681548 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.028310711 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.034409018 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.030778153 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.035091954 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.033606871 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.031187464 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029326669 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.030784412 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023820307 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028394141 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030332419 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020995498 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028716978 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025964401 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.032191235 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.024677498 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030230132 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.029935224 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.031765518 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021696004 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.031125136 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031857478 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.026521348 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.032533366 seconds)
  done (took 1.862398471 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.03195479 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.047819379 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.051351876 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.108203251 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.067846468 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.32284416 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.041601996 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.052734314 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.061232193 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025047796 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047926953 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.052661436 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056364058 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033110978 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.06730021 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.04482481 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.038331403 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.026669851 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.031302752 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.063401457 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.050790257 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.046485644 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.060829341 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.047298954 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.023601173 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034927273 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032875273 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.042809311 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032457656 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.037956752 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.028878055 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.028271416 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025133646 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.037226161 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.028469614 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.022160873 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.048596872 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037490612 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040329392 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.066827071 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.035884373 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.02627854 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.056221856 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.098995532 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.024227094 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.027971091 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029600971 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038212544 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026403515 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.059671582 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.04303852 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.024246955 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.045194001 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.026597547 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026404103 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.043627457 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026097408 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.026637926 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037327548 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.031278855 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.048340928 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031650111 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.050204805 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.024298048 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.037024002 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.025753991 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.025817116 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.022849501 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.063913612 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033467483 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.081678321 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.025484858 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022271223 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.037910391 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.036997819 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.032398895 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.024517255 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.047324423 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03909661 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.028845099 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.036639365 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.027612653 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.028228268 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.063277409 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.023177821 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.021996029 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022045069 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.027009403 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.028725831 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.025324262 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.039201463 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.024108238 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.028204285 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.041612944 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.024297447 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025354699 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.027430939 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.026143221 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.02410051 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036515469 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.028402762 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.026086875 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.038758963 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.025558993 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028495939 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.04186554 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.036193745 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.02403757 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.025590529 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.026920932 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.026370809 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.029548409 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.028527643 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.026702031 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.032849228 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.032559031 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030771926 seconds)
  done (took 5.72415772 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.127905257 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.117005233 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.024505745 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.110711433 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.032897453 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.028672524 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.113161773 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.114101515 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.024625934 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.025704361 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023864248 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.056203775 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.050753689 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.061816643 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.03924414 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.026989235 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.05188226 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.061140512 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.116123714 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.110178574 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.050107734 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.034106036 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.027557364 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.026420272 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026046144 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.035361039 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.04231171 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.033405591 seconds)
  done (took 2.725141004 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030264017 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.070930215 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027849863 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.050648045 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.04272622 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.024636447 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026320966 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.025621621 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.043454943 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.030193703 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.02464278 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.028938903 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.027821558 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.026930181 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.025437793 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.031595035 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.031837393 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.032941587 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028414059 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.030085643 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.036591571 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.050520039 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.0287921 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.024703194 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.028594635 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.02488502 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030332661 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.03352839 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.024678414 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.024409895 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.021050385 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.029093548 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.040580064 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026051677 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.024960958 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.025698432 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.024826041 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.024878473 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.025220404 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.023174248 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.022568298 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.029970008 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.023314571 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.030071663 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.040322486 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.027590474 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.025878587 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.027258963 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.027352453 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.021593355 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.028613822 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.027852264 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.026909781 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.03382721 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02842154 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.027238477 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.025478671 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037721264 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.030209812 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.023597508 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.023282591 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.022752025 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.026575675 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.032077823 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.043205889 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.026885808 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02318003 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.024199835 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.026010229 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.040105438 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.02386568 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.030788152 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.021367008 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.024886543 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.027763196 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.027805736 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.026113092 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.022695101 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.023973058 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02442168 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024897155 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.025298061 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.024368505 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.028319853 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.022027764 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.022428631 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.023890813 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024287062 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028942302 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.02221141 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.027178017 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.025029741 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.026235646 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.026498058 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.029310082 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.026926146 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.045724501 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.032503578 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.024789463 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.022042776 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040969731 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.027261086 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024817181 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.026889164 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.029283434 seconds)
  done (took 4.152027778 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.048998009 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.026133406 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.044769885 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.051023239 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.035035118 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.031504736 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.039430751 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.025321953 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.041380463 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.023951863 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.033935783 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021581758 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.036657922 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.033588521 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.026290939 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.034518759 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.027908799 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.04601207 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.038761928 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021978297 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03151024 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.03460094 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.038119289 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.04422891 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.043922051 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.04305987 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.036122888 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.026844014 seconds)
  done (took 2.093057316 seconds)
done (took 19.865855332 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.156851498 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.375975775 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.117876879 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.717435608 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.20458652 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.117054173 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.227843059 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.119972973 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.401937738 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.21633272 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.035465892 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.969233681 seconds)
done (took 59.823497479 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.244348032 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.30859795 seconds)
    (2/2) benchmarking "String"...
    done (took 1.352088857 seconds)
  done (took 3.783474616 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.518220102 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.071388901 seconds)
    (3/3) benchmarking "different"...
    done (took 1.130830213 seconds)
  done (took 4.81177776 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.407973466 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.108264157 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.446457873 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.065701399 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.10438816 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.934810262 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.308857876 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.7551996 seconds)
  done (took 27.84717495 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.115856732 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.45824139 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.503460628 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.58505042 seconds)
  done (took 17.840012288 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.572385951 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.519446509 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.521707531 seconds)
    (4/4) benchmarking "different"...
    done (took 1.839767687 seconds)
  done (took 7.698962786 seconds)
done (took 71.717661006 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.058405865 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.152285676 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.093798747 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.307991678 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.122272976 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.184420481 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.097821523 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.141550715 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.051975145 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.12134274 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.09808953 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.109345397 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.127854126 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.106847045 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.109356304 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.10849932 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.192303556 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.118311081 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.061974072 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.296005423 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.411249054 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.098217372 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.128373833 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.143139844 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.915981811 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.177678927 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.203429731 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.117265341 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.747447026 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.084915413 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.128665565 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.118855894 seconds)
  done (took 180.998168141 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.101563763 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.060868911 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.07381579 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.118231857 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.586878234 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.468311451 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.973400341 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.530977855 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.11565138 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.126935677 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.193074072 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.125073076 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.180541396 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.809573158 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.142175501 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.148780812 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.058561421 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.953732311 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.114055516 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.060411359 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.104216494 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.746126528 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.678221596 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.996103421 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.115821225 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.09583428 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.136387619 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.13729404 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.432200902 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.023058459 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.144942675 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.105088807 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.311515684 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.358045471 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.127931292 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.100590395 seconds)
  done (took 154.662128544 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.387830652 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.117773761 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.153739073 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.280358764 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.282185107 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.171215052 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.121094923 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.120488419 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.114510781 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.113186007 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.109535689 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.180194106 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.102256238 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.139314845 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.154057149 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.120678245 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.109920759 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.223690515 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.089591768 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.064985513 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.084888045 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.142279263 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.413136916 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.280363622 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.12079477 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.114492089 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.279054214 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.128817813 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.113983277 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.113918292 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.266236864 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.106138324 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.235135109 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.215853628 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.081318307 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.148852654 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.099254282 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.759482441 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.117739536 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.10843661 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.096550872 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.154722855 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.076343962 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.384678706 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.223126915 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.117975178 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.132292199 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.587508873 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.709681566 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.088446235 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.094363176 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.114968689 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.082545096 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.083322346 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.31383418 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.107752082 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.141443748 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.430311599 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.127413498 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.10493401 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.108287643 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.115499991 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.105446685 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.100439372 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.134347583 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.88820006 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.445719425 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.461531452 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.992215835 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.096218853 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.081201197 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.060631709 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.819253832 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.15200992 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.05764216 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.073205345 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.274760155 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.109546111 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.117763184 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.056644856 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.056969551 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.106286931 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.249591656 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.100765832 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.080327791 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.460529001 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.290025008 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.110084024 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.106231145 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.134751714 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.097402496 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.119655433 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.131921155 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.07336957 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.10313748 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.133877986 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.715702676 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.09035421 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.101165 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.48755062 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.492620962 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.108900637 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.182306826 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.482519041 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.314618824 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.126456118 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.127084802 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.138285067 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.116046058 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.121818519 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.127099446 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.097662618 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.100377387 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.070782341 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.076676359 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.071024138 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.105028756 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.130739759 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.12039027 seconds)
  done (took 330.123542427 seconds)
done (took 668.37112746 seconds)
(4/20) benchmarking "parallel"...
done (took 1.129813076 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.568340272 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.528880465 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.217224826 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.032482208 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.420166164 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.259656482 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.393372969 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.607079852 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.40633812 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.263474048 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.844104965 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.26155536 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.559127884 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.479834672 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.294337179 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.574233487 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.296485959 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.884888207 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.884040814 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.229942646 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.322154078 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.300612663 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.252580591 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.926714971 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.36019648 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.340799553 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.517526406 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.90704918 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.393221722 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.833448842 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.564340383 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.555806705 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.366782281 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.263080843 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.012498394 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.328177178 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.346353646 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.883433235 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.300213438 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.742638439 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.98960874 seconds)
  done (took 74.623986473 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.500021151 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.322444717 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.420002568 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.435031159 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.974480708 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.391534183 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.505762674 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.324820147 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.324238997 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.439810745 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.449834939 seconds)
  done (took 18.254903586 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.367202597 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.300991009 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.425749162 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.398138686 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.665811251 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.458163592 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.488939849 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.328191758 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.323988653 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.446841837 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.469086849 seconds)
  done (took 17.799118332 seconds)
done (took 111.79064645 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.640053668 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.162831035 seconds)
  done (took 3.90639569 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.131607583 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.110224995 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.112336637 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.11122965 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.130213181 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.130077902 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.127118451 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.140606267 seconds)
  done (took 10.079179112 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.149163538 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.129344588 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.129634593 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.120265955 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.128018689 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.134175899 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.133021474 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.148505807 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.149191167 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.135233927 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.136596576 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.140776201 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.144922261 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.144722931 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.122937465 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.131004002 seconds)
  done (took 19.290994636 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.12478977 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.141712914 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.144671679 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.138019351 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.141736623 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.136461888 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.148008405 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.147693599 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.150759154 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.122835671 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.134390146 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.121632103 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.109002987 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.132355783 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.122215497 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.139061169 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.142919085 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.137547573 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.148153916 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.133988161 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.110340174 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.12627053 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.138075708 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.138389518 seconds)
  done (took 28.348038672 seconds)
done (took 62.752523839 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.76412466 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.182614919 seconds)
  done (took 7.066940477 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.133595573 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.141981214 seconds)
  done (took 3.503501316 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.104794034 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.139104528 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.097963675 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.131342595 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.125428359 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.121831846 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.138295619 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.13692399 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.141731395 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.139572591 seconds)
  done (took 12.398202134 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.140812882 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.110121 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.105379065 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.141917567 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.09291093 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.104954752 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.110367541 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.098391061 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.10399647 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.134336825 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.150139596 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.334715971 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.14539634 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.370550538 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.129551825 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.137743449 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.149495182 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.132245001 seconds)
  done (took 21.814418753 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.138673253 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.134815645 seconds)
  done (took 3.377118578 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.123586059 seconds)
    (2/7) benchmarking "second"...
    done (took 1.147937073 seconds)
    (3/7) benchmarking "month"...
    done (took 1.153817884 seconds)
    (4/7) benchmarking "year"...
    done (took 1.144433084 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.14146719 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.137510424 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.132955645 seconds)
  done (took 9.085550045 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.728976366 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.245491606 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.337553254 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.746825612 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.111956352 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.169010816 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.103529499 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.174029134 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.004352957 seconds)
  done (took 17.726202149 seconds)
done (took 76.088811164 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.818908263 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.121175628 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.81196564 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.326170445 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.095234209 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.462339549 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.145805139 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.679783354 seconds)
done (took 37.578102106 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.18866234 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.108948356 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.156366821 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.149060671 seconds)
  done (took 19.510360976 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.125981423 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.801115814 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.146798727 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.253048108 seconds)
  done (took 19.547799693 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.666137762 seconds)
    (2/2) benchmarking "read"...
    done (took 1.545589838 seconds)
  done (took 4.340357295 seconds)
done (took 50.711651279 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.135681971 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.146015579 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.139410184 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.129560434 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.143972207 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.149781974 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.140489348 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.132549295 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.147492219 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.126105309 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.135795918 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.146106473 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.133775469 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.099206221 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.142355846 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.141745407 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.10691687 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.137712129 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.139971072 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.13901904 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.142310328 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.141392691 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.13436666 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.13181374 seconds)
  done (took 28.380500216 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.209920898 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.159925477 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.198495818 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.207259453 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.210285186 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.216767172 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.217904744 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.17044267 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.204331973 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.194339999 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.151579835 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.24166763 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.17157095 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.22440041 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.161801689 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.229448149 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.216507666 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.165979709 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.182693391 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.235445924 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.207037267 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.157496428 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.213576994 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.172789477 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.234112281 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.17871853 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.191518742 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.16861644 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.172163342 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.217174452 seconds)
  done (took 36.998058292 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.146819508 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.143643091 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.124750267 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.222794572 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.129915137 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.129629168 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.143025989 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.135220936 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.103871983 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.108033324 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.112373607 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.098035383 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.118580643 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.144139754 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.140715819 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.141151575 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.156331978 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.314502698 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.138976385 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.138469484 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.188793873 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.1287274 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.131341751 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.099413562 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.116137122 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.143505096 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.105456166 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.131157697 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.134464898 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.131826169 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.139720445 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.173953228 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.179802495 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.120143123 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.261048049 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.205453835 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.107754903 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.170857721 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.127021294 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.142643994 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.137177039 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.143283324 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.144726142 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.139084005 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.193082766 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.141691086 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.132998379 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.133038982 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.122469842 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.137011205 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.102193011 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.131025594 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.140389347 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.134716319 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.140861588 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.138051711 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.128861328 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.134934155 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.137478987 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.139349215 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.128500607 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.208845878 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.117013681 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.13312042 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.501785854 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.138002624 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.213122747 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.141032748 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.135168878 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.347877836 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.138943898 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.353384955 seconds)
  done (took 84.224936102 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.140329757 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.120643969 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.226871034 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.208236683 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.137341052 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.137430335 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.128809556 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.127018907 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.800542536 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.138123998 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.11572141 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.144619926 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.790193321 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.103872932 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.122383667 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.190390204 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.101345237 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.116839168 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.129007154 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.111356012 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.133097854 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.127404979 seconds)
  done (took 27.466059154 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.175810156 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.167449445 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.18213056 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.150799513 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.133911739 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.13047542 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.156105899 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.129720163 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.170306395 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.188698845 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.178089539 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.167534003 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.147628569 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.184910814 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.180063175 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.209286869 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.169073084 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.212218948 seconds)
  done (took 22.146521243 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.314273381 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.297072972 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.19322668 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.165541046 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.362639946 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.34510567 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.223024947 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.32364228 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.171314223 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.258319449 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.309045207 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.171860448 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.339729898 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.16246402 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.181519558 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.36260765 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.208625803 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.162680174 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.242062765 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.225570022 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.313528595 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.248970967 seconds)
  done (took 28.677900287 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.169048466 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.169130178 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.203020871 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.201155386 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.147833316 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.12487206 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.199345245 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.180274228 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.143484169 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.158328626 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.15038333 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.116746351 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.209011559 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.140016531 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.211423162 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.167364246 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.183378649 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.194416955 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.179313008 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.141569281 seconds)
  done (took 24.499960743 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.13240113 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.129037448 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.134738819 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.115402184 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.114213595 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.111997199 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.130881696 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.106664141 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.10810833 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.37559358 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.111404513 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.114022987 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.121020244 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.135523067 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.134028522 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.128496085 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.141768219 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.116316194 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.131137849 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.142502035 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.374372845 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110048797 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.114715041 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.135533701 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.139848969 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.117992927 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.131554935 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.128712703 seconds)
  done (took 33.092288058 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.190323512 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.18911169 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.1767937 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.249114064 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.250352368 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.165666222 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.262757772 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.259247884 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.168128343 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.179623149 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.219093447 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.168665699 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.177560389 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.154555565 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.178582716 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.219529341 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.168979412 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.245810455 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.199558165 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.170289426 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.185642035 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.183849608 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.212468852 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.179863022 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.174293332 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.21821228 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.195968187 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.298649535 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.181417037 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.178157534 seconds)
  done (took 37.120801447 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.149383284 seconds)
    (2/2) benchmarking "in"...
    done (took 1.146178063 seconds)
  done (took 3.397607199 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.141207078 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.230172799 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.124524226 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.33751778 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.266991457 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.308195493 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.29277668 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.206646586 seconds)
  done (took 11.014822394 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.119201836 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.595854632 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.149450566 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.134286573 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.136862009 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.646217439 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.090229126 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.08989134 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.947758006 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.131262351 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.21288578 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.675532121 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.076229779 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.454515701 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.258596689 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.992718015 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.433461367 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.782264309 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.23412238 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.255800989 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.933052727 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.24214231 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.107456077 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.133743225 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.142022261 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.044525808 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.02548624 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.57192538 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.321184853 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.268931027 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.968064974 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.225691405 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.135947675 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.435250885 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.251080462 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.134325161 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.323257918 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.260366419 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.141569644 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.135317121 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.943541513 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.085148932 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.29190245 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.419249631 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.234995739 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.140067194 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.117452938 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.140974274 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.410677517 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.791139679 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.109222669 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.142416949 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.276845246 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.132135331 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.917840519 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.147489511 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.137194201 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.062608004 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.817370751 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.440769872 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.492663081 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.268387111 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.216049174 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.278646011 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.147000655 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.368805807 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.941525271 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.99025193 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.97699027 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.253265551 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.683180298 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.143437184 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.102591835 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.146523021 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.114682731 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.447559829 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.126698024 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.146436441 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.12458172 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.130669008 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.424231989 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.256296866 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.988100256 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.28217012 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.345561382 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.630937003 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.278582685 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.136365158 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.809890469 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.010668813 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.237000236 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.845246306 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.400405184 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.273102218 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.171193148 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.409729397 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.171066467 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.139643586 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.006657204 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.79851947 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.153196114 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.117033462 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.478398483 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.148492071 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.146613274 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.132113785 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.842010142 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.266012723 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.319742902 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.141693472 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.127140747 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.135401929 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.729534949 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.218916427 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.108213351 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.61248208 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.114783844 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.746517195 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.449747772 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.356364186 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.54879412 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.164585812 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.441718253 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.941465538 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.118557525 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.720097401 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.993422623 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.730413763 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.422409484 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.229551946 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.082545248 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.190109013 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.134238109 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.338142144 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.209540526 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.140546345 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.1435889 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.135329408 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.144908099 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.12452693 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.281717579 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.566409344 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.020492267 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.148455899 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.393313633 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.239814016 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.118604578 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.411296981 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.868598939 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.27634427 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.143317753 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.939828366 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.442750458 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.88880412 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.275023741 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.123406085 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.135663143 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.991684408 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.175286006 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.239173458 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.134377064 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.750659388 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.238221448 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.125377479 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.145131899 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.623779316 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.276592088 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.142756574 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.264722848 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.969448498 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.084394472 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.143695066 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.460180308 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.245218896 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.119237217 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.142306996 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.120245847 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.967927062 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.788183124 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.343681046 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.735865257 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.975486359 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.219609229 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.307400794 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.218349004 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.470615154 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.400112207 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.28316791 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.144900425 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.10868985 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.134145714 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.600427332 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.004124168 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.246325407 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.045883345 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.173509761 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.088283432 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.220404842 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.962165509 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.134513833 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.910483382 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.137766919 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.24328753 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.126644103 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.136022821 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.301533176 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.337164323 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.283600511 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.756315831 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.142500904 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.133164267 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.902084061 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.268343548 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.843572847 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.246470379 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.9988626 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.258955401 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.257085714 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.319478851 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.916441078 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.256861084 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.138043448 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.12426303 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.137597048 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.127611123 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.230399793 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.89593765 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.977516622 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.915365458 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.830349504 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.105461736 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.715910828 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.407807867 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.250653282 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.0029101 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.23503346 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.3692909 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.164772893 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.709394873 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.137587127 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.924832995 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.156637626 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.959683806 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.127264745 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.180479146 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.276269643 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.660363624 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.26401851 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.142509007 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.355710085 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.230009409 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.864058586 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.252558121 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.270194892 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.518440305 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.079798419 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.240185802 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.363359774 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.171448589 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.110751417 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.130629625 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.496717266 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.084384495 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.127783669 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.22467884 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.98101033 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.357368685 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.415287786 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.264170204 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.122358077 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.112516478 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.354866429 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.23478888 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.142496849 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.494463583 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.088106885 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.19807798 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.234911177 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.150626162 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.145973689 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.416363346 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.320198963 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.49087013 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.686683339 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.747568813 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.991666956 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.239589311 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.883191908 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.284644742 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.819957133 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.240403115 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.115977462 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.84328365 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.274355705 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.489464464 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.299179412 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.292052082 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.871171049 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.318907752 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.456579503 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.346077967 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.270763021 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.976142919 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.724540201 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.406779767 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.594652248 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.18958479 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.7016194 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.195496314 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.694065314 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.137100184 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.841774668 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.259524885 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.195980013 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.127057782 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.126396842 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.668656194 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.106948551 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.120406954 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.963257445 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.88837763 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.072634204 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.876857362 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.244953058 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.140397577 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.149263929 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.139184994 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.070693537 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.248025219 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.587082461 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.291741296 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.141740632 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.133494221 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.149513045 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.58335015 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.009904075 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.060246971 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.110307042 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.263818687 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.133403865 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.143178002 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.145232085 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.126825633 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.139706206 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.131580715 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.646226917 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.151167122 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.760386006 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.252406111 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.114178306 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.434231035 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.170242563 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.147683989 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.409679999 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.235162409 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.276695129 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.209062 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.140187288 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.563936575 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.259323674 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.135744518 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.459390415 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.477165805 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.378144654 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.748558298 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.169648894 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.575639947 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.480655866 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.896212392 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.112345319 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.059225086 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.221482677 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.976676462 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.138199145 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.625573911 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.74340824 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.126371759 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.453772263 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.084545822 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.51448473 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.287682941 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.178740746 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.146923783 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.139887395 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.225564933 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.388627432 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.176249614 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.509185664 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.345077309 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.132679132 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.479193761 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.235432417 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.385769259 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.173960432 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.139719814 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.139264913 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.147891346 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.668904913 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.118522151 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.235059483 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.145050959 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.046174674 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.056046941 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.099909896 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.776428564 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.04666052 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.246377789 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.143679103 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.340153498 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.188603003 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.010404792 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.146951837 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.965822527 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.482873765 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.175645002 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.422703797 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.583382356 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.891464135 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.585110252 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.252614581 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.139505468 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.565572192 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.16292403 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.278261877 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.074351453 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.507303473 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.67393952 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.57932938 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.268981042 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.11275517 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.900442158 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.500060664 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.960032305 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.993046046 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.857810347 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.140405199 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.349879452 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.992819125 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.289828888 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.138577749 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.645561397 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.705585109 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.136006479 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.619826422 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.137216653 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.986822804 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.85356565 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.909482166 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.18507836 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.117838108 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.987562122 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.003823589 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.709867993 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.621073029 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.253657077 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.073576199 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.98712424 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.815791074 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.686501294 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.082414127 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.992470817 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.987037222 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.505146038 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.048428633 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.987185873 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.408120769 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.621688057 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.137015026 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.498210096 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.091763659 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.139527242 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.296116229 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.444229109 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.211110064 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.053956577 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.987780268 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.986009248 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.986797511 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.660045387 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.001760852 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.985928505 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.601304384 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.137908203 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.760611284 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.934384892 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.26808176 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.066182116 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.428999743 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.136864855 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.46883122 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.853479261 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.070491939 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.234871678 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.0219799 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.124818354 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.790943546 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.101667875 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.987844227 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.96269543 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.376452874 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.401577515 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.427505067 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.329321353 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.083169286 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.688530583 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.107906555 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.818071001 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.01153064 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.986413086 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.461362609 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.130021847 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.490428443 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.151352318 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.504804256 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.112805278 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.307676752 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.211037443 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.086011193 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.987369013 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.987219308 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.031687121 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.033609696 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.536242544 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.892441807 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.506518632 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.130373318 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.810876635 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.538780692 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.928939991 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.1991523 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.305993553 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.32142204 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.029327619 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994705671 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.427697083 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.082270043 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.158253017 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.08888483 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.841151537 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.070442824 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.987901141 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.589710405 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.002418745 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.986859596 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.986139212 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.894711284 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.785526157 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.102187139 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.237313797 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.093626444 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.988108081 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.632230042 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.273136528 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.028937671 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.98685543 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.988750875 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.882660194 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.107400558 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.988161738 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.394736072 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.153912771 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.3435674 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.845058996 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.443864883 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.085731337 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.987614955 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.988512004 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.719730052 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.646579665 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.032777491 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.326093182 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.00258647 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.52343017 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.94650978 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.498604041 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.534662063 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.050423551 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.121126614 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.987349955 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.045749506 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.981116958 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.931750771 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.745866511 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.465115786 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.088595733 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.838644345 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.032844419 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.058544694 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.183136949 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.067608341 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.987075562 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.986212617 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.986476809 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.463074886 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.955907399 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.991023113 seconds)
  done (took 1435.41183997 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.255311734 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.987771549 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.986720727 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.987430027 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.987741802 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.987398744 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.986466635 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.986529073 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.987191664 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.986462112 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.986554021 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.986569193 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.986638982 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.261491205 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.988227077 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.987149706 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.987478698 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.988131474 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.98664855 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.987224353 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.986745238 seconds)
  done (took 22.24093241 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.986399171 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.987243945 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.987108394 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.987244892 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.98785956 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.987720457 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.987532276 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.987537913 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.987684823 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.987081233 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.986600942 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.986879151 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.98654803 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.986485451 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.986639121 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.986625477 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.987390505 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.986963931 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.986404654 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.986104454 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.985977671 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.986735391 seconds)
  done (took 22.681975423 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.98861275 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.988124975 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.755777365 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.121639432 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.987209962 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.987404248 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.987283998 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.196650935 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.046584577 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.899924465 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.382677928 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.007910688 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.990687047 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.181979778 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.091015626 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.987983092 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.107428519 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.986601091 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.986329043 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.988736396 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.986743923 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.248087078 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.138338579 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.987284703 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.846023461 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.141653197 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.987439055 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.988102481 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.98758196 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.974499981 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.069132358 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.990460063 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.901204938 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.829661385 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.347154627 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.904337822 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.080573 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.992824187 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.98915739 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.987440604 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.205587998 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.749721983 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.993219815 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.988257509 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.31860131 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.114284182 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.98773845 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.349648121 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.004578663 seconds)
  done (took 82.729682776 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.987043058 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.11688142 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.050577351 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.987792583 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.111627139 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.987302282 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.041009725 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.987546098 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.990310392 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.988670419 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.131202723 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.145074006 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.988266809 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.987383095 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.076719411 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.987774804 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.989331532 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.988433712 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.987412425 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.987487819 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.98757717 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.041493111 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.104286169 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.152589126 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.987130826 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.987176798 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.986338707 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.986496564 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.141724349 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.987765352 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.988158556 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.988497645 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.118483028 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.069648491 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.987035167 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.987021873 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.119130536 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.988570584 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.987675203 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.987981027 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.987711519 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.987187503 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.037972227 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.130082223 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.987745004 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.10106718 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.98868156 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.988006163 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.142617128 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.98707061 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.986595917 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.152613775 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.987105099 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.9871745 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.98763013 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.108807078 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.988003919 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.987114244 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.986913005 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.141038452 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.987186921 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.986382475 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.148497493 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.98873479 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.987325688 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.159597577 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.101689888 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.987231862 seconds)
  done (took 71.074343074 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.987530058 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.12423634 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.165889518 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.165539371 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.123956044 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.110650584 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.129699815 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.125227443 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.124710441 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.127594376 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.126417652 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.084334818 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.095276655 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.084623335 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.128762725 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.110234185 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.108801328 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.111848888 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.129317054 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.128601541 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.109364969 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.163860152 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.124990054 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.16533789 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.345167434 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.094527948 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.124004135 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.127721513 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.166910239 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.125395976 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.341527538 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.129300711 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.125788227 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.166169476 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.341762385 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.122360583 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.988659776 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.123914123 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.129003952 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.124703067 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.094426208 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.167049709 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.121099183 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.09553277 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.111216765 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.122806054 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.165000078 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.342702785 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.084331354 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.127567905 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.126419085 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.167308953 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.121924822 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.109550027 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.165978168 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.087689174 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.163060805 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.166781111 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.127516826 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.166859861 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.164886603 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.087359002 seconds)
  done (took 71.490329858 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.98697007 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.987643689 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.070743765 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.988170686 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.987912558 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.071359643 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.988999025 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.987633754 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.987751933 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.986642176 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.986983803 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.070734116 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.342577822 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.989689063 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.071207064 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.348539895 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.071661531 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.070189023 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.988622049 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.071561721 seconds)
  done (took 24.024778934 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.030742156 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.145024896 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.026630662 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.165702524 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.020862012 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.145001784 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.032852067 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.021007256 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0263117 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.02052398 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.160546156 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.1602775 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.026411567 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.165788637 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.144917131 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.146437288 seconds)
  done (took 18.408462248 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.987854971 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.987401132 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.988980395 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.987864317 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.98848394 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.989348766 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.987077057 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.988300679 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.989794387 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.444345183 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.988027272 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.987734669 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.987163025 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.988436388 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.989841705 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.987087763 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.98827633 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.987219406 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.986721969 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.98861769 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.562627525 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.990269946 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.987561219 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.987207532 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.987291148 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.559742564 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.987621243 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.98740598 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.98737543 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.986583603 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.986996269 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.471694745 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.990109375 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.988078256 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.988024021 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.987288898 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.987462111 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.987241939 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.98729693 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.988991917 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.989638012 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.988281627 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.988426524 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.987592538 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.987529243 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.98803477 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.987923029 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.451982883 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.989131703 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.98694578 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.987428176 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.98892906 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.987354633 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.465002267 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.987490291 seconds)
  done (took 58.337884865 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.032870932 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.042473471 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.98805353 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.9879758 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.042655403 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.031618023 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.038354981 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.003238237 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.02731178 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.987717605 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.058920528 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.002386136 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.027784449 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.041257095 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.062288765 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.034540188 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.988567198 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.05351297 seconds)
  done (took 19.420576406 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.991936103 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.989757988 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.988489088 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.988272729 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.988525643 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.988330403 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.987782367 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.987572442 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.988867058 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.987331107 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.987494079 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.987081718 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.987783393 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.987209646 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.988645854 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.988587517 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.98787238 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.987686122 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.987791417 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.987676395 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.988519259 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.987643938 seconds)
  done (took 22.71278279 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.020703877 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.036960288 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.989773251 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.988541193 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.988889942 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.011041977 seconds)
  done (took 7.00534462 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.045919482 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.053523477 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.0262569 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.034205236 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.060697218 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.075695032 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.06508984 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.070694204 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.061982701 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.285042184 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.072573321 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.068909997 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.063037195 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.119929752 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.054332714 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.058914607 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.07282338 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.072221342 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.039097525 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.07393619 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.078453599 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.064131002 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.076496912 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.065427735 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.073832074 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.11763064 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.062107091 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.287085868 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.071609217 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.062241524 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.059462456 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.070688209 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.065441526 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.279510309 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.034577773 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.065678707 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.071501649 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.076461534 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.061319861 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.113925552 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.032398326 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.055106339 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.062714819 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.080203274 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.06039932 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.079331245 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.080922625 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.072355969 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.07512328 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.283199943 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.060009695 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.111529614 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.053770987 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.065123343 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.062933226 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.276917099 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.284934614 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.111813864 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054185652 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.28388062 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.114168195 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.059429728 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.111451337 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.287432836 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.054233582 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.114687063 seconds)
  done (took 73.312714312 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.114223629 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.025274714 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.075917081 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.292515594 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.113118991 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.071986975 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.074000082 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.065496469 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.065700793 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.04207615 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077023205 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.078389777 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.113806474 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.11792965 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.07625075 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.066079141 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.074411237 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.111706442 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.04371292 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.280725986 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.072131022 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.114645396 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.115476986 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.1140777 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.278726052 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.058018962 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.074920995 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.07212597 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.06693073 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.073173581 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.078270409 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.07861752 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.115587608 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.02528365 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.111342518 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.07661822 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.071107966 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.079774851 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.072479292 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.056664501 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.117930885 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.07939976 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.073193221 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.065143018 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.279848532 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.067436683 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.068075698 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.043920549 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.074721465 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.041815239 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.281338709 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.27889873 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.289652952 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.114326146 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077281412 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.07964107 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.075812341 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.075194391 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077428709 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.062775926 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.113973424 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.065922887 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.283434442 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.073061799 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.074771978 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.112610978 seconds)
  done (took 73.805645154 seconds)
done (took 2340.800622913 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.072153104 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.070170826 seconds)
  done (took 13.112115882 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.988097453 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.98888973 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.140483648 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.989101225 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 5.970325558 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.021061776 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 5.992308625 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.998637998 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.98769298 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.07808359 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.989327438 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.127940027 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.092313106 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.988697138 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 5.98888259 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.000837854 seconds)
  done (took 37.329127621 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.107189476 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.566251005 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.950798855 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.804022582 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.02157065 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.773115392 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.309369606 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.713269647 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.306501687 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.44978957 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.254529015 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.88104761 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.819627834 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.164838559 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.426037788 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.528535614 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.609160093 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.681039398 seconds)
  done (took 58.336974038 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 5.97318671 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.150417972 seconds)
  done (took 8.122651181 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 5.975727562 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.021803728 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.023791124 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 5.990179064 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.005421874 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.019068305 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 5.996198944 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.045998937 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.024173574 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 5.999318259 seconds)
  done (took 61.092698154 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 5.98414667 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.497371061 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.327140561 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.429795777 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.656720624 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.493945693 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.156313508 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.333093749 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.080127588 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.972346029 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.238504535 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.409488079 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.857591005 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.253130076 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.631600051 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.234607676 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.707203329 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.351528192 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.331616822 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.396559585 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.228313294 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.309232713 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.261243803 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.822052347 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 5.988947809 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.63389901 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.277113536 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.143546425 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.074804638 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.126635243 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.348967351 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.006981616 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.293284995 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 5.999137895 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.02928934 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.661893197 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.69568356 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.195119434 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.43655656 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.341703922 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.399077045 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.659688419 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.053304227 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.642629647 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.146339052 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.418484145 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 1.991165585 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.219217388 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.075571896 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.107761205 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.422113516 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.163383339 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.117059941 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.10938407 seconds)
  done (took 147.72671225 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 5.970138769 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.385666604 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.130506441 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.974166215 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.372396821 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.194042858 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.817207432 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.450086418 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 5.990983017 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.207965453 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.15658577 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.114160535 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.973135833 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 5.978193834 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.982344684 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.979548241 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.173867909 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.472471249 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.991558686 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 5.977104849 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.200910312 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.229185316 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.117735605 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 5.976718065 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.160126999 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.233811193 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.376256031 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.114196256 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.378908871 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 5.973785627 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.430703439 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.99182335 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 5.979706119 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.89382815 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.370286519 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.317699817 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.445528993 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 5.978721693 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.735240013 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.978091833 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.681636427 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.187095075 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.301905405 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.134281496 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.239138086 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.218239563 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.587058192 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 5.973632602 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.742909436 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.155730399 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.203098468 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.211208692 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.264715765 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.978269304 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.467776954 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.978993847 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.978548084 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.24666007 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.140730711 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.115149661 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.974457577 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.979056751 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.977136013 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.233240416 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.974636394 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.110972413 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.973982167 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.981742251 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.109145448 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.114514669 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.145143474 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.22851698 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.227652564 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.216511036 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.991189149 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.227149958 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.365676232 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.22258716 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.975380803 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.978811579 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.40177543 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.431103243 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.146890676 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.22871114 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.298871227 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.273220778 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.53099518 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 5.970596797 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.214426932 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.156869085 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.209006109 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.24725349 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.345913436 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.888494625 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.973448003 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 5.975243559 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.981283705 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.124520641 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.974025208 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.50130829 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.262122758 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.598813217 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.172558822 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.430426545 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.092646112 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.974533272 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.545818588 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.972128396 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.205109615 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.287586876 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 5.980673082 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.979702624 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.150608623 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.772642489 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.971662761 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.008701213 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.39861109 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.991089166 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.155133046 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.973864009 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.237651767 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.910147127 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.224747204 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.974530724 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.264860828 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.170472872 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.263499062 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.974261053 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.336033231 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.254213057 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.387524164 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.2173734 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.539001412 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.979706115 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.292012079 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.97522484 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 5.976721883 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.167945699 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.921764373 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.166940692 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.975897202 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.250974982 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.145649079 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.35790807 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.973740834 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.2459806 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.233953444 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.385824491 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.984613078 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.130527449 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.974035656 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.072522874 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.153037433 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.973738342 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.978787972 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.825089138 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 5.980626265 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.145974715 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.217878898 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.674885737 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.394375784 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.351870812 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.971775845 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.439877416 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.193764389 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.41745221 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.591887422 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.160855862 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.707720305 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.206881312 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 5.977286429 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.235149722 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.172299891 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.973197415 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.979554844 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.68948909 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.107035902 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.979057167 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.153906112 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.236318681 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.441452368 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.198499568 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.972824321 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.351594375 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.976218207 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.199433156 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.490552611 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.233569763 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 5.981146292 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 5.978780462 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 5.978670379 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.981273261 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.201689146 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.233688748 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.539850275 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.1360063 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.283167616 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.201365008 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.307524339 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.445438085 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.982666379 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.311078642 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 5.97386605 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.421923012 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 5.985384864 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.146252749 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.239641171 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.98038322 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.212031683 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.34363816 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.056653116 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.379283522 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 5.975618312 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.982752556 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.601360194 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.166920715 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.440746886 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.973845493 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.161814509 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.355127282 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.114254216 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.182386777 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.234314603 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 1.992630166 seconds)
  done (took 698.970309229 seconds)
done (took 1025.661402116 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.972244775 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.981483763 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 5.981280238 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.980142513 seconds)
  done (took 24.886133478 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.978021114 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.077892356 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.171704059 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.991810537 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.378871742 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.048886177 seconds)
  done (took 10.629499237 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.971590297 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.979447557 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.982042473 seconds)
  done (took 18.903950253 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.267802443 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.38892052 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.145055837 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.079373898 seconds)
  done (took 5.861815099 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.016033317 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.018122995 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.990556974 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.023120159 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.992067937 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.990348681 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.025432715 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.008495621 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.990374152 seconds)
  done (took 10.029976049 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.470918441 seconds)
done (took 76.756218675 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.310217341 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.291948728 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 5.984701795 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.329859534 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.130064249 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.322652145 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.105453721 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.004757513 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.316306517 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.40310444 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.449515754 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.112310913 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.424306925 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.392209749 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.231986121 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.018769798 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.006225502 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.053699122 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.821749108 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.16728622 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.67168398 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.200042931 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.651473865 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.018818895 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.980107079 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.128003261 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.249433432 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.164512653 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 1.955864909 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.012584792 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.085632089 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.458101453 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.223604245 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.336732315 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.087677264 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.933040197 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.413087401 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 5.985304078 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.288356674 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.504977777 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.312182173 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.085545107 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 5.972104698 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.156671667 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.40526597 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.008558013 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.039953761 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.151897492 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.596902657 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.155809926 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.514012565 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.994809503 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.611445763 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.068171234 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.073848172 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.973994273 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.900772744 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.470321171 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.146175714 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.308971769 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.005874742 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.971488252 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.002011719 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.021731546 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 5.972260732 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.213246019 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.413378623 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.081618256 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.465367891 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.017860056 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.001039456 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.019901877 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.72235204 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.13600194 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 5.972314512 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.129545429 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.315277348 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.132658609 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 5.981591499 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.103824591 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.664137744 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 5.984105523 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.124360246 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.411161988 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.153821881 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.497146253 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.445875385 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.332296808 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.381503045 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.134955303 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.489003574 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.773402791 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.08745375 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 5.994378326 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.260644734 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.098862666 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.943065819 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.507705649 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.117192498 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.496185775 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.020749082 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.006357423 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.45392809 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.294720212 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.903413176 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.024994766 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.147254413 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 5.971983508 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.282303308 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.612359427 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.087626296 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.550305212 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 5.984994464 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.052808177 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.465684948 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 5.985866492 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.35057494 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.42753855 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.070094089 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 5.981323406 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.287819641 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.993434195 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.110605545 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.552972824 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.384896113 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.211379873 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 5.97964097 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.959918431 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 5.985463624 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.179697372 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 5.988968931 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.519355278 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.538955893 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.022120222 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.25332574 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.113896117 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 5.971848972 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.345144659 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.042681385 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.198696699 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.394938654 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.305391432 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.114981288 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 5.972825638 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.415845281 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.985029204 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.234973842 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.336485408 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.154608902 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.305011199 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.088719991 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.004424854 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.026980652 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.391779282 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.608808801 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.529840756 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.244812281 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.125021426 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.540210526 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.28111508 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.813791961 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.087030008 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.041095049 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.985136268 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.008407558 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.055169261 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 5.974418895 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 5.983184648 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.285873511 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.387915534 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.533577654 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.883240521 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.694242964 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.315803069 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.143739366 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.872570832 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.527785375 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 5.988604821 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.356211407 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.479658725 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.256177122 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.017621272 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 5.976620137 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.035174725 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.723591045 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.02652436 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.297211408 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.59176576 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.541775609 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.421662873 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.158240264 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.029571076 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.310670444 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.254590464 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.309071709 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.211869589 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.37076971 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.133233833 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.368397554 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.034020901 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.305086658 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 5.985327571 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.700637683 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.240210206 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.487879008 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.349000378 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.237908259 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.158862099 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.329386415 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.984786802 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.643875396 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.085049475 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.371892871 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.023985774 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.639180378 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.084768703 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.266930353 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.890286435 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.110127326 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.437768773 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.151525974 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.12222561 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.465927366 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.006493121 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.320054225 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.153909554 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.16145905 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.254424146 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.022142175 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.12214563 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.253800069 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.12570525 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.231619794 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.01988732 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.416341152 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 5.99435237 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.361161637 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 5.976424192 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.186982869 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.018844184 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.001316677 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.245916235 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.153116731 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.306692171 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.102857025 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.159270794 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.061502633 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.025384627 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.474217029 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.829928759 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.574208624 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.893681694 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.021973508 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 5.972006296 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.401838656 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.410768829 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.057317861 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.12652082 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.521873402 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.026380202 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.150657636 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 5.98784002 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 5.986715359 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.962117676 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.126280744 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.237141161 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.535571358 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 5.987243805 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.899388754 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.157555124 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.407420393 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.52621133 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.043208008 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.104185029 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.219499568 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.071743348 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.394297805 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.017092398 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.178061752 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.347726829 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.108022187 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.112422047 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 5.976576721 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.028926382 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.620158305 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.378978392 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.472166485 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.02399656 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.328714673 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.018997777 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.241239874 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.008321492 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.089710828 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.38550888 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.160799872 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.405800566 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 5.988758398 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.149520587 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.253184509 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.014267996 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.029347639 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.119905432 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.003232354 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.577753657 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.276864624 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.181603843 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.018848141 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.234955 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 5.983990477 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.141333729 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.13288125 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.110415738 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.609231156 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.477986366 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.985705456 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.215591143 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 5.979128741 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.34660688 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.019548433 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.002800422 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.145226254 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.07562188 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 5.973365244 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.645220416 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.191079489 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.470432682 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.168275081 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.949176442 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.042156071 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.170734157 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.103563957 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.269033739 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.692115459 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.007389824 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.129385573 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.60029762 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.182214103 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.025534095 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.2683892 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.987811036 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.54938891 seconds)
  done (took 829.865674206 seconds)
done (took 831.019038299 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.17775102 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.372072738 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.233576349 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.948379995 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.790404191 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.632345597 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.247164739 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.223149748 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.096575158 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.246122989 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.868590808 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.798604993 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.082653284 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.152842353 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.06764673 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.124619463 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.192913468 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.231254774 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.1433368 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.802578482 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.380509035 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.804097079 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.407280638 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.283539439 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.37608409 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.088814928 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.192117934 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.380263162 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.379800111 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.189249702 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.206316193 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.216661687 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.814380806 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.238400683 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.068964672 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.072192122 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.787828285 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.083507057 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.238616861 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.07408777 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.363737233 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.110957438 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.700961604 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.930383329 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.768319132 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.400909401 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.830722813 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.091937617 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.124120604 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.194963931 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.186648273 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.237668865 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.379195998 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.212575461 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.881784632 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.922004978 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.379489127 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.797794538 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.717178295 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.195861926 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.512213925 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.092659478 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.195780709 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.219763967 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.109846827 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.28670724 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.403220524 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.237749492 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.213932252 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.254201757 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.233862686 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.214788131 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.106645704 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.18299326 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.109298693 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.246845212 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.752826139 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.230969061 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.77905162 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.086972898 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.929286352 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.900031379 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.944885977 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.097522751 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.178805212 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.764783127 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.813461724 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.940342055 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.108974084 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.211893054 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.87850848 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.235766884 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.4486319 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.193698262 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.17949092 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.232432239 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.824583213 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.17924165 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.942316945 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.215002639 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.771996735 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.194177431 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 1.990574545 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.079884098 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.092399014 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.238584549 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.19276873 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.404574372 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.213307148 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.143137234 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.366311288 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.111921519 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.212480834 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.152537532 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.087849756 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.767180109 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.277206125 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.814106221 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.178452528 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.652081192 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.297021849 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.081137573 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.363533932 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.284692564 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.179258942 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.087524354 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.091744349 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.930190504 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.092150997 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.093990982 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.177058976 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.447827282 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.196372622 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.95133597 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.21491004 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.914283579 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.226616536 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.213771893 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.087443829 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.824291019 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.086043194 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.930711626 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.284751639 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.36773249 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.231975065 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.284411054 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.106717585 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.248423343 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.179441132 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.1434312 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.213698967 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.112879379 seconds)
done (took 226.715019764 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.358772382 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.3935502 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.342383343 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.27917065 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.350879202 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.345679629 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.062958064 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.423201325 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.107341738 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.405980274 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.28189448 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.142267585 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.385766827 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.202106055 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.33587483 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.234380536 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.106095403 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.252396679 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.448485401 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.343591061 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.032700262 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.236538367 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.208737126 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.410300838 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 5.973458579 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.019160194 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.347156085 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.121703542 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.256258367 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.011224491 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.016834057 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.256858391 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.350098747 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.188800815 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.449275263 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.999935697 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.353794083 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.092841263 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.361016086 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.358235116 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.3393702 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.795156841 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.01537745 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.038269827 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.156690994 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.339336221 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.057640938 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.300410817 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 5.978056448 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.998894735 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.251780706 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.129972091 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.126136312 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.320465169 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.191574957 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.119438095 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.471449742 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.483549879 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.347063198 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.296853775 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.359435327 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.411507205 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.406867606 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.19715452 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.017041887 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.272188814 seconds)
  done (took 119.243996933 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.418338594 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.313613815 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.392718825 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.435190492 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.582020695 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.447541913 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.476405317 seconds)
  done (took 13.039816116 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.047059114 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.037886854 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.241075248 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.239818801 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.043531465 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.167298913 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.12576877 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.00770751 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.285472467 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.081410527 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.352561042 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.257278536 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.956009318 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 1.999281796 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.12734073 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.378032846 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.026798957 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.109055451 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.099133486 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.295642915 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.00823365 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.009360928 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.230282015 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.125188969 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.046393252 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.079796898 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.036590633 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.012392598 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.078813361 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.018397693 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.046897524 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.15123255 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.03497882 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.024733444 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.062813223 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.352459762 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.044378534 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.085761688 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.173135303 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 5.978477791 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.026668169 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.043121732 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.179255258 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.048862605 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.022896624 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.227424127 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.024401616 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.047590409 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.019292474 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.034520238 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.227045625 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.038069499 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.060564733 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.95841191 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.246537503 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.998083814 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.112461612 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.035033677 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.033005421 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.09194616 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.034930947 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.298652642 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.280023284 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.018897742 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.25490082 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.322402108 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.037844761 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.018121037 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.01918998 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.259798257 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.035249266 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.255087884 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.040720744 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.085084468 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.086049607 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.166177895 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.227932425 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.823940727 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.800204001 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 1.964060827 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.008234905 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.022733194 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.327425221 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.96949626 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.959235882 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.023133371 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.086291689 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.737488807 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.943809059 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.03957828 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.34616741 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.023675233 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.094166033 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.08808122 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.067686737 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.100046654 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.286120167 seconds)
  done (took 133.263789357 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.376234647 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.617282775 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.253882918 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.277513707 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.422536895 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.537334559 seconds)
  done (took 15.459475738 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.341025215 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.841988783 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.061921828 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.058130291 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.092845638 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.034040072 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.032717278 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.203845976 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.180155654 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.04778021 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.032767922 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.054995371 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.034223519 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.176361476 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.03404632 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.041948249 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.032029247 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.059909838 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.041973723 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.102604787 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.194301737 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.0925921 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.101138843 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.932142407 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.083386733 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.044139576 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.002638707 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.043737865 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.049631872 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.373143714 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.23367233 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.032507549 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.873843978 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.361778334 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.799212899 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.92633967 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.17330831 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.05829467 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.093614901 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.031050106 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.052751502 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.103640989 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.059803847 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.054930216 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.379332911 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.85503192 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.106209917 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.292437709 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.033407727 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.053715918 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.056851711 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.059956944 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.030805487 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.061869223 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.486634368 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.464896889 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.008382995 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.038756267 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.093339838 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.927428386 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.117641363 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.035950959 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.370684642 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.976865326 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.000217337 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.06466847 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.937490857 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.165634692 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.107466146 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.061681464 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.060735146 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.061968181 seconds)
  done (took 108.258895959 seconds)
done (took 390.243399703 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.319884499 seconds)
  done (took 7.292591103 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.033509591 seconds)
  done (took 7.154994737 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 5.974285688 seconds)
  done (took 6.95729371 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 5.975924143 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.024717484 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 5.998564894 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 5.997268685 seconds)
  done (took 25.016508606 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.193909637 seconds)
  done (took 7.177687458 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 5.9738356 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 5.995846073 seconds)
  done (took 13.05620407 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.10644783 seconds)
  done (took 7.101961292 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.25288741 seconds)
  done (took 7.24104449 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 5.977033542 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.013757816 seconds)
  done (took 13.00201826 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 5.973525398 seconds)
  done (took 6.954427372 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.371831151 seconds)
  done (took 8.448269481 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 5.97850471 seconds)
  done (took 6.998164317 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.037707986 seconds)
  done (took 7.019362042 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.015074099 seconds)
  done (took 6.996536496 seconds)
done (took 131.392445235 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 5.97327026 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 5.983814267 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 5.983825831 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 5.983531897 seconds)
  done (took 24.897781745 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.318586498 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.318955865 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.296418875 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.370462888 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.263838709 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.26195415 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.318756552 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.319518405 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.262253693 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.468996681 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.320009715 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.470015368 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.371826365 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.296151307 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.295465922 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.468098585 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.424434554 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.3181184 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.26150075 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.29672718 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.470117775 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.469723067 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.751282209 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.730909115 seconds)
  done (took 34.127856916 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.202191429 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.35842024 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.159883642 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.410019641 seconds)
  done (took 6.10732301 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.023630171 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.36763591 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.351658153 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.409699343 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.351629016 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.164591747 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.351655017 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.203707448 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.171586208 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.175250594 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.617639598 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.147303235 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.158231171 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.410120048 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.165097957 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.994341685 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.992817244 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.173157834 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.369787756 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.196772575 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.24465604 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.351583726 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.351203463 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.351319819 seconds)
  done (took 31.070087962 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.752223061 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.924290551 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.353435311 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.903121071 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.768688904 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.784196358 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.274300608 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.496397896 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.259522596 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.236484687 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.721171945 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.313456635 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.138515712 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.881477992 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.819942338 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.169934736 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.169311293 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.830531571 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.604281457 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.293306756 seconds)
  done (took 36.670783407 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 5.97397337 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.982263593 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.228523906 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.159369998 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 5.97457579 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.984724731 seconds)
  done (took 27.279193506 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.038406077 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.148353116 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.313462983 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.290052857 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.159259072 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.136913953 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.643678701 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.230589166 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.796891725 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.793450705 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.629757111 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.458300579 seconds)
  done (took 20.623516076 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 5.974555793 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.022368278 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 5.98307594 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.163038809 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.801962574 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.852318581 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.310941784 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 5.975945454 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.080080197 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.186520803 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.299872718 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.159574963 seconds)
  done (took 38.80631545 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.248823399 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.218342803 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.328131347 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.749958049 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.540865653 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081332727 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.41295949 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.501695602 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.037822796 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.101459487 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.52909787 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.048379953 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.525788932 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.962386714 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.979692045 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.29785089 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.824548038 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.484154834 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.429254669 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.059731749 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.951729376 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.136012702 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.97713572 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.533588485 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.318237723 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.984234896 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.238783762 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.230902929 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.974448996 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.329011656 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.974267747 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.476512445 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.246051059 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.296828591 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513425904 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.068693817 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.094188333 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.081188334 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.580708891 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.282622592 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.128687872 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.147294442 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.514715198 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.213660285 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.243578006 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.765646586 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.99082425 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.642128582 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.974395495 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.100749544 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.886490191 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.221846691 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.314179471 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.725202989 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.129977589 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.293370758 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151980456 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.09550302 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.292850883 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.022618565 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.179168401 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.096999752 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.25639803 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.955766777 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.459810888 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.339175475 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.291311161 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319442146 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.298596555 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.302600292 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.349449167 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.109265792 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.775484429 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.127598562 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.527032519 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.444380089 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.340812017 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 5.977012991 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.730992213 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526675004 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.972801274 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.102795656 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.818730124 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.950414575 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.977477077 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.162275122 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.854948483 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.959061012 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.082333537 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.033004807 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.430839046 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.121227891 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.13551904 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.252488217 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.684625987 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.971550126 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.688294796 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.299830069 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.957435655 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.549803795 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.975998315 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.974356901 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.981011459 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.552878243 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.395361154 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.029576027 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.735098658 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.652484477 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.294631317 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.557605389 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153775478 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.977373314 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.362994338 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.314897252 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.975240084 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.711625513 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.085647369 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.105083916 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.350678595 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.976802255 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.96272046 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.4223004 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.24545743 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.97631359 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.224210228 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978867676 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.137349947 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.975659631 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.727726002 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.041137403 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.233489056 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.516314255 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.205948257 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.073264591 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.956477931 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.135892005 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.492454398 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.073000016 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.339338828 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.429691786 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.59106508 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.47058105 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.9848098 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.848457941 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.468498845 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.267751864 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.329225404 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.128989135 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.164413417 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.078606102 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.976843251 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.17816638 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.992791704 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.519543849 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.979328278 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.821746023 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.748936475 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.336701752 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.975873233 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.978518635 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.914159856 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.295230454 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.649631518 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.038098776 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155826619 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.276608058 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.218907529 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 5.976777565 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.964478391 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.362435431 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.287414888 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.516113125 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.381516308 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.638932586 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.335601668 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.46731598 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.231897757 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.369281352 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.757857385 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.234899122 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.335652109 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.390487441 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.01774786 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.981958651 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.035570492 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.421146282 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.21324122 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.768591231 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.914036604 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.597715207 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.035931124 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.988395855 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.962689922 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135920155 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.461280278 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.027376199 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.562051959 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.128668995 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.232823483 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.253159828 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.017228685 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.697013944 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.007373153 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.428578455 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.360319522 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.300896361 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969131237 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.829565788 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.490473048 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.483540952 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.124271855 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.208174416 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.949286922 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048718085 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980160567 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.336346868 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.871849911 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.765328429 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.277744421 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.797965423 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.688145994 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.215745142 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.978764274 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.000859409 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.920551853 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163040912 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.037429886 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.17187944 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.536045469 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.30254137 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.313909526 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.976471326 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.987988118 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.266759456 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297038339 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.263503183 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.490335882 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.605888654 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.681971868 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.092028124 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.657396974 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.158101067 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.026159193 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.539261652 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.287866743 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.977095764 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.234411252 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.791861908 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.125939814 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.065261756 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.280900759 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.975850367 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.472608674 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.613494922 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.980118573 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.960791604 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.139725042 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.981632965 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.259159005 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.881986625 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.226219987 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.729378831 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462835684 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.286699874 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.234283302 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.386633867 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.519886572 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.782429526 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.963737139 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149544437 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.093545208 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.291035741 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.976137574 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.295107835 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.69208486 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.655249782 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.786109559 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.535741392 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.205395599 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.1774415 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.467333963 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.242067281 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.300324549 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.956733828 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.609786979 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.974640184 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.129120158 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.958198774 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.040445233 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.31806892 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.367247196 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.469084174 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.063361923 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.543618802 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.381204907 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.052925606 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.155022472 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.289553299 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.976395983 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.363960921 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.975063168 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.046994771 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.408969349 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.986047206 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.51007861 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191576719 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.314461564 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.149156815 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.63681687 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.02566749 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121255637 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.460531586 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.180836544 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.123714768 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.324325276 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.797791981 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.0241638 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.985768916 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.51566227 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.577562314 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.465889691 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.598195812 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.583911675 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.378211503 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.729175704 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.978714334 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.236994686 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.147855261 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.734792102 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.186050552 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.385194781 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028146393 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.256548168 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.311083028 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.199287979 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.536541407 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969501078 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.592618902 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.23018708 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.506529381 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.541819547 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.761831196 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.454171458 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.158137707 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.518255351 seconds)
    (346/608) benchmarking "3d"...
    done (took 1.969677816 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.144523268 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.216080277 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.719951512 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.783216631 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.835655574 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.779650257 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.132981884 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.431224974 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.06239287 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.781934584 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154980718 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.220489582 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.230898131 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.120373459 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.956307824 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.623471668 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.769370075 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.263857094 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.15017548 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.232472407 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.096019213 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.287156172 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.547437467 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.298189741 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.72873784 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.463502577 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.270644498 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.957633759 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.979427067 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.696213343 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.742609618 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.084767174 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.299479965 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.451377673 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.039568384 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.021060496 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.982562471 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.473966733 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.78308701 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.716532396 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.332762954 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.525665405 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.595244744 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.746202344 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.734079939 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.232713103 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.339123852 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.396784305 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.896978298 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.36769812 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.29297299 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.141918644 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.959633707 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.238991268 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 5.990882744 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.077045315 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.941548035 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.317737276 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.067409787 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.853329444 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.628551001 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.115002521 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.030650333 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.045779553 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.215029353 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.192321875 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.976900773 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.621603674 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.416474567 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.157081328 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.973765543 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.751906812 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.958249571 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.235727611 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.104804583 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.197501348 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.827131827 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.071344567 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.663662546 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.531430589 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.182082218 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.20396149 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.957164608 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058688139 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.011864072 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.665210903 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.783702092 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.235022067 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.494230145 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.234014817 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.990080617 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.313752691 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.196504894 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.313590204 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.464430112 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.474453707 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.409951168 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.358552463 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.284917665 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.940584723 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143094776 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.22981891 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.959365397 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.999931081 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.001076463 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.368514008 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.363685865 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.975974438 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.533503308 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.236113233 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.133778739 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.166069024 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.097581155 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.515290464 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.197205418 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.124972701 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.15486024 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.262278561 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.351854456 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.981928063 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.242251345 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.024862988 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.983503861 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.237855418 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.236491064 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.359217003 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.304856186 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.586837808 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.14589857 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.682792941 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.956774509 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.521954251 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.981262016 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.088078181 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.377119258 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.978216952 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.476021795 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.646690064 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.238253352 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.262862472 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.116555771 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.307805885 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.202896644 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.487738392 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.996706141 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.644017685 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.405466255 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.977220163 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.482376289 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.060246219 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.154787221 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.771521724 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.48420852 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 5.977896909 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.044452851 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.202008329 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.554698884 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.347543806 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.166405931 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.047914945 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.821107602 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.006097388 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.986098064 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.134946061 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.531147043 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.002008786 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.577107915 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.141353032 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153185887 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.003644606 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.135969185 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.97874434 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.24296679 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.588771334 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.237344241 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.272583089 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.279637373 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.010304704 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.67234352 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.714675416 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.441718747 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.274535184 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.353162656 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404990072 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.08353672 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.304672573 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.588230206 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.232193407 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.191893211 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.423745587 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.253226133 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.032844355 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.252122497 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.986085589 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.32301093 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.286410822 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.566887981 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.252650093 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.176221984 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.329165709 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.004979075 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.552113284 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.469607498 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.907590693 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980956296 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30747398 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.983676299 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.065291894 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.645879287 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.181206671 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.119682233 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.950197806 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.587952725 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.306051456 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.130678832 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.986571718 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.206216212 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.500085563 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.961466202 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.777243233 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.852680406 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.30855013 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.321425826 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.965318959 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.241642771 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010136474 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.977003641 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.49266381 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.983956336 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.314001854 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959976056 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.529726743 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.974018566 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.105532284 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.151697265 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.36242815 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.984905648 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.984300353 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167479067 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 5.979255018 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 5.987445174 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.386018955 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.074370055 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.240327942 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.463925575 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.223568009 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.34140892 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.886367461 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.791796766 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.010551722 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.302351542 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.978825211 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.556144921 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.088885818 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.53456838 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.768755423 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.011448733 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.548639077 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.233098899 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.719665298 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.136796558 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.482124285 seconds)
  done (took 1881.624417405 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 5.984833998 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.08983841 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.053397496 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.062183047 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.066366135 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.060141449 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.035385931 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.021112296 seconds)
  done (took 49.357404348 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.980335284 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.964332032 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.422078293 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.171632739 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.014360698 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.188751483 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.154723627 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.479976116 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.192870505 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.016765502 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.049436911 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.040449969 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.005561864 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.026057185 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.879785161 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.084720564 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 5.982148046 seconds)
  done (took 88.659778161 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.029231677 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.815170203 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 5.98879898 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.200756072 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.066989904 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.595728422 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 5.996848676 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 5.987062691 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.460142282 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.636638342 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 5.987222621 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.131250929 seconds)
  done (took 76.922941418 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.025610548 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.023877664 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.022373427 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.027781223 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.030456166 seconds)
  done (took 6.120748285 seconds)
done (took 2323.282883311 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.215327709 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.551807001 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.586249854 seconds)
  done (took 4.114749885 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.058830845 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.123524943 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.195133298 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.138220144 seconds)
  done (took 5.51599618 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.302613033 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.483737176 seconds)
  done (took 3.761720665 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.422482493 seconds)
  (6/15) benchmarking "18129"...
  done (took 5.998313847 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.533085059 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.97649115 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.987677521 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.989197752 seconds)
  done (took 18.95101983 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.026048493 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.016289898 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.019398607 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.011925481 seconds)
  done (took 5.059861926 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 5.985366152 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.05483038 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.113834865 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.126209166 seconds)
  done (took 18.257004809 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.444920929 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.349578046 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.829141015 seconds)
  done (took 5.695031707 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.89494066 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.486340772 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.888632045 seconds)
  done (took 6.360107363 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.055494141 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.125594452 seconds)
  done (took 5.274223375 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.258226367 seconds)
  done (took 2.341708956 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.593145044 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.582359699 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.944992817 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.970897165 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.129215831 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.408586154 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.421802958 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.464192867 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.782739873 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.63437185 seconds)
  done (took 18.019414016 seconds)
done (took 104.496422468 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.089013812 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.520924827 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.259686 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.196777456 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.175380129 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.184497568 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.077441925 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.906263885 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.362762779 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.362972356 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.137195564 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.110192539 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.106832585 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.436229947 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.110068105 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.403341905 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.166448607 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.01283778 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.591995436 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.991023474 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.086319331 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.655607319 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.839850946 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.668227395 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.182937168 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.170133624 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.171494577 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.413090177 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.855881679 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.176426818 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.187322974 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.249257828 seconds)
  done (took 150.937586144 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.002922184 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.017645885 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.022460373 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.007126908 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.01662151 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.019165151 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.008062365 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.00730724 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.793611017 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.830564232 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.021261307 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.004213613 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.001083463 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.989093479 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.000976302 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.988278222 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.002266184 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.005736295 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.998283598 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.999558598 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.998750621 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.880474715 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.998674139 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.894385505 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.005969432 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.002944841 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.989900122 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.998209144 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.997422945 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.997226097 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.002512609 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.988505626 seconds)
  done (took 184.510312474 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.97837758 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.995475911 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.006381736 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.989137563 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.997266343 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.996298358 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.989727654 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.995695827 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.994472909 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.996839066 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.995627821 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.996322312 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.003774639 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.989820214 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.996229622 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.99008933 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.995769683 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.998501694 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.995701078 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.997063094 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.998033644 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.988868416 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.002262731 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.994592827 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.996013469 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.995718819 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.988932821 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.999243651 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.996246037 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.995602599 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.998169802 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.988997995 seconds)
  done (took 192.847966842 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.297389915 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.033702913 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.044456721 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.780696005 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.039603525 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.025579574 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.769239496 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.301102081 seconds)
  done (took 15.293112174 seconds)
done (took 544.674226532 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.684622287 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.931526256 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.181497633 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.254109703 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.641697826 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.303211118 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.251741481 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.474468708 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.841369239 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.477142721 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.494690267 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.223694349 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.831450873 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.264495346 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.200445822 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.465381498 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.417005365 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.711133415 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.207806802 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.883972381 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.220729902 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.967743641 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.485390208 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.885141221 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.492673407 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.002053801 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.190842303 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.423320348 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.254437481 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.218273586 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.055298273 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.459022345 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.258782525 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.245490137 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.469604395 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.494420613 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.419269983 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.442316488 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.180286196 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.748207669 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.904810886 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.690043327 seconds)
  done (took 71.228005203 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.014940957 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.045681712 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.20116764 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.090666311 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.649805251 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.097418694 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.274032673 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.242537973 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.133100105 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.248280858 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.299433567 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.688181074 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.293191073 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.64993842 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.280013811 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.291786725 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.097684685 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.632616443 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.281877501 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.249492689 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.063281886 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.20859139 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.059093852 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.236482175 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.056549437 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.090988923 seconds)
  done (took 33.484348877 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.069209756 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.171036633 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.297662116 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.4096185 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.252851181 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.162786499 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.367796533 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.186261311 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.985453552 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.360495858 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.109056159 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.131801408 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.193175837 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.325064913 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.615730932 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.193707998 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.18273787 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.186244257 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.177089121 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.253109092 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.195188498 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.105896374 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.360496429 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.170601134 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.710734623 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.398112092 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.429298714 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.663301544 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.598196813 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.1728739 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.171033291 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.352307895 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.399880974 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.303724239 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.188404303 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.052809433 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.049143395 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.105828918 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.927298765 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.217013479 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.355388787 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.241613755 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.451721301 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.619224875 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.315236165 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.138090627 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.518431009 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.121197574 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.164888374 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.882325164 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.352135757 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.100038828 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.195653952 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.241768368 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.161581774 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.611950961 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.230013645 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.347858651 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.238074995 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.755898828 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.108066276 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.420149137 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.183536923 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.315900603 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.188847346 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.255622476 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.203601796 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.464039545 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.45130861 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.551697041 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.64334357 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.125869484 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.070459031 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.102611184 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.177689057 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.555246057 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.529476874 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.283685928 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.41880637 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.357108971 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.588255048 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.526721852 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.068247349 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.758738107 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.093194644 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.034496217 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.11435689 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.361666724 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.349464695 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.537141009 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.62856154 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.373243099 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.474279288 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.479942358 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.494966595 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.497463437 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.031245091 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.04602322 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.283294952 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.64202984 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.126529812 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.266059371 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.747287752 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.449614184 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.376866199 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.336510793 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.455311846 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.132054772 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.47469756 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.018736065 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.226990143 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.320133775 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.331121453 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.815021994 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.045445783 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.599040311 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.127390817 seconds)
  done (took 217.875536715 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 5.978907367 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.000208915 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 5.991183923 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 5.998651432 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 5.99236302 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.629324792 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.065262616 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 5.990204068 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.629700012 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.070521758 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 5.988367951 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 5.991606713 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 5.989752747 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 5.991254425 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.629641992 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.611124479 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.828303021 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 5.991282819 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 5.990232344 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 5.989666257 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.831212329 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 5.991396303 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 5.990058341 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 5.99079608 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 5.989660853 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 5.99134343 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.000188293 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.028234159 seconds)
  done (took 149.146729734 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.044525933 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.52081791 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.092384637 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.140500376 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.091507929 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.061076644 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.635155874 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.193993705 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.130459713 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.062039858 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.057858349 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.279817908 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.311444201 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.726752374 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.181933163 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.248074362 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.7649536 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.195632024 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.058553274 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.057837923 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.21276886 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.426350629 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.351889664 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.392529058 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.219481884 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.376837327 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.161717554 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.057165317 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.182228588 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.564504311 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.073600649 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.45333633 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.208048799 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.061742506 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.57430619 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.468408043 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.717059415 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.688044345 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.261955022 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.026396756 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.015035761 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.305401105 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.396653078 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.111626572 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.051814345 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.711690626 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.079016579 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.488135366 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.094770435 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.014714162 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.152871481 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.166139271 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.33651168 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.86700363 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.247643886 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.203278906 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.624265893 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.035932438 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.051781591 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.423531524 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.032659728 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.56590465 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.542246065 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.11670393 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.071335355 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.94886928 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.147227765 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.65610859 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.753954538 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.106261632 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.465974773 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.251423227 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.031869923 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.334028796 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.231872451 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.532413003 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.708129878 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.195931789 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.156970376 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.141018903 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.377468585 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.045753382 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.615107605 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.169351345 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.029031037 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.57174656 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.503762392 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.028121848 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.043249191 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.170297797 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.227104313 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.26173303 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.381063524 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.125791586 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.021300263 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.314468865 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.377431017 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.070885194 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.190129703 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.046846722 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.182534383 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.253767602 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.03392132 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.475650069 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.447860704 seconds)
  done (took 147.659411581 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.802110332 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.10549105 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.239308524 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.726996183 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.424877496 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.11616765 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.32184749 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.123251259 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.339866598 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.273079257 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.286424303 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.135000041 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.011312383 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.77561138 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.115403944 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.292562546 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.121785282 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.661533937 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.366407861 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.086345995 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.460361 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.782848707 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.401319521 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.482478738 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.428796239 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.573044735 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.777521193 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.195437187 seconds)
  done (took 47.423555304 seconds)
done (took 667.801551474 seconds)
SAVING RESULT...
DONE!
