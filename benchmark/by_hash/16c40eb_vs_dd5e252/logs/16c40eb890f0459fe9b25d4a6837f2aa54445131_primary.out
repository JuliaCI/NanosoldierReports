cset: moving following pidspec: 2459082
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.218198316 seconds)
loading group "string"... done (took 0.273027256 seconds)
loading group "linalg"... done (took 4.164860122 seconds)
loading group "parallel"... done (took 0.024844193 seconds)
loading group "find"... done (took 1.417880235 seconds)
loading group "tuple"... done (took 1.015040519 seconds)
loading group "dates"... done (took 0.246291632 seconds)
loading group "micro"... done (took 0.057529215 seconds)
loading group "io"... done (took 1.374420864 seconds)
loading group "frontend"... done (took 0.011952087 seconds)
loading group "scalar"... done (took 4.942135466 seconds)
loading group "sparse"... done (took 3.550567059 seconds)
loading group "alloc"... done (took 0.015015376 seconds)
loading group "broadcast"... done (took 0.370534496 seconds)
loading group "union"... done (took 3.593997339 seconds)
loading group "simd"... done (took 2.8719636 seconds)
loading group "random"... done (took 3.222850297 seconds)
loading group "inference"... done (took 0.319543169 seconds)
loading group "problem"... done (took 1.133536519 seconds)
loading group "array"... done (took 4.987177164 seconds)
loading group "misc"... done (took 0.887601416 seconds)
loading group "sort"... done (took 0.371569802 seconds)
loading group "collection"... done (took 6.649491524 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.490209329 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.078702396 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.249138468 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.065720101 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.290322828 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.079557851 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.081920387 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.068942524 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.923046152 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144788603 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.208605319 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.38637545 seconds)
done (took 4.865602228 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.203376182 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.024851715 seconds)
    (2/2) benchmarking "String"...
    done (took 0.122889801 seconds)
  done (took 0.840357361 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.138918814 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.02254347 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022334261 seconds)
  done (took 0.873924218 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.022011577 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.086703898 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.023356242 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.023880493 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.023981571 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.023298797 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.023053168 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.02311862 seconds)
  done (took 0.920778503 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.033195468 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.021030846 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021971753 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021308976 seconds)
  done (took 0.789067909 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021669739 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.080012211 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.021221843 seconds)
    (4/4) benchmarking "different"...
    done (took 0.021588239 seconds)
  done (took 0.834536668 seconds)
done (took 5.210236006 seconds)
(3/22) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.165936834 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.875643596 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.980386232 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.180612055 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.313693311 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.330650104 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.074412563 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.219270355 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.134810415 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.028421047 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.162295001 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.033885767 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.081976892 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.596950268 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.024734871 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.132627484 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.654090755 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.041933722 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.088923247 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.320483933 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.022826792 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.03931884 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.041526901 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022828268 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.209917281 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.12123816 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.708957752 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.024196689 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.022311122 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048339987 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.024003472 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.027542646 seconds)
  done (took 9.485506719 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.1379396 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.129707858 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023471094 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.073956387 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049376086 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025417134 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029697871 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023259703 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.039046694 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.072936461 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.039413877 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.139969656 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.022419844 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.021819117 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.135090304 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.145621969 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.036444929 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.038558 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022830185 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.039031902 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.057847934 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.032959418 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.027466981 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.02675336 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.084049123 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.122183557 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.056033982 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.053663559 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.021934364 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.02589572 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.069421366 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.073492938 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.02355653 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021283434 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.067929448 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.050264917 seconds)
  done (took 2.780213987 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.881051005 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.107792763 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.129089441 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.171612972 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.058737435 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.06859239 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.141348158 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067920295 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.047306811 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023794167 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.197752947 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.749152285 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.15632642 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.135259881 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.025407349 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.267810764 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.203935966 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.120490994 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.021520551 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021606953 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.119610437 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024732335 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.152733398 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022512754 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.106601847 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.132953879 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.027246978 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024288069 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.14013764 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.132496312 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021846714 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.093386275 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.043496514 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024990189 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153956956 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.023089908 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.02115088 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.045045444 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.033844055 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022352362 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022182299 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026082542 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021490063 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.055952255 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.025694814 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.486951923 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024895924 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.651514568 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.556518081 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.021487872 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.022117639 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.054368149 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.021872737 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023413815 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.554792784 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.027474026 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.024475103 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.257340772 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023849923 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023136653 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023497991 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.04825669 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023251486 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024811316 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022794883 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.052057583 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.754756633 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.026396698 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.052029734 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021983598 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022915638 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.022859883 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.387859633 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022004178 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118647301 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.022164678 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0254972 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023014081 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02228829 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.042109163 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.043957256 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.05185448 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026052553 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023305207 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.023026747 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.625396539 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.133689812 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022569821 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023224867 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.131359337 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021550714 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02256016 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024395884 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.042502053 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024522586 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.021371995 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057335988 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023123218 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.120775746 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.192719825 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.0235929 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.021536353 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.600781009 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.02693463 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057617802 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071405202 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022429578 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.022471288 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022679991 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.021601393 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.022003228 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.021210027 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023355076 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.0225847 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021721058 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.022364898 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.021806566 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023398872 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0231684 seconds)
  done (took 21.413825718 seconds)
done (took 36.255674387 seconds)
(4/22) benchmarking "parallel"...
done (took 0.827346812 seconds)
(5/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.156183903 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.068992738 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.021099858 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.102678218 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.022500923 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102091812 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.1060531 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.098905215 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.022795785 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.023000747 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.022742744 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.05377932 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.143424702 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.022744824 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100209375 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.145577835 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.022534792 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020944715 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.030562708 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.022587671 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022865226 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022647627 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.022482833 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.022892617 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099699737 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.022302507 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020606675 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.048201054 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.022710114 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09997845 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.022483917 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.022557729 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.022391033 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100212444 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.022576551 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.100039683 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.022688093 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.022352972 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.022566836 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.022578795 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.022531837 seconds)
  done (took 2.90776271 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.04105726 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040025872 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.061176484 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.019323249 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029565331 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040202696 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01953621 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039918896 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.063693322 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040285676 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040229475 seconds)
  done (took 1.213651561 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039669969 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040462938 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.055801279 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.019356056 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030195164 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.03986359 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.019471762 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.03997054 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.063114132 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040777866 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040419764 seconds)
  done (took 1.193302258 seconds)
done (took 6.070904801 seconds)
(6/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.151258556 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.122150869 seconds)
  done (took 1.030002278 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.406976468 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.207193924 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.127232964 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.222837231 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.120473074 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.150171681 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.557591523 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.146639626 seconds)
  done (took 3.745020608 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.055680877 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.143114379 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023189941 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022274195 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022384178 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022246363 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023219537 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022537754 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021951014 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.023784645 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023810904 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021991012 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022612905 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.02342474 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.021934165 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022201412 seconds)
  done (took 1.356552603 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.032637517 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024014763 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.024630374 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.02215005 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.024811573 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.023321079 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.02429897 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.025699204 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.024094642 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.024360034 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022972674 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.025111667 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.02468235 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.023411513 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.025333939 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.022216545 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025237066 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.025038334 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.026474879 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.024562607 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.023620905 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022986452 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.02495199 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023886796 seconds)
  done (took 1.37366015 seconds)
done (took 8.271170987 seconds)
(7/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.142081398 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.021314074 seconds)
  done (took 0.930256931 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.129375624 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.121905535 seconds)
  done (took 1.023145802 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.03156157 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.02186821 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033098996 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024960061 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.022428782 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.02211736 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030753218 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.022510806 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.022189188 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.022369518 seconds)
  done (took 1.031517946 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.023028546 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023381045 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022953822 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021165288 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023178543 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.025034941 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.026232681 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.022697849 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026763186 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.021630696 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.021946067 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.031060488 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.021145986 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.031063775 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.026044845 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022370882 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.02328513 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021521792 seconds)
  done (took 1.209146601 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020965648 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.021827685 seconds)
  done (took 0.817535361 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020348745 seconds)
    (2/7) benchmarking "second"...
    done (took 0.020198535 seconds)
    (3/7) benchmarking "month"...
    done (took 0.020425866 seconds)
    (4/7) benchmarking "year"...
    done (took 0.020394789 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020035387 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.021412111 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.020201499 seconds)
  done (took 0.915884506 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.388556514 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.089397937 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.317064113 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.026399406 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.021875098 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.228496742 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020493983 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.020922735 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.020861552 seconds)
  done (took 1.906826588 seconds)
done (took 8.608441385 seconds)
(8/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040291386 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141880097 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.14082025 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.536827724 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.044007433 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023421025 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.07640913 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.2338909 seconds)
done (took 2.02398541 seconds)
(9/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.183657237 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.494316706 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.172518969 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.022151903 seconds)
  done (took 2.478855621 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.297512422 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.140806195 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.032089697 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.025651364 seconds)
  done (took 1.299796716 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024005681 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026180633 seconds)
  done (took 0.847689326 seconds)
done (took 5.607095027 seconds)
(10/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.110775823 seconds)
done (took 0.904728164 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.18458667 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.139767168 seconds)
  done (took 1.111815678 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.125491764 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.126282421 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.162908271 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.022928935 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.165047316 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.124822744 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.11372249 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.023145462 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.022624234 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.023513397 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02275975 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.023330238 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.023361175 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.022723112 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.065547029 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.023138836 seconds)
  done (took 1.889306822 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.075165061 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.337837905 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.074483593 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023079631 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.064650013 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.022975747 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02355413 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.022739488 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.022976843 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022811374 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069170876 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.093064134 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.023089916 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.023139445 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023633572 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.022873666 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.022877607 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.023632328 seconds)
  done (took 1.794682139 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.070163651 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.023076401 seconds)
  done (took 0.893187032 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.123608089 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.058627987 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102534191 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.275167073 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.054029925 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.237341301 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.066721897 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.063015878 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.055545506 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.059773621 seconds)
  done (took 1.886968482 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.052809734 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.047573356 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.226895594 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.052252063 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.031647651 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.02547332 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.032725583 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.026725496 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.034798937 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029596503 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.072791723 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.029342925 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.031179712 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.06904634 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.024152131 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.05965742 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.025323222 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.024232634 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.033092867 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.024879161 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.02330616 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.023500035 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.141709454 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.023717449 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.024735391 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.023177485 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.023098818 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.027430514 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.026904818 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.023256633 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.023292318 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.025028729 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.023445724 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.034326344 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.02336921 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.022874231 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.023213295 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.02339628 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.023198356 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.023522184 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.023046421 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.023299703 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.023329236 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.023080799 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.028855017 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.02589389 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.023427323 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024797773 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.028734211 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.023056072 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.023585785 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.023299887 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.023230235 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.02320711 seconds)
  done (took 2.714169164 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.080029728 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.068104314 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024670959 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.075730652 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072591849 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02414477 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.086896434 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067256524 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.083083001 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024003875 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023468031 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.022150902 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.023557906 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.025425166 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077151579 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07020787 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024806607 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023869978 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.069813974 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.070576583 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022379974 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070185565 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.079901792 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.065761688 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022321656 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024246293 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022157557 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.022200361 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.021592782 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.023011721 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022154622 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.022945366 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.026842405 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.022356084 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022139715 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022090078 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021988062 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.022884087 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.023328342 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.023031872 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.021998546 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022130404 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.021972692 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.02202081 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02376856 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022144893 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.021678357 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.022615972 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.021736258 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022274844 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.022194771 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.02197919 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.022753069 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.022473437 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.022593409 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.023039823 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.02258453 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022101025 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022089414 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023941035 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.023545494 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.024193162 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022860123 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023987835 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.022224183 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022226847 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023121793 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.027848511 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022326368 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02222681 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022225915 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02208128 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.021991685 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.021866439 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.022110586 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.022171432 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.022117322 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02239892 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.024160106 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022523962 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022077647 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.022264487 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022250746 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022057476 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022091191 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022031693 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.021609097 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.022869087 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.022301238 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022460836 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022221603 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022344257 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.021974249 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.021901926 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.02271579 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.02278683 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.022257229 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022126768 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.022044291 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.021841685 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022261212 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.022077926 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.022536872 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022102144 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021978028 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.022372072 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.021737665 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.024658151 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022517341 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022096985 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.022685707 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.025341047 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022323947 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.021697059 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.024289436 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.022502849 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022305934 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.02544207 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022484742 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.022622945 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022266474 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.022023299 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022388836 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.021927283 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022168781 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022097705 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.022289112 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.021855983 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022582226 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.022469345 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.022409721 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022177541 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.022122784 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.025278917 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02263874 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.02242474 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.022514125 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.022345812 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.021965473 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.022701858 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.022318989 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022416065 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021880504 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024399292 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023715498 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022492094 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.022458242 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02204557 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.023868363 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02258897 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.024673062 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.021749032 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021952243 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022784394 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.023931046 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.022112733 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.024861921 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022087806 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022117882 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022080838 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022050997 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.021602796 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.022016472 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022103918 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022391157 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.022051518 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.02207364 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.022134931 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.021856031 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.02205167 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.022370249 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.022194548 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022352936 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.025044698 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.023498115 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.021891367 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.021880403 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.022486961 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02199923 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.021828763 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.02211399 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022120786 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.027771988 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022370761 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.025092581 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.022120165 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.021773028 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.022021854 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.02288353 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.024024712 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.024176761 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.025701439 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022204154 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022365049 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.021813509 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022219103 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022010687 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.02137118 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022138282 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.022037172 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.025571843 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022345657 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.022420522 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022113151 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.02209809 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02246024 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022283217 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.026039696 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02219312 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022081595 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.021388963 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02213363 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.022061962 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.024292585 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.022344531 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022114984 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022189348 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.021713267 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.022179595 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022129749 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021936473 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021978803 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.021627586 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.021498146 seconds)
  done (took 6.605568575 seconds)
done (took 17.691550677 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.076166214 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.053927883 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.060993943 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.028612593 seconds)
done (took 1.037557067 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.140126363 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.074565029 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.129190724 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.083138028 seconds)
  done (took 1.230018498 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.066343863 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.020486642 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.152096838 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.160480005 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.020361778 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.142568808 seconds)
  done (took 1.375003341 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.233782418 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.156042402 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.161490309 seconds)
  done (took 1.366898362 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.171690731 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.285051605 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.291392755 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.149626577 seconds)
  done (took 1.721754679 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.148818555 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.192256686 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.033599261 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.16975689 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.037425106 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.022420857 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.082971522 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022532555 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.044359141 seconds)
  done (took 1.628203942 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.07626942 seconds)
done (took 8.209221095 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.203133622 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.127502296 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.143123425 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028253869 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.11308359 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.033906127 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.122544904 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.125983619 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.031641911 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.043158544 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030360117 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.104371034 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.280360558 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.164203984 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.04653343 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.042219068 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.142401199 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.032520553 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.053090574 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.220600411 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.029727485 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029662837 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025627928 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.127491616 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.114379406 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.031922359 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.226189509 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027335013 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.299167784 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.028359343 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.095701846 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.104660547 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.168754162 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.28301612 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.287216713 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029502952 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.110580207 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.045215327 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.110266979 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.113423919 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.031831759 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.123644397 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.038223973 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.045510678 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020930498 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.230379343 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033966195 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.048979563 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.104433624 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.30457045 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.176977813 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026662229 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.138395073 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.14425192 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025143803 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021424508 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.028863402 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031020116 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025425507 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.040632544 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027162755 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039617571 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.02724551 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.118027957 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.02372291 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.085419555 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.12640295 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.03927568 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.03818122 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.164464586 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.099817292 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.024947592 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03845868 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029668435 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.128218587 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.040230813 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025948688 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.141591011 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.032564499 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030417883 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.021202263 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.123237552 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.034534737 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021799384 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.036481359 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030243606 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028846584 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.086675217 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.136323929 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.189686111 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.032197609 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.127148174 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.091877994 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.02607015 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.042535363 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.045794146 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.030699363 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028939417 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025586407 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020891031 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.033176785 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.169561098 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.021422663 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.045783179 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026639665 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049281141 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.031414253 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032714116 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.040812473 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021114764 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.030388872 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036749826 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.180582639 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151558757 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.077788226 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021906894 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.141728204 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022138291 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.04319766 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.022292423 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.021733965 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.166365682 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.021312364 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.021710429 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030175337 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029213353 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.02201076 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.177343395 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.094041062 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027162095 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.0264725 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021159488 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.033997336 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.025910034 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.022886735 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.021197137 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.021189445 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.107863578 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.02914458 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.026282404 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032628497 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.021307989 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.031456334 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.030919039 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.137726799 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.031053636 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.106187459 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.029963192 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.031854821 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03364699 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.041874481 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.077591961 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.024030056 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.025311913 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026871163 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.120777727 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027092951 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.12097806 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022904389 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044914886 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.13158274 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.097491853 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.034272856 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.137019188 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021629069 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.028666723 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021544763 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.124275019 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.055391236 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026856051 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028981841 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.026029921 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028181646 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.127165955 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029535944 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025753239 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.132763061 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.020651206 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.113827749 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.091188256 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.108423696 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024356651 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029226689 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.085596652 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041777575 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.047134146 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.045949422 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.02123761 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.033700599 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021709389 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.021186352 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.028844596 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037306515 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.026226609 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.020419646 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.021845992 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031606813 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.03145219 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030251663 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026424305 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.032958141 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.222750519 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.025611217 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.025191579 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024252121 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.033767615 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.236642375 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.03081196 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.083755118 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.03768845 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033685219 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028847064 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.02174822 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.032595579 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.094219436 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021924424 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.035743575 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.104070226 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.021118897 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.09814464 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.022166604 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021921679 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.038600414 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032955235 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.033360726 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026100303 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021973887 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029254349 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.03359699 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.022061657 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.036917709 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030723855 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.03084382 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027420337 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.021183478 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.049153515 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.094733229 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021827374 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.16507974 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.094219996 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.089579687 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020904451 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037663628 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.03303446 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.02151039 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.11896008 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.021813669 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.089628861 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.1037662 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.033718637 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.033362906 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.035725003 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021770257 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.08991949 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.03782123 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.032008591 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025315037 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.087545881 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033176872 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.10897041 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.087546265 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026532119 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.33989236 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.04022944 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030712985 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.021388043 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026507484 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038540369 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029569542 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.021521852 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.033915166 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.092856167 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025420107 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.021111685 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.021522584 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022488999 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.020433668 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042103536 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020834389 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029133109 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027554563 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.026400698 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.035869226 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038754583 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023663324 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.029068753 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022046946 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020799037 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.02892217 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.034336259 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.10126647 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.1093192 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.02607916 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.035243189 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032016969 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030033253 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.089572823 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.023692062 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.142091614 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020627756 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029711283 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.041008184 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.021197443 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.032393174 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.021060211 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02565673 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036035816 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023589425 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.02168285 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029104577 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.021709808 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020909455 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.021403865 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021824002 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028728568 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022584965 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.021058249 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.02092215 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.025171636 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025504708 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.02766149 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.03163183 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.025241552 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.02091539 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.034973216 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.434823641 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.021420232 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022193306 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.035713789 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.026065951 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025716898 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.021957386 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022251467 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.021009806 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039974108 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022141282 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.028602899 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021567897 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031811252 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020875679 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.051732604 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.020967301 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031736585 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020801237 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.029779808 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.031864063 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.029903081 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.025935211 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029467403 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037208582 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.104735494 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.031843107 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.037037753 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.035531219 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.031424925 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.02051271 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.021035691 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.23787425 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.084932038 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.038794177 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.036265172 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021055952 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.028817702 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.021383271 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021643802 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.020674715 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044245659 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.021417722 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.029411735 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020883578 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.020370043 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.021375454 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.097818622 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027781633 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020939377 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.023832067 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.032302894 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.025389789 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.033252085 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.021400653 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.051031038 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021034733 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.02114453 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.034018384 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.072164349 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.033189383 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034978137 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030433473 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.063490461 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031555339 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.024446979 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.094130652 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.020525076 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.02164027 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.030295208 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.034781687 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.021028462 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033013439 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.034600048 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033534242 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.115060113 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.045286579 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.023156674 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.02139444 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026755957 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032282347 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029169464 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.093675756 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035262135 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.026312451 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026008272 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023087507 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.034162917 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.026948214 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.020513045 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020923249 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042602067 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.044169082 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.022305509 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023573027 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.02821231 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.021200519 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020783068 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.274243937 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.023924245 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029036334 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.265437042 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021851056 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025474753 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028340786 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.020566619 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.439720919 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.021344054 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.028620562 seconds)
  done (took 25.326677106 seconds)
done (took 26.156232707 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.091448129 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.029998133 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.093249083 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.053342319 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.138113236 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032950643 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.038884114 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.167538952 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.159436941 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.160586753 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.138534394 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.046995831 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.049160983 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.230167924 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.029033024 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.024992627 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.209757606 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.152530608 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.194600418 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.069120441 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.047996373 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.10029049 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.195622628 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.049545009 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.180735912 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.109548696 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.053920642 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.092655875 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.024973549 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.162527859 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.031323004 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.026668408 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.035552172 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.161721211 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.039020341 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.031476101 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.078794251 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.030666428 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.047631481 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.172938041 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.042681501 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.052282724 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.033393174 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.185048506 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.059895437 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.069204448 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.048988787 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.07632443 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.074023897 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.034289697 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.043540333 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.062005604 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.029453561 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.073010811 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.079387184 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.07823204 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.066813441 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.07941435 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.027928418 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.059829509 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 0.020371441 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.058939008 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.03063075 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.045805885 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.146973354 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.066734001 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.073061426 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.073054365 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.028282979 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.053448329 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.067083354 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.054587532 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.059770414 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.024259862 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.079165312 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.07174445 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.073159436 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.02692405 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.072050667 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.074624185 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.042812805 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.029008704 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.059949242 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.074499058 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.020409155 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.021917357 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.027134645 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.021436633 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.059866634 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.024228668 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.02099656 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.067101175 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.072181643 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.024297799 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030855632 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.063707718 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.024498031 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.17622079 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.08155066 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.030352332 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.047290005 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.049075301 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.051623885 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.065879214 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.067156787 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.048710741 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.03129585 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.028382865 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.038107265 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.021825511 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028587219 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.053687628 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.051435226 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.065926246 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 0.021439257 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.02423278 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.028066847 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.021212132 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.026460111 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.021575728 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.020413695 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.020466754 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.031068355 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.03070993 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.069598913 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.052116762 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.141163193 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.03034494 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.038638954 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.020400735 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.029607305 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.066448585 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.051241384 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.024901784 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.031841788 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.048289442 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 0.021221446 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.064910374 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 0.021207563 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.043085845 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.021309743 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.024030224 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.06857471 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.028662911 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.02706242 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.052058021 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.052003577 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030865667 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.024575363 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.021116124 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.025824141 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.047549167 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.024658553 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.055567197 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.04829135 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.057732507 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 0.024392107 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.030844645 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.020516629 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.024204801 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.050971552 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.066726577 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.06489234 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 0.026893004 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.057078504 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.024065447 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.021212539 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.027183707 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031018414 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.037402231 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.033348805 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.026014796 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.045700945 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.055792793 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.073992823 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.031684805 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.030678299 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.030022529 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.038495727 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.020469581 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.054617254 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.054769986 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.032997225 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.028696567 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.055905499 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.053113627 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.026213299 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.028457427 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.05830148 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.021234413 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 0.029743103 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.02542487 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.02837532 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.039159671 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.024258776 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.020908332 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.021275851 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.024285343 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.080195005 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.021680969 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.023982152 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.024049818 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 0.021265193 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.020872116 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.027513593 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.02101981 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 0.021048948 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.032039439 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.0617585 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.028766861 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.025226747 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.02423386 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.024789849 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.055216594 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.07113662 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 0.024508308 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 0.023931598 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.024013322 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.033432171 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.024741342 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.028664171 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.021236953 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.021273933 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.024958028 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.067436115 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 0.02031393 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.020372967 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.031799667 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 0.021769051 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.024115076 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.021857884 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 0.028718426 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.059648226 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.021104023 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.027885372 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.02989997 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.021309057 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.024327468 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.020164852 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.024240796 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.023973789 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.030683268 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.028286198 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030784792 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 0.024384685 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.023996196 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.021364059 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.051899691 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.04682093 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.02403138 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.02968123 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 0.021167701 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.026126949 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.063768759 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.034683196 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.054091486 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 0.021275545 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.051054828 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.020945076 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.020280171 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.021116457 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.023993498 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 0.021167018 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.063935611 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.043726234 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.020307083 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 0.029421372 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.030643472 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.023777742 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 0.024636963 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.054450043 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.023839949 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.048259514 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 0.021008864 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.074240693 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.034914834 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.027360146 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 0.02636489 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020646871 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.030137285 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.026449246 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.021274052 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.021199017 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.020924065 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.029337459 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 0.02410355 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.037082445 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.021309453 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.020708503 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 0.033087634 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 0.020788875 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.025439396 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.06133179 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.021248296 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.052827126 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.021097081 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 0.024623934 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.02098685 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.024343925 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.031570948 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 0.033205031 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.020980411 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.024032721 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 0.053025555 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.0668478 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.02740974 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.020540536 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.023789626 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.031532858 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 0.025205553 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.025893533 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.023855 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.023908883 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.020278616 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.036807133 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.031416371 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.021114573 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.024090426 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 0.020227556 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.025374279 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.047945047 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.029855974 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.026989052 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.038190388 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.020519971 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.068574053 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.021697742 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.02486649 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.0215893 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.047088676 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.023996487 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.024205698 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 0.023960326 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03071846 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.02452683 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.020485331 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.026369596 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.021354487 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.079964402 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.021379274 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.044137767 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 0.02087144 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.020402696 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.028961885 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.020261889 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.0278888 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.142358099 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 0.026052273 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.024218027 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.021375315 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.02138365 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.02389426 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 0.024649177 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.028713282 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.026149743 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.038637168 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.021254994 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.023993549 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 0.02403616 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.019753776 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.024774172 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.030706769 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.024309812 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.024064184 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.021802682 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.021669758 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 0.021693289 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.061684112 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.026389334 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 0.127961778 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.024658968 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 0.022267414 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 0.020831773 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 0.026519384 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.02465605 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.061746966 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.026372033 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.026086629 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.02530229 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 0.021209343 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.025084007 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.142855104 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 0.021410674 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.021632235 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.021474194 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.020582461 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 0.021668978 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.020530911 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 0.025924109 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.020708809 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.021203419 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.029860965 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.059831433 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.020626096 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.02035184 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.021975867 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.048447059 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.028820661 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 0.020985194 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.046877619 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031533239 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.025077935 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03117745 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030898633 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 0.02034492 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.020655601 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.021190561 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 0.022006593 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.020649202 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 0.020465468 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 0.021603929 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.024536946 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.029397218 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 0.032954517 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.02409683 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.020747791 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.028954306 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.028868476 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.021600699 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.029839325 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.020989845 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 0.020418561 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.021915472 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.023956047 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.026069475 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 0.020951328 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 0.029922918 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.024459532 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.028739568 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 0.024249764 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.027617086 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.032347943 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.025035896 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.02050111 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.025819216 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.024089025 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.024040059 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.021524742 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.023950169 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.028177533 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.020297031 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.020422856 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.024489263 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.032017631 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.028797478 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.028671204 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.020753777 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 0.02017668 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.021664791 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.024101644 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.029623859 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.026651789 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.021655846 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.025913364 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.025956494 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 0.024072403 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.026243747 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.066548288 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.020498843 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 0.021397374 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 0.021105499 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.026152315 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.048475944 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.026013577 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.020519648 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.028101434 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.027984423 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.024179375 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.037914562 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.024169565 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.067028621 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.024474931 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.029623717 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.021255596 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.02065741 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.02134026 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.024067975 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 0.030114216 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.029773048 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030840769 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.0253813 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.025442034 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 0.025155723 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.021134464 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 0.02194526 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 0.021151921 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.020487712 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.020517711 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.026203411 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 0.021164227 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 0.020635622 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.021142402 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.021305602 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.024715477 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.024731977 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.030444481 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.030828173 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 0.024517964 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.020628373 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.020353192 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.022198166 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.019736247 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.021780436 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.021955139 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.026524291 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 0.02080318 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.020488954 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.02062728 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 0.026113181 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.028165642 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.029583529 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.021477727 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.021217035 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.024308535 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.024100941 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.020382811 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.028806125 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 0.020682224 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 0.030029174 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.031938286 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.021333643 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.024315667 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.024151725 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.020651563 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.024381237 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03133622 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.025124887 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.025561895 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.020640866 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.028216932 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 0.021093991 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 0.025065476 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 0.021887957 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.032923771 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.020338403 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 0.02052572 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.028650343 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.021628056 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.021216797 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.021866053 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.021361139 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.023925216 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.024279454 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.021421645 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.020384786 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.024207355 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.019790363 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 0.026168216 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.020842617 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.021034515 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.021725079 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 0.023867149 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.021380493 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.021316267 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.024990113 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 0.021329516 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.02887423 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.024214298 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.032010458 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.020672468 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 0.025149707 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.029232488 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.024761883 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.024767964 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 0.020521078 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.031862322 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 0.024027451 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 0.025977765 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.021094346 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.02897959 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.025143783 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.024240144 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.02139603 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.027903785 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.0209497 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.02478391 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.025611994 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.02412126 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.028785101 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.025532352 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.024246686 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 0.021439006 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.028755687 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.02393571 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 0.02900251 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.021483402 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.020427978 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.030978633 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 0.02638955 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.023945731 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 0.025073037 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.021194704 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.021336437 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.032643355 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 0.025074678 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.025794315 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 0.029540473 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 0.028972129 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 0.021272303 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.021957523 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.025782068 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 0.021014641 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.021551919 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.024804351 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.024216352 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031017929 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.026014339 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.019721788 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.02625762 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.02879761 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.024047393 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.022118087 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.019841951 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 0.021303872 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.024154288 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.021557672 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.021266199 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.029871686 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.02095987 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.026598303 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.023938203 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 0.027154315 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.024069215 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.025483208 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.020247356 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.026426482 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.021286312 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.027903256 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.025615636 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 0.025434515 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.028106571 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.020300456 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.026707296 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.020622898 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 0.02117607 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.024048676 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.028627798 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.020989615 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03100122 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 0.025904297 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.021573985 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.029611642 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.021514919 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 0.024821191 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.021869288 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 0.020973838 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.024272576 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.026504747 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.022256886 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.021229409 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.020372769 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 0.021935938 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.024295337 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 0.021789243 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 0.029510079 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.030642995 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.022278464 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.02039543 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.020388503 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.025315282 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.021773844 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.028519527 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.029831988 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.026768248 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.024402155 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.022110733 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.020552686 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.024342351 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.024606745 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.024377428 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.024829353 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.021586451 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.026448024 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.03102566 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.021105378 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.021208648 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.024279902 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.021331944 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.021506016 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.021586792 seconds)
done (took 25.353800016 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067765736 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.056466657 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.154448941 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.137392804 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033163616 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.034256555 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.026375831 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.033407274 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.027099808 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.039022055 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.046565589 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040454242 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.147247524 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040572558 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.021085436 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.032348685 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021768758 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.04055945 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.134972132 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.046410251 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.052383813 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019869213 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.025784315 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038498672 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.029260435 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.034683856 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.044101677 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.022474818 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.03739218 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.031574267 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045099988 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.023813839 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02215915 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.032902055 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.033399406 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.026926944 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021188715 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.021980665 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.030207565 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.024847587 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.051310386 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.032146583 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025560321 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.021831476 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022035354 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.032081619 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.022400822 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.025087264 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.029740261 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.021831254 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.024816818 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.028234317 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.01999017 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.032813552 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.020143266 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.025524857 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.025131639 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.02585353 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021603293 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.025974626 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.024630432 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.024083106 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.024396518 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.027911287 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.02264183 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.025201317 seconds)
  done (took 3.418016966 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.042209754 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.063366769 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.039823361 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033789488 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020741284 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021420457 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.02137871 seconds)
  done (took 1.210985208 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.079835845 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.134521777 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.136592813 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.136886128 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.151405918 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.13828386 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.140144224 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.040984744 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.052983313 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.152768272 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.148636623 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.138689521 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023826546 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03010933 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.048719581 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.139679294 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033135789 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.139933328 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.133534395 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.139774838 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022097468 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.044811672 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033192451 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023346982 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.141258268 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.137057244 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025026457 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.05933609 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022955044 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022357314 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021521745 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.042510657 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.135743793 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.024510497 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021193482 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.021337501 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.137503304 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021296656 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.13824173 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02512154 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.13332893 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024339729 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024049386 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022590339 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.023280661 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.132779357 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02303256 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021744765 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022280021 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.136423022 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031809297 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.135978474 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022520299 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.023111763 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029835468 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023287007 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.140931135 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.023016079 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.139249434 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.144305225 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023247614 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.140920771 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.140380208 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.139489075 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.141395081 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029868916 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.138528142 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.136097122 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.022386059 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029479877 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.136439865 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.142732034 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024866361 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024192286 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019719981 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029266935 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.145192265 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.145983086 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.145134966 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.030097641 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022701352 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022494513 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.143780885 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.145972522 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022297145 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022055925 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021484327 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.03571888 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.043137082 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024143658 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.027281577 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021944424 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031809639 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024137638 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022856886 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.138219473 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021000725 seconds)
  done (took 8.069280584 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.037789858 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022356584 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021973963 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020982118 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021064415 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020857444 seconds)
  done (took 1.193886281 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.055911898 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.02173204 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.021508419 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020670807 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.04140816 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.134021831 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.132842421 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02170424 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035796486 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032923674 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.132999476 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.136524599 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.133074854 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021887557 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.133571309 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.03175075 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.133217227 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024363263 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.031249262 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021579434 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.028345673 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.02149772 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021311971 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.139914097 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022589686 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.031271663 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027869972 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031458618 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031262569 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.021402424 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.021351396 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022299851 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.026074163 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.021478928 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.133673584 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026103639 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020680205 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.023712236 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02319629 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022384984 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.136783056 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021740892 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.02333139 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.023724081 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.021552884 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.025848006 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.023539165 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.028427905 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.133264327 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.023786376 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.023600902 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.020672496 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023782182 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.024104295 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.026077154 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021454985 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.023824705 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.132957836 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021448709 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.025978716 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.02081265 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.022258434 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.021287466 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.022414699 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.024072362 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.023699572 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.025771034 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.021296672 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021348364 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020706938 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.023450724 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020705279 seconds)
  done (took 4.091060089 seconds)
done (took 18.968179178 seconds)
(17/22) benchmarking "inference"...
  (1/8) benchmarking "abstract interpretation"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 3.088170983 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 0.044794347 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 0.195450433 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 0.64614245 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 0.145424873 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 0.069352865 seconds)
  done (took 5.179771994 seconds)
  (2/8) benchmarking "rand(Float64)"...
  done (took 1.482766231 seconds)
  (3/8) benchmarking "sin(42)"...
  done (took 0.06642126 seconds)
  (4/8) benchmarking "construct_ssa!"...
  done (took 0.489443528 seconds)
  (5/8) benchmarking "abstract_call_gf_by_type"...
  done (took 2.261038598 seconds)
  (6/8) benchmarking "optimization"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 0.107111043 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 0.082947316 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 0.494633191 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 2.167109491 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 0.333751808 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 0.164819497 seconds)
  done (took 4.374465964 seconds)
  (7/8) benchmarking "println(::QuoteNode)"...
  done (took 0.325944739 seconds)
  (8/8) benchmarking "domsort_ssa!"...
  done (took 0.159215418 seconds)
done (took 15.362395483 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.464109779 seconds)
  done (took 1.461762054 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.901032299 seconds)
  done (took 1.908788818 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.047800017 seconds)
  done (took 1.072876663 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.366326306 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.451445176 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.687590247 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.070003821 seconds)
  done (took 2.581308012 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.692673274 seconds)
  done (took 1.725706792 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238070565 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.154964816 seconds)
  done (took 1.467310661 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.46216002 seconds)
  done (took 1.480434921 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.172953558 seconds)
  done (took 2.196599388 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.22544583 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.120161857 seconds)
  done (took 1.368693643 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.504539137 seconds)
  done (took 1.523633284 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 3.711401284 seconds)
  done (took 4.734867504 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.175415302 seconds)
  done (took 1.2061769 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.241073355 seconds)
  done (took 1.260909314 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.583796456 seconds)
  done (took 1.611081677 seconds)
done (took 26.633492885 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.040324206 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.03599498 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.03560819 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033477511 seconds)
  done (took 1.163872117 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.028293917 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.039587708 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.0265004 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026874075 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02997384 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025480503 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026458467 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.030970776 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023898699 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.03052599 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023272933 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.02774042 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025622157 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.029481984 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.02575007 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026972658 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024684807 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.031110032 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.024411826 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024236732 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025728694 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024521186 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024395734 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025959248 seconds)
  done (took 1.684974832 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.03944759 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.033726948 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.033487014 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.033205584 seconds)
  done (took 1.174125909 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.030190044 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.028923372 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.039455212 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.034308257 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029808698 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.029696452 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.035510857 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.035494995 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042962426 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.038700365 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.0227763 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.022257534 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021797788 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.02752428 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.037219021 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.021938825 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.028255191 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030032934 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029137661 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.031211504 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.024222491 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.020500778 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029527902 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.029195547 seconds)
  done (took 1.748449887 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.042540352 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020548093 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.051726023 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043119916 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.042529141 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.020552534 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.037919597 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.043064674 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.174806974 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.021576577 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026305084 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.021787086 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.051838087 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.021785314 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034404038 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.048818554 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.049116527 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.025254089 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.047689595 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.021780537 seconds)
  done (took 1.881685102 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.02784759 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02660017 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.022291232 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020386095 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.031081565 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.032908885 seconds)
  done (took 1.198310687 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023501871 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021905991 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.022211289 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.024638172 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021498313 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021446959 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.022170314 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.024057716 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.024329659 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.021902392 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.021681305 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021995595 seconds)
  done (took 1.29953765 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.152396503 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.022758903 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023947972 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.021246403 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.022422425 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021902596 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.035260495 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022906669 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039072818 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.021471569 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.022032988 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.028046642 seconds)
  done (took 1.463193686 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057744404 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057970927 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077370609 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061038436 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071927878 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035465707 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.189008799 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.030634482 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.10805845 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079664516 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066540545 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039128123 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035327746 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024597271 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034406423 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049664958 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099646788 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026079495 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062026761 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.250171668 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064379068 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.089021857 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08017456 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066625087 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035664336 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073384384 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048010701 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034606514 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064634651 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056883272 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066029798 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.056898957 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025513912 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.023647423 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096929566 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.047263344 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059476384 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.04419101 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049752678 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.040139666 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046544618 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024527953 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036815687 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.061749936 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.028817804 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069532668 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.038866078 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052845388 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030339517 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077171655 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055671633 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.168937637 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034803271 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057897828 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065510496 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044455543 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060899784 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053818447 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027188517 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.068549076 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.047131756 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042777756 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044639728 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030190194 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097447345 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033253985 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.068000081 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051200924 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.033724533 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047887508 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060739577 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07765477 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061669286 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.046772049 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064073719 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040664167 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065531853 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053841089 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.085901131 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042049867 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026063668 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059509983 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088770441 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039629469 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051648691 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06374274 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050218051 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028036897 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.036981615 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.173099184 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030494317 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.081682591 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024458272 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.093000185 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06143351 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033274578 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05622845 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.061592169 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028984762 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076620203 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056508094 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025709238 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064816255 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052426848 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072112349 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032915592 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.028150263 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05149064 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041805168 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.103838274 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039453737 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029815984 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053493152 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05411115 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038901496 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.259960543 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0421011 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07073945 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051377291 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.037066946 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027212991 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.047957716 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051733084 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054853683 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057484665 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034508997 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.036790936 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03662225 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05179572 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047654931 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02548011 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.065440325 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055863732 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.023618881 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027615533 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.028711043 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076788618 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.036918408 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058510704 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073432949 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029581771 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051468891 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042842697 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057101647 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053082246 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061357922 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053423731 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137963598 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037553587 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.029922192 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054262423 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081777426 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06738144 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037512907 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.03563582 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056085639 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06030094 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043647267 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05915232 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037601011 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054017513 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051698104 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077266279 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068510872 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041000504 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052639443 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0468263 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.071353568 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026655887 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091510751 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043136288 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070491155 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030963537 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078380514 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.069727957 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03351478 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03870868 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052811525 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.043787475 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051570324 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07898113 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.043035414 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.025490865 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030521061 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075254944 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025491973 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054936185 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047658116 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.043918459 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05989598 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.037493961 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032024855 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022908162 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057280453 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078775317 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024683477 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065202939 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.168813935 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034696649 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.039525438 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.023196599 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052487459 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076765024 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060527353 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052602234 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063491372 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050633612 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059442013 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.083099148 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.057215528 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030791672 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.071757933 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076029067 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030377626 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034249542 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048975957 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085090881 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.072220998 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.047775777 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052445172 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.044753932 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054330829 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037562549 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.047154348 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080840876 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070002329 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.071663429 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.032565084 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056882502 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061912025 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049883467 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031836386 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067406305 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.025421977 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05744989 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.0265515 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05690989 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030321892 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111313296 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.031301126 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05084271 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024294567 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.02314312 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081845593 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.065099332 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040391981 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037802306 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.072194205 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07636845 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031918117 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059522651 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058389615 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054243876 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051883139 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057662337 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.040349736 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029888095 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056380408 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03573145 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.025867512 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.053783746 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032078366 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061408589 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032887072 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027418845 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059669052 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05585952 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029641385 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02865193 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04293739 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.073577237 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044961673 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03736622 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062297491 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050971876 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078750207 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.046780226 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.053785403 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066217501 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030450314 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.049404629 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024042684 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.044577545 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.033589776 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106542718 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.026316766 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.041592024 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023271607 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074383842 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.023725562 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.052664242 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056051518 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051265822 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076273198 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046065472 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072486176 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028192288 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06143391 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054809412 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038256622 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036417829 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051211804 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053500819 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064501524 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.043362832 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05551488 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066074495 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157649996 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082527795 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034567583 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070013946 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052504304 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064381736 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.038188763 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063952072 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075320942 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058498197 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057791712 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030197227 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040320505 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057286909 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055711297 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086372551 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051942037 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026169875 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040827532 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045401057 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052585835 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049612654 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027687402 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064764584 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03907186 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.044593317 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043905274 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.020445693 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050430275 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025555236 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03802312 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.041145578 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036591542 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045661445 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061789199 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064297063 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050805365 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079224065 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.053421156 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.08100639 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.065574464 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06130199 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055607477 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029345589 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029907127 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065517666 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059728726 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.072895699 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.051217392 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050062217 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055465105 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039101868 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052511995 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044680487 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.055661629 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027922752 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.024795668 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022856423 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.02611538 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064005138 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053782481 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045532395 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043493091 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.02636601 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055983556 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054774691 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024884802 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031779103 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029523043 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088115207 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.030666571 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042872754 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065664469 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.043126141 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04835068 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04836683 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06722284 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055956164 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027737466 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079023781 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069107336 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027337058 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030259341 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.02539769 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029115212 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056660183 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064765091 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066969615 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.025801779 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038674615 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.038144884 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026475735 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.02536179 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.039379342 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040203437 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050884035 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048613769 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.06273622 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050473267 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026396858 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053798152 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041046194 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048119477 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.056507206 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060962437 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.061463438 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.064000712 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05800978 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053531565 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026425479 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.025743543 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026808992 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029795418 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053383825 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.031393521 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026994441 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.183785357 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.042526088 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055008052 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05479653 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036877248 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025634487 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070686282 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023899414 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071134291 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.02534644 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027461206 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033702646 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028128744 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029237124 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059772241 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053127294 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044445524 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05149448 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054691062 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058697608 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090937938 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025315848 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081400404 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026183159 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02509757 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02613988 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050895542 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027912797 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060921749 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05243038 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033692454 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041760959 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024897387 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070476811 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.045451742 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047332776 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034687236 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.028831313 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070391922 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.031358852 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.020629328 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038958973 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059676654 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026431411 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050388771 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031569 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029332428 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060149476 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.598772046 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03616317 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.025692334 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043206456 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081600694 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060558369 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038723548 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054279166 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.066861741 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047948733 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039754433 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057530806 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.1375657 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026650174 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029912588 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.042458482 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048917906 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047835819 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.049492369 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.039139452 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.048891861 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.043872628 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031111067 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05762465 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031939927 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041379187 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052294935 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.030439245 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.035155589 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073015211 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.044479953 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.025375406 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027310636 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.054675575 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031589897 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040963183 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.02359427 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052891279 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035737823 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050605164 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.040368745 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060351241 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065013613 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033673337 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064757393 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.041478576 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064211322 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039026112 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.027543329 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052539184 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.033186395 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027054248 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069136614 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.020459483 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.054465462 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049962368 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.05420121 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052102596 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048775877 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061275998 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048149485 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028035607 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03831108 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.045078531 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025370916 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.027528826 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.024391144 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.028537149 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054648989 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02322206 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02975024 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064941028 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035970488 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.161965499 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.044762524 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06367786 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030784068 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054649704 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058585545 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033168872 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050550293 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056171287 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070486878 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087371899 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05254798 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.069243654 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071510004 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.025842646 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.020522509 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023758702 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061615211 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.029741443 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.04052611 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030200658 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070300243 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.036732989 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04402248 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.188010647 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029772761 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.036993371 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032763842 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024134177 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.030826437 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053564398 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038609301 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028030954 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0436358 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030018177 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064428039 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051297445 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038857387 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040339523 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028478048 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040199864 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.060085494 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.078349203 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047254532 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.024509011 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.039482666 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055791303 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066885991 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027722123 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028509498 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071283507 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041025575 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053409014 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029874928 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072389151 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078362436 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047442702 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071045154 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023862259 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030942943 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033025722 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.078853119 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.023747763 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04261257 seconds)
  done (took 32.768574134 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.185146237 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.167101626 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.110313149 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.081899187 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.052549052 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.062270301 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.15098925 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.066091469 seconds)
  done (took 2.011491193 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.023019179 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.035916109 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035662124 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.292960627 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.089116408 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.022231306 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.020503911 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036740389 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021819163 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.02189547 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.055350336 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021932738 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024402611 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.53085104 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020958493 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.020567655 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.023950977 seconds)
  done (took 2.436437972 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.385963889 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.032281119 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.181557922 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.177069183 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.078796419 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.4035335 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.030085714 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.032195063 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.499150291 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.324198052 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.075894451 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.11082451 seconds)
  done (took 16.463222616 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.03044505 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.147250758 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.145678092 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028417565 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.028279342 seconds)
  done (took 1.550772125 seconds)
done (took 67.944462956 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.049779604 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.125614002 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023251296 seconds)
  done (took 1.304988258 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.158299656 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.14481681 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.14543594 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.142670496 seconds)
  done (took 1.716734921 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029920872 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.032268976 seconds)
  done (took 1.197274965 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.335969497 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.284427605 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.055306875 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.037288546 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033435537 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033900575 seconds)
  done (took 1.24994518 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.024557269 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.023825707 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.023702618 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.023435426 seconds)
  done (took 1.225731913 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.023920123 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.021857628 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.023935641 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.053698529 seconds)
  done (took 1.252986806 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.056599183 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.057543535 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.109233414 seconds)
  done (took 1.356658746 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.047322294 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.043314836 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.041364257 seconds)
  done (took 1.27221097 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.05852184 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.046982765 seconds)
  done (took 1.240686583 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034718032 seconds)
  done (took 1.174871612 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.050101418 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.056983424 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.218334389 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.17017812 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.220669056 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.207621464 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.021728936 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030009015 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.027546315 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.021594632 seconds)
  done (took 2.159709041 seconds)
done (took 17.015858391 seconds)
(21/22) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.053539464 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.164701945 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.310541823 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.045182242 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.595747317 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.303191293 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.826213714 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.041194876 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.044088294 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022426568 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.03542843 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.590654358 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.820364659 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.121354437 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.806581505 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.121392299 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.594544201 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023147238 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022189344 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022403785 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.806973991 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021757533 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022526402 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022891746 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.590528096 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.328294105 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022581669 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.120820911 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02210839 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024512076 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.305590443 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022633204 seconds)
  done (took 13.00764747 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035898385 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075160629 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030976789 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038447635 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.026525924 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023391202 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.043127136 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.041599559 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.054060917 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022502271 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035683705 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021811885 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.053733543 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022798101 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.038246846 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022238358 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023804248 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022968282 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022480206 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022752577 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.037563471 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021637872 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022694452 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022908771 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022648815 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.033375773 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022654937 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022423314 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022382888 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024999229 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026125727 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023115979 seconds)
  done (took 2.129383242 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.107594129 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.095233416 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.03136328 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.073803327 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072168082 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024448487 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.13292356 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.041580774 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.070905412 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022607712 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038567725 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022041207 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.054744448 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023375564 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.038979632 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022509469 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024676858 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023363918 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022552593 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022779393 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.038116625 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021929994 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022651389 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023102192 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02281684 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.033645031 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02267656 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022627281 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022302526 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024927106 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026731526 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023114884 seconds)
  done (took 2.423041752 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024775301 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026514791 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.027322897 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033591076 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.021067328 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023467502 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024740904 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020956724 seconds)
  done (took 1.354986122 seconds)
done (took 20.073403997 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.04126937 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.025367777 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.02917158 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.05146611 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.030793165 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.136984363 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.022876985 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027673026 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.028042328 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025018913 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031025742 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020944757 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.025506178 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.022767976 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029654725 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.026489186 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.142350829 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025899444 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.140091611 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.142623155 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.024455219 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.027155945 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.027987933 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.140096878 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.141468326 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.140111668 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.032925898 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.029480135 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.023272381 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.024781822 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.13797112 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.140481995 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031704635 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.139199677 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.027849064 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.024750817 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025820535 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.026972127 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.142655366 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028899646 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026264874 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029066304 seconds)
  done (took 3.594674964 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.14042367 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.148506445 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.142914655 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.0312373 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029076439 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031984048 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.147217619 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029011931 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028887442 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.146230096 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025463488 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027945994 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029129025 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02310497 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.029283376 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026564043 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029547525 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023628589 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028906533 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028031139 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.147853757 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.023274851 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029667654 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.02995905 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024804333 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.03044097 seconds)
  done (took 2.596314298 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029962518 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042708116 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.048463341 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.094908302 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.053053497 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.040543766 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.038898672 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043057306 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.044888578 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021597408 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.041098867 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.050085606 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.117257501 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.03106999 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.052332992 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.036735732 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033732645 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023713712 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028421657 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.166612848 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043486971 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.038635019 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053363981 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.108256549 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021296524 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.052011815 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025494019 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.035682859 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.030159322 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.031341517 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024593341 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024699521 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.023535499 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.034608315 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024108254 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.02086827 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.041100473 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03562775 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.034946537 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.055052669 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024531252 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023461834 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.046804134 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086600148 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021137978 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.02263657 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.031555038 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.035018288 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.023492934 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063500415 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.038209702 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.022615442 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039139252 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023166229 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023594095 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039523973 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023615496 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023577731 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.038504472 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024310478 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.040866622 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.028392473 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.038906084 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021038927 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.031164522 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.024494313 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022037425 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.021225087 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.052852137 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028836374 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.061173477 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023076875 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020756047 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.031006165 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.030240656 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028770124 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021045684 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037074311 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033210907 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.023879331 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.038327054 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023566106 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02436073 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.078106763 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.021431165 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020650347 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020901342 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.02231498 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.023565681 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022485577 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034077726 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.022514334 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024395369 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.04492562 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.022202457 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.023054295 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.022255251 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.021559741 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021818153 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.0311389 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023989091 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.024323699 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.035428452 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.02273354 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02447652 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.048396609 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031727689 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021075775 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.021299485 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.02217933 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023076044 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.02339392 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024393099 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.024096096 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026835822 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029334042 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.025982846 seconds)
  done (took 5.272587559 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.257896648 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.218186479 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.112039566 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.261003595 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.046257994 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.151482491 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.21612144 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.232673808 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.023372152 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.047406157 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.079919752 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.171866639 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.161479088 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.175651098 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.175485338 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024190557 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.047750645 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.170610412 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.218453275 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.306840157 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.044903595 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.030050594 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.0489375 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.048298343 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.032432585 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.04656078 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036843654 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.031348935 seconds)
  done (took 4.594021434 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.023911538 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.064328558 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026348304 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.0454514 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.033798109 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.023339643 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024059201 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.023034077 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036114711 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.02222327 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.023160543 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025758816 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.026464257 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024667403 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.023090521 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.030855856 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.030526338 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.022776494 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025876971 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026084042 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033473056 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040773683 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025852341 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.02257246 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024771251 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.022247539 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.022063128 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.024989573 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.023777037 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.02258571 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.020200631 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.031144572 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036158261 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.024155312 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.022540581 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022951189 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.023202087 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.023198453 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024550454 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021450081 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.021492756 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.028757847 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.02122719 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.021913927 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.028675041 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.025210338 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022776087 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024432535 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025528071 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.020239751 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024936615 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025056137 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.02445305 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.031898099 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024657101 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.025116882 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.02353954 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.034040806 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02804034 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.02211588 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.023583227 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.022397845 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024148493 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023981615 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.031493427 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023956223 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021449153 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.023304845 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.02390402 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.029051226 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.022280847 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.029007965 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.020501715 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023233973 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.02352873 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.02501441 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023671856 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.021556011 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.022152931 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021867382 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023522573 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.02287664 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.022085348 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024617016 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.021167802 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.022232799 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022910167 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023083969 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.021765695 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021723217 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.026572202 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023914678 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021372445 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.02465189 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027869476 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024844235 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.038759143 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.023165577 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023784505 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020971155 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038593753 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024509997 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.022757207 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.02459323 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.03131963 seconds)
  done (took 3.90288823 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.163543448 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.022949976 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.04244809 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.056646224 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.03535379 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.02783655 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.037171021 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.021968651 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044793172 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.028937338 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031580236 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021528443 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035073134 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031315277 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.022774551 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.032560101 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024577846 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042217744 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.038126245 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021682804 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033114377 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034362778 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.036140991 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039469106 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03914029 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040401264 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.036130996 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024934324 seconds)
  done (took 2.244541225 seconds)
done (took 23.355600244 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.210294389 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.428611607 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.177197641 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.58515611 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.22834078 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.173123602 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.274932843 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.161520617 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.369381199 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.217710309 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.497285141 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.950947147 seconds)
done (took 59.498617937 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.168416918 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.29133897 seconds)
    (2/2) benchmarking "String"...
    done (took 1.356583135 seconds)
  done (took 3.815679717 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.468984442 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.199030258 seconds)
    (3/3) benchmarking "different"...
    done (took 1.218999135 seconds)
  done (took 5.046502442 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.185874387 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.563923461 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.421216139 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.1607191 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.172118272 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.494213797 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 1.941827352 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.616894755 seconds)
  done (took 26.533148523 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.105092538 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.438860367 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.386781644 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.419343686 seconds)
  done (took 14.55801873 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.480714316 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.474396376 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.471732914 seconds)
    (4/4) benchmarking "different"...
    done (took 1.271110848 seconds)
  done (took 6.905165096 seconds)
done (took 66.44765433 seconds)
(3/22) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.160484662 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.764114259 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.191750144 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.311801327 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.180995226 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.205262098 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.171606101 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.202396018 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.16145383 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.175469887 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.25312442 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.08092948 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.078720239 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.172682758 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.182729805 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.204743256 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.76755447 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.176931535 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.234748786 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.385112698 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.688685452 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.175605088 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.180426486 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.240090123 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.084552554 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.218353862 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.275081036 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.170388093 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.637090628 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.19769612 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.182320755 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.175589208 seconds)
  done (took 180.447845774 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.159422737 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.52970345 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.56852087 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.166462969 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 3.885165586 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.378863168 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.307416376 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.000989074 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.163329481 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.173497626 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.600391033 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.161389871 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.790400765 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.125117817 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.170383914 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.249269666 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.627716532 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.704728284 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.173884702 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.36891345 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.168300864 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.64419936 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.635005563 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.630435597 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.180311743 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.268760052 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.20215001 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.177510986 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.940665176 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.579367983 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.163341351 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.219397937 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.291351393 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.03856671 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.17928184 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.169017935 seconds)
  done (took 150.966171212 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.36796012 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.167426555 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.222246413 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.439723854 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.063392887 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.048877796 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.181320203 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.159451175 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.159784504 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.164592193 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.162491692 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.226652541 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.162966813 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.593655537 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.198638318 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.161857896 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.160243515 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.58735166 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.181556817 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.15999519 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.16078728 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.224197806 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.538244388 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.431510242 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.179803232 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.164314234 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.428320658 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.184794872 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.162410565 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.158626357 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.427467071 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.178932492 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.237951062 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.427299452 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.183302097 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.239428644 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.168112174 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.828779599 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.181319025 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.160000614 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.161320688 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.219721427 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.163081067 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.508768684 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.271045132 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.167063436 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.175804186 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.218799431 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.881532539 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.164284009 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.161846641 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.160394475 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.162613822 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.163368522 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.627812983 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.178264164 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.192951571 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.017333016 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.180555573 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.160100644 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.159766172 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.159134788 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.160667462 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.167543875 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.444112368 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.098188847 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.486241695 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.544447578 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.087309956 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.180482552 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.163635327 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.160660161 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.542845366 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.451862668 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.178734834 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.16029049 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.244180781 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.161956603 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.160862816 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.279262128 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.293483585 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.170844947 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.428460619 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.18251945 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.158501241 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.748636844 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.575933513 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.181661712 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.181402971 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.423243042 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.180358392 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.159973326 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.165424934 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.279177281 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.168857929 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.170387987 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.432432084 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.179603753 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.160877855 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 17.939597898 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.397703101 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.162417982 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.226874053 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.415183268 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.592135027 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.17897973 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.162165282 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.175552782 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.164774201 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.170216026 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.168744159 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.162370919 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.160939703 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.168590167 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.16013515 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.160195086 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.158926827 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.178427093 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.161565335 seconds)
  done (took 337.276083283 seconds)
done (took 671.216968794 seconds)
(4/22) benchmarking "parallel"...
done (took 1.159287948 seconds)
(5/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.391371726 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.898379229 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 5.945327944 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.421735795 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.335472209 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.343556567 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.451026996 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.492585677 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.446523145 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.32538534 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.382012529 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.238959752 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.395893472 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.469138053 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.419127835 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.415615673 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.360836438 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.574136961 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.390793519 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.229557066 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.333603058 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.294287489 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.229768423 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.371087657 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.466543961 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.35266747 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.552939635 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.307498477 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.353935716 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.413915429 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.486547825 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.430897365 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.460981221 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.446198959 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.441873374 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.441813075 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.289399466 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.478836398 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.335448589 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.445070984 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.378767782 seconds)
  done (took 64.399664619 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.443429308 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.328970731 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.430930937 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.452970942 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.819490907 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.425795997 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.542977971 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.327959834 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.327994474 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.435071318 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.442068869 seconds)
  done (took 18.158606973 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.343225129 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.330235552 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.435267514 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.46452094 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.546700527 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.430201365 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.499982828 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.334586392 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.348359437 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.43936113 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.475181071 seconds)
  done (took 17.824781905 seconds)
done (took 101.543574052 seconds)
(6/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.645880121 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.249603398 seconds)
  done (took 4.053797378 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.185539553 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.176759035 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.174011285 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.175763604 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.176323346 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.174488883 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.209430582 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.189884431 seconds)
  done (took 10.623494708 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.171465029 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.171031133 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.171398525 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.171531048 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.171619366 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.171315655 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.17135724 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.171242564 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.171281026 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.171295843 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.170961837 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.171079621 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.172376046 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.172864575 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.173546446 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.172223111 seconds)
  done (took 19.909225036 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.170733397 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.172882564 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.171371043 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.171790623 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.173892124 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.172511271 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.172937867 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.177064343 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.172586642 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.171156503 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.171382201 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.171156261 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.171212189 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.172213998 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.172480121 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.173670789 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.172637726 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.172591912 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.171789498 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.174266643 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.172153914 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.170726469 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.173603709 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.173339239 seconds)
  done (took 29.299754471 seconds)
done (took 65.062736515 seconds)
(7/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.48234758 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.73786285 seconds)
  done (took 6.378236084 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.185682614 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.185656916 seconds)
  done (took 3.537534573 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.551603812 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.199112269 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.726974318 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.450866599 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.196949688 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.196527987 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.629153111 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.198199513 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.19469456 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.198132061 seconds)
  done (took 14.701205878 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.203112438 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.35950029 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.343766615 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.290811615 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.3467164 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.221211893 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.22726811 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.202937905 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.388762397 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.200607542 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.324906891 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.36366899 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.321867426 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.395306258 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.23451072 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.357190574 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.378966896 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.323505823 seconds)
  done (took 24.644641617 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.196839537 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.203193505 seconds)
  done (took 3.562032419 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.315995118 seconds)
    (2/7) benchmarking "second"...
    done (took 1.218703654 seconds)
    (3/7) benchmarking "month"...
    done (took 1.299241957 seconds)
    (4/7) benchmarking "year"...
    done (took 1.283286344 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.224618821 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.202916487 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.218366449 seconds)
  done (took 9.922257923 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.607944228 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.200141229 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.229081448 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.607161034 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.747009712 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.054063621 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.75741257 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.058384425 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.855688778 seconds)
  done (took 16.276637848 seconds)
done (took 80.184008076 seconds)
(8/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.24997982 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.165149444 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.40244262 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.169207907 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.214833918 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.511304875 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.178547348 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.594686838 seconds)
done (took 36.65595425 seconds)
(9/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.166132428 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.159775395 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.202396849 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.198240922 seconds)
  done (took 19.721425141 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.162158164 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.45627197 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.20551143 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.933100506 seconds)
  done (took 18.971335714 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.462152129 seconds)
    (2/2) benchmarking "read"...
    done (took 1.558381602 seconds)
  done (took 4.192901281 seconds)
done (took 50.21535965 seconds)
(10/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 6.160982813 seconds)
done (took 7.321275349 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.28040399 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.281987753 seconds)
  done (took 13.721346787 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.171210984 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.172248781 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.368328532 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.172693836 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.169075851 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.228247035 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.207320443 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.173117665 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.170611424 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.272692722 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.171653953 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.340015862 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.297553595 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.172134636 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.179972311 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.173941538 seconds)
  done (took 40.628029272 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.753839993 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.316575614 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.738127058 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.553593412 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 5.054745248 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.656082155 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.118068261 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.21147903 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.415653688 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.497506836 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.370475655 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.643947448 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.662273463 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.869455024 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.592061355 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.6013483 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.6349101 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.717127029 seconds)
  done (took 50.569787925 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.162490206 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.258201646 seconds)
  done (took 8.585904439 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.188361439 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.184185337 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.199499941 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.194628354 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.1906223 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.169845334 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.210608218 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.182649395 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.173763805 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.170106847 seconds)
  done (took 63.033723608 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.700674851 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.4377782 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.475419053 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.39984189 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.063484204 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.519866851 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.309663153 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.496315424 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.259192845 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.161549758 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 3.864790579 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.535310499 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.48740292 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.815460387 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.623120915 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.30004281 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.467177548 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.535438983 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.443832924 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.129998959 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.1355287 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.063305597 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.379389946 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.922741196 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.170096792 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.893806594 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.116548646 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.265849207 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.238255139 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.668228608 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 3.834136316 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.223347146 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.058525884 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.207696625 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.200540075 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.50716361 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.412384332 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.345391612 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.358286717 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.42695214 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.506023633 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.901780916 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 3.163905295 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.913159758 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.344033345 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.043349665 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 1.969416449 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.390251297 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.266240591 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.301295903 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.448151713 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.296512817 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.308432823 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.286012814 seconds)
  done (took 135.764605248 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.161386748 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.292980335 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.320562005 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.165140679 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.406735716 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.358060419 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.62313038 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.468689189 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.173746128 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.365929563 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.305537714 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.258034724 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.165113129 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.165375243 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.164420551 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.163308278 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.333340898 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.591083427 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.171577675 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.163690239 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.370865156 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.317241833 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.279898966 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.166499992 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.31590882 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.390923139 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.55438129 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.262409252 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.653088235 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.162004417 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.582771253 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.49038446 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.166705434 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.993307829 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.506071265 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.465530729 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.492581157 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.170919939 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.162616051 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.162521003 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.917733766 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.352797745 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.449448769 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.312228225 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.407986607 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.39259426 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.682950181 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.161146082 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.691229482 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.339063974 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.375052281 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.388765023 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.436308007 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.169778658 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.377482143 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.163791243 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.704278827 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.401443168 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.387512993 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.251281425 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.165835354 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.165543511 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.162786108 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.440968935 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.165624336 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.243094702 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.165502 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.164949558 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.248045816 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.254152358 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.384594296 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.40205797 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.395422284 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.443403695 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.591441097 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.345851619 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.572762232 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.374355505 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.167565874 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.162100911 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.467555879 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.753397289 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.295218695 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.43149468 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.396003533 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.361072261 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.757760395 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.163232923 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.298720975 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.34002348 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.379365097 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.41272114 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.501603239 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.100974594 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.162732666 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.163300225 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.137531372 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.296766192 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.244973263 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.31798713 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.412280669 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.557007498 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.41437441 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.445032252 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.265232004 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.166353896 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.752307684 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.165103318 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.371953493 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.456449186 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.171212353 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.163722778 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.319341423 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.961628574 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.163144727 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 4.795413988 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.572107688 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.17608279 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.323252395 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.167020737 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.387731924 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.123402279 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.378551152 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.331213193 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.42555752 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.421641965 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.411494955 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 4.350457345 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.397498373 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.42203486 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.531348062 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.435069182 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.732925325 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.163932367 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.455834774 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.168841837 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.161638825 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.336514916 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.920652151 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.328382144 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.165426049 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.40036989 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.32107035 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.516370562 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.175041575 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.412732869 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.396128252 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.464372173 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.167079449 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.299505915 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.164354253 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 1.924718558 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.332807878 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.164333636 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.164007507 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.672380752 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.163901471 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.318223516 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.379941816 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.8859161 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.485948456 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.582158569 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.529003572 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.44370207 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.354607626 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.700462646 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.721732072 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.304980709 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.697488721 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.353458194 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.165911654 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.449939229 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.414480304 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.164913869 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.166467479 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.922927424 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.854848498 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.16236618 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.326745775 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.162017821 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.321054846 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.344375816 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.166871873 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.477419477 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.171955418 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.03238998 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.307850957 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.127843823 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.164782876 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.164149802 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.163954139 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.164928823 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.419374361 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.407126078 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.486761747 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.303673357 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.44321611 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.416762324 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.379038199 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.422376567 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.175372706 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.373463332 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.16737609 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.508604356 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.169787463 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.381824061 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.394827835 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.167888891 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.356166154 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.361998295 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 1.949150261 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.43039553 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.12355402 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.16660092 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.646333788 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.310546207 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.445992985 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.955752564 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.166060266 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.437459586 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.28136282 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.35321578 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.135471109 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.187084148 seconds)
  done (took 729.702857175 seconds)
done (took 1043.167898218 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 6.17180086 seconds)
  (2/4) benchmarking "arrays"...
  done (took 6.170625635 seconds)
  (3/4) benchmarking "structs"...
  done (took 6.202456157 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 6.177722702 seconds)
done (took 25.886795276 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.162407114 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.165229178 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.17037194 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.16368107 seconds)
  done (took 25.822655593 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.904886677 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.744415075 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.366688857 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.348040573 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.117687236 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.346301347 seconds)
  done (took 10.991461334 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.194981991 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.164607968 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.163801277 seconds)
  done (took 18.684200641 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.599550082 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.624982348 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.307240138 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.252030756 seconds)
  done (took 6.948021529 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.21179202 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.21117213 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.20283745 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.207208928 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.203610604 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.202815999 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.219967298 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.209412791 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.209531096 seconds)
  done (took 12.045483274 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.108152006 seconds)
done (took 79.782187664 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.433114409 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.400736109 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.164179556 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.289230584 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.28930396 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 1.85041871 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.382890358 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.272486215 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 1.259375556 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 6.162761989 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.210227471 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.385787552 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.458789743 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.507836208 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.012478629 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.000052374 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.297999103 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 1.852784862 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.497937338 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.383014013 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.192173929 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.19704411 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.226636313 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.440816529 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.319682664 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 1.854216629 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.209217677 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.261927684 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 2.075862484 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.193543638 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.909737906 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.234030446 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.351917784 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.166000157 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.506416648 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.206862913 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.282169665 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.541574122 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.267329049 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.414280704 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 1.864571873 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.264283993 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.002422981 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.903974904 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.469698946 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.167682499 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 1.991289924 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 6.168841112 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.325526303 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.594041194 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.368969208 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.242066046 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 1.255560704 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.163241369 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.389090075 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.465584533 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.183495347 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.891666982 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.3058916 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.360284208 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.294975206 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.482580303 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.176979847 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.604298902 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.232798075 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.258804818 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.164856195 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 6.796212464 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.262282076 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.875291002 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.115361824 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.255949759 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 1.422921242 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.198080399 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.16199239 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.967043786 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.20214437 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 2.272910197 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 1.869443453 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.513824368 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.693752898 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.49907282 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.260816393 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.522740985 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 1.376891164 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.225409256 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.198383299 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.200879315 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.766967691 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.233104864 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.163593856 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.1711311 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.393906937 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 1.256103754 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 1.961863344 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.167697623 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 1.37880418 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.433793491 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 1.6315839 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.286243775 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 1.854856503 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.167166146 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.381821579 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.383178824 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.257911144 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.119067045 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.12642128 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 1.860145068 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 1.971939057 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.499481085 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.007832843 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.500165947 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.570728509 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.281166181 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.759907491 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.595744987 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 6.426975263 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.166162985 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.25262328 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.492328352 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.915396586 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.496202096 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.289598983 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.609146759 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.225862784 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.198282262 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.330815683 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.385598334 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.855677673 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.203349534 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.26874262 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.232023963 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 1.862502513 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.256991796 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.256397625 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.297683456 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.509189325 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.167794184 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 1.841917061 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.277027502 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 6.167281924 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.607419405 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 1.845638607 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 1.844381439 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.168358376 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 1.841688401 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.396796556 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 1.490937737 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 1.841126302 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 1.930840289 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.238319996 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.232749783 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.304363755 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.226419434 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.253921863 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.17945952 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.42267362 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.378082441 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.165932212 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.987195357 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.168093917 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.324598409 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 1.997998925 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.169753008 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.561866393 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.201995465 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.3607536 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.511974734 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.168763415 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.266263811 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.282283556 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.304421673 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.26027082 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.383406187 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 1.426002746 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.276173055 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.162859841 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.406891099 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.057746462 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.329949494 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.392796076 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.303975173 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 1.424030127 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.257158246 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.18915799 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 1.968468642 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.46333839 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.552322751 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 1.390876535 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.644800232 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.321395508 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 1.848422191 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 1.998352786 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.2932887 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.503932566 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.369314804 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.84421415 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 1.849129372 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.826989847 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.267519275 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.049192175 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.171043079 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.25461019 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.231962757 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.225856149 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 1.850813808 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.16833946 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.292488314 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.303686314 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.236919735 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.160319371 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.001223782 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.640878806 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 1.859355581 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.852406697 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 3.958452609 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.390137982 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.262154692 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.800738037 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.57017802 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.169663173 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.47914082 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 1.981872872 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 1.85679547 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 1.357606508 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.506737164 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 1.994796342 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.20192525 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.164753514 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.290155876 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.069957887 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.773196107 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 1.866645939 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.20337879 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.426478245 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 1.903479644 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.37892845 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.301004888 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.495435048 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.176297716 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.203590759 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.438555829 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.410581953 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.256921303 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.372907731 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.379817349 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.580748892 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.236253231 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.161839014 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 1.928312079 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.238883903 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.37358205 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.167214244 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.750744403 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 1.9821908 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 1.844297376 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.512845727 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.410005755 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.019031596 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.324741152 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.295166765 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.376603614 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.167124875 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 1.984069543 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.624614739 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.550890058 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.485958069 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 1.97718555 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.204551461 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.642483358 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.457064152 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.17011267 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.297405065 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.923214272 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.288239623 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.294695689 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.273415864 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 1.975649136 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.109329439 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 1.862705867 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.20960877 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.35743162 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 1.391066418 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 1.985897431 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.262749203 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 1.85478742 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.06584672 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.335518387 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.232849363 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 1.923987961 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.318389818 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.311617258 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.324735388 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.317752709 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.810692088 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 1.483982329 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.906691026 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.768730927 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.161528286 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.298098796 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.20655198 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.185044011 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.362057685 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 1.846089128 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.300718456 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.369248535 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.0101431 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.256652174 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.163514658 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.276203166 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.560366143 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.758479079 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.23701072 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.879791093 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.205576234 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.164182282 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.562774478 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.4715021 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.257320754 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.309175631 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 1.176959449 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 1.854122583 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.308947696 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.563965903 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.308388546 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.170207567 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.168619071 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.62413832 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 2.324499583 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.337959818 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.351905093 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.624865325 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.17066021 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.820507264 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 6.171796756 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 1.969214207 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.701565901 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.976789677 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.850034455 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.503046231 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.226975492 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.284634364 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.287030205 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.782545685 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 2.402816392 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 1.852885345 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.043546621 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.435447508 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.202735784 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.510022491 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.293849847 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 1.862407173 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 6.170032746 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.41504204 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 1.865868162 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.285695872 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.276814875 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.16750325 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.202264525 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.3479137 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.221526121 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.522884035 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.202045548 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.49749344 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.393534309 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.407625802 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.192776885 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.257991508 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 1.282801147 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.494980187 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.279093602 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.472577173 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.171744496 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.324396035 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.358432972 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.246084044 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 1.85419976 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 1.192033096 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.251610399 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.290180334 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.956396544 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.366786473 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.289759455 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 1.96552037 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.30817797 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.028246932 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.017684823 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.882632326 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 1.203395035 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.167962321 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 4.630355446 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.269145034 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.251896802 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.572658197 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.86000699 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.410123389 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.52989754 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.300859574 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.024337166 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 1.377170249 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.167724483 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.079810677 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.167268878 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.508193368 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.196351833 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 6.1643687 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.331593302 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.255932322 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 1.417391898 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 1.18585575 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.245804291 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.164880462 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 5.833822713 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 1.194759667 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.30981891 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.523548021 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.043162436 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.925974109 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.269019514 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.506108391 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 1.291465203 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.283707889 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.431423043 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 3.608828691 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.278295572 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 1.872785289 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 1.271604342 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.059137928 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.329449908 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.221583231 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.434382336 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.179633677 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.606794725 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 1.29084303 seconds)
  done (took 1072.489019493 seconds)
done (took 1073.702228199 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.189598188 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.181345128 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.22887074 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.180814776 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.177934316 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.193458625 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.216549309 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.219314227 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.200413622 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.193887332 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.240722042 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.191057399 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.193055161 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.280683094 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.180911064 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.19541663 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.184873066 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.194435982 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.231145652 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.202879661 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.199642317 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.188677933 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.218098251 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.198364415 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.189781913 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.189186007 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.207686819 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.206083009 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.248567442 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.202871736 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.190794175 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.180177986 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.202574856 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.21059229 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.215140771 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.249005036 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.212707619 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.178352252 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.193670288 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.210764537 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.253017117 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.193738474 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.179352425 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.212788313 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.203699937 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.184784529 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.229451383 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.183827033 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.198298032 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.184204295 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.18424549 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.240078366 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.182517406 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.299734673 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.193706081 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.183243596 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.215128285 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.193998321 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.192191399 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.193536673 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.192570492 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.239558033 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.222458576 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.190625663 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.185335317 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.225502518 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.203764264 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.207981971 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.221783013 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.206439487 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.200010142 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.183639751 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.258976911 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.194050777 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.184314617 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.192964811 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.229259019 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.192863227 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.313977982 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.20487041 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.185871285 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.185750167 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.204200931 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.279024814 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.191949223 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.19294327 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.183905757 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.194431622 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.204669646 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.178967193 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.188581734 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.204172667 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.220125557 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.180903118 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.1843046 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.191577318 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.204650967 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.301309884 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.223744106 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.287091194 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.200829025 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.201664105 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.19734187 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.205499738 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.204734203 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.225650665 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.224664893 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.184165518 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.188647092 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.201219213 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.176116092 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.229312759 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.208224621 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.197671771 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.198296487 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.247223145 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.223903988 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.186948662 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.198721857 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.208663881 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.190149079 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.225600216 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.191197502 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.223079154 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.1914086 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.191916436 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.18248813 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.176066264 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.342040933 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.232727118 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.214872541 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.247229512 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.197216166 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.208498955 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.223219368 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.192171656 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.19133244 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.304835147 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.250076327 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.185473563 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.200725505 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.202660569 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.20670497 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.192974612 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.181825505 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.198342846 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.184627622 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.181897018 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.190854637 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.220749589 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.298707634 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.181408235 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.198845174 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.192236064 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.191815295 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.196125489 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.201444017 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.1873252 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.186189594 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.191048481 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.23376827 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.219800978 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.204918372 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.200276548 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.205373064 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.20836127 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.215104715 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.19323216 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.1811654 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.324438278 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.237623335 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.209633116 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.1907305 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.186757082 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.206928908 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.187588852 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.17991649 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.212607422 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.348012894 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.199418076 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.188624269 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.197896201 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.184180704 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.198112438 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.203757892 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.199148445 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.258094001 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.191577784 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.198367339 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.248450856 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.202960151 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.186225957 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.200244317 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.220615384 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.302981219 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.198783728 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.188586574 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.190792346 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.208071678 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.194661537 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.19422322 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.208412727 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.283409438 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.198982401 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.187263437 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.238300792 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.206153459 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.186449541 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.325121521 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.184671149 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.289589653 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.201418827 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.198228263 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.19727766 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.223655782 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.184195205 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.189380184 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.199919808 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.34060943 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.207704804 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.190279944 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.205793997 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.211062202 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.195017986 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.191341882 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.189039904 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.184333297 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.183030779 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.218918355 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.196633501 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.216461467 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.303982118 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.206507322 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.210418721 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.191372236 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.206213647 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.213985252 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.221501698 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.187352712 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.200521652 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.224259803 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.223800066 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.175173208 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.182838946 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.2085139 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.221269144 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.209350414 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.188028988 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.197533408 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.183488659 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.199317723 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.260943392 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.188658747 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.192643392 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.303173043 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.188673098 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.201579035 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.217187619 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.230453319 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.190076134 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.200604529 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.1824834 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.201088845 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.200399391 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.200489444 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.183683696 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.219514704 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.184444404 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.211082207 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.197932854 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.21123072 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.184547326 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.192541247 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.198424579 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.200274926 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.190053132 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.189194805 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.181135639 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.194781864 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.174908464 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.182051852 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.198605971 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.204187516 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.197989126 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.211622854 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.1981949 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.323260909 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.200287219 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.184063251 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.327461835 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.188373764 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.297007626 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.191327628 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.190177787 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.207244609 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.199399651 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.202199781 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.217482443 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.199150147 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.238093036 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.321456032 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.195641988 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.178488204 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.199188875 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.226846951 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.192054053 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.185442793 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.196852435 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.225399221 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.287131966 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.198176594 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.245465583 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.202717491 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.183671516 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.345773349 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.197164388 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.202731107 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.204325669 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.188422235 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.237528264 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.193408515 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.197974879 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.192795273 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.343667574 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.250922772 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.217097126 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.202839327 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.219180191 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.192018133 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.183323936 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.233022385 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.217951343 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.198609192 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.181074453 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.219043936 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.200895198 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.188207374 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.192110786 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.318420054 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.198715369 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.194942365 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.201034501 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.182743342 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.178868802 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.184310025 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.241195722 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.191797297 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.194446593 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.194972895 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.199779383 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.192727068 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.199253686 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.227127353 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.20530416 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.186733388 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.362818498 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.212556723 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.196212539 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.208159867 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.177680642 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.190293566 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.185496566 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.230351059 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.222341799 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.200242608 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.197706238 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.194546063 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.197005537 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.19177718 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.177904359 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.192867086 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.252254572 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.18127149 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.191375191 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.204708744 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.203117796 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.204629131 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.193063319 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.180071655 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.198121075 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.200371693 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.187158936 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.24181036 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.196393081 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.20025183 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.341389844 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.204934027 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.192106436 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.193774355 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.187945992 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.191154955 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.199905185 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.221924904 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.183796532 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.192539991 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.18778353 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.198307882 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.208682104 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.203362905 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.194879579 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.191345029 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.179754069 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.190178672 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.187000336 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.224199011 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.191722809 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.194798053 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.202438966 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.185714021 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.190194614 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.219259628 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.301294401 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.200919573 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.303098788 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.303935587 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.32443125 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.206881169 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.188865941 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.193288966 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.241626128 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.200027144 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.191088758 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.193127693 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.183926985 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.200001274 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.213019061 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.240764611 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.195455417 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.195619035 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.198713085 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.184661863 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.212938712 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.196814649 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.349782927 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.222661309 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.188340872 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.199747592 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.245537912 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.230081398 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.214618801 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.218319243 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.187552957 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.219804827 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.196135622 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.258480997 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.200492443 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.181995612 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.193114675 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.194561386 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.221117097 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.213736099 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.182427318 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.189929978 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.181000881 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.196844794 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.214505766 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.199893005 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.23557865 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.195482542 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.212085926 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.188746877 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.202551482 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.195037018 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.189983265 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.219039117 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.187466665 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.183086243 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.205757654 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.368285515 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.209644177 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.192141846 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.18359791 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.208776962 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.202821869 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.23172865 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.210627719 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.187161971 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.198143631 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.192869759 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.21554765 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.201692186 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.31776212 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.183856154 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.21234858 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.183981157 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.199297416 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.324527035 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.213303317 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.188270341 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.201292638 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.187637443 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.208014357 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.199585518 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.200744923 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.202147658 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.232833159 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.233732535 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.191532143 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.368308145 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.20159127 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.188464829 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.179156514 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.195894941 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.19606083 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.197066948 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.192621058 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.204441156 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.193704967 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.199537655 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.184077168 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.208014685 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.201387836 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.192800105 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.183399404 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.225888259 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.185693512 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.185278884 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.366952015 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.222552983 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.226437749 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.196440391 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.186377085 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.205489933 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.186132518 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.218396565 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.192413705 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.204254133 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.185780972 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.182897031 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.223814459 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.210634121 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.210424484 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.186217639 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.313627169 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.184355455 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.201358195 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.233465782 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.187823819 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.203542691 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.198087855 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.219977528 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.200883193 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.231290145 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.197144032 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.243791869 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.201146544 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.177002033 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.19600806 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.202395456 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.214786795 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.195426215 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.201198871 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.197884825 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.200840268 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.200299949 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.205285474 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.215719862 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.187033147 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.254285457 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.341794672 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.211530443 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.191245326 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.194436759 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.19233589 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.184364724 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.294899588 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.235898961 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.302887926 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.200233341 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.195085145 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.236774346 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.283344582 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.204036431 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.185408802 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.193653187 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.219738789 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.208377251 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.19747042 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.207289684 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.18495592 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.207423097 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.201961529 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.198135297 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.202824205 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.199072181 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.209439319 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.231475127 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.283461144 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.201908087 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.228582267 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.192552786 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.260649685 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.201140897 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.302674809 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.209484812 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.193731691 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.301888595 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.201078078 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.19538235 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.205245804 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.181479319 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.205027878 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.210419526 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.194021424 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.188243308 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.187532791 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.192566238 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.176750739 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.19340361 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.194429598 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.218633935 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.201285512 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.177838893 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.206183516 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.232327363 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.204290976 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.199703807 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.287540676 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.19896493 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.184011241 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.203905407 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.202382669 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.196029865 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.180841222 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.208455518 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.198827845 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.19426742 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.214960609 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.320095049 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.187664629 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.196589474 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.17900877 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.200532386 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.190185005 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.214116271 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.19284944 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.201527058 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.203736851 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.18646231 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.199628299 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.196229478 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.220544333 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.201401571 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.197636175 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.198274991 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.199625988 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.199253948 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.190754903 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.219103477 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.200854486 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.201014082 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.191064337 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.184622469 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.194338501 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.206437881 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.198144293 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.187791935 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.195265692 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.188206523 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.33438311 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.191244805 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.230679302 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.220776161 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.192915857 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.1845619 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.195705311 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.364076363 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.226579546 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.222239532 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.184348519 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.192022305 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.202393766 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.194872945 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.188006493 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.213172912 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.197862 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.199166111 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.260520282 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.21945647 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.203814138 seconds)
done (took 824.051958857 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.494508416 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.166847372 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.436556678 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.457835941 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.510197165 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.485778291 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.249249461 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.569799003 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.234089128 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.56325071 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.405904119 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 6.167681101 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.170296045 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.385805776 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.517970992 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.403600728 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.233765009 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.397276683 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.574482968 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.512720863 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.167151762 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.404054423 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.361035984 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.539324944 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.17080939 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.167844697 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.51604354 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.300263686 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.414896674 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.166834332 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.170546696 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.404408273 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.516949212 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 6.16782585 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 6.167402842 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 6.168048013 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.477181182 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 6.173076604 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.472816702 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.514671156 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.399929278 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.167775803 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.167013662 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.169184935 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.344638923 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.467564268 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.247869084 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 6.168528473 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.169536445 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 6.16736215 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.411813543 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 6.16657675 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 6.167115911 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.415704059 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.385489474 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 6.167487053 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.543380851 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.619513459 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.513005971 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.436913808 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.471492431 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.556867691 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.533791819 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.348488961 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.168204047 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.423398098 seconds)
  done (took 200.344234455 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.51247042 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.433688567 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.519950445 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.183330358 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.624959353 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.508024224 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.271333538 seconds)
  done (took 13.221722289 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.102737068 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.224803084 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.395054541 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.396230804 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.234810356 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.334804035 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.296923353 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 6.167599768 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.389713523 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.262839731 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.723730725 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.389409332 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 6.166255036 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.166184138 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.296677027 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.438482038 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.084532879 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.282629952 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.279157998 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.499352583 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 6.168335419 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 6.166292774 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.347425249 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.216210476 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.277353541 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.267611419 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.229599487 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.075280971 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.22591806 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.219297501 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.23910877 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.631942099 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.228147189 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.168036286 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.214026952 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.733641989 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.236643084 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.230694366 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.353559421 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.183512212 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.222070333 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.229162904 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.355801654 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.237481203 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.219582386 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.386733474 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.241949241 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.239351169 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.22036502 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.22573965 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.368404188 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.22649071 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.210468122 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 6.166662539 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.422921329 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 6.167992288 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.286858384 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.222917168 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.224500413 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.282848646 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.226283411 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.500935568 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.390637508 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.213244456 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.390754982 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.800571955 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.228718356 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.222924218 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.220651225 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.421894497 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.231599762 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.391626529 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.230173308 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.27331159 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.233086261 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.338389328 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.389180092 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.944228042 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.896857139 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.168583776 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.408415355 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.218460098 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.367894038 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.029733468 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 6.168332307 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.219875209 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.232594144 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.70666433 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.064437221 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.2283304 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.47133223 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.218470907 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.287343463 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.269932652 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.209386727 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.281957669 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.362263794 seconds)
  done (took 190.446576473 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.299150492 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.198916866 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.345324743 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.831023631 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.797845066 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.337099722 seconds)
  done (took 13.973962112 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.58706026 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.941560044 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.258580016 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.243811961 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.276081428 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.203348058 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.207031141 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.322439969 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.221993137 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.245037663 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.208980815 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.224910127 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.206995004 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.338081359 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.207595426 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.235448032 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.205284887 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.247192191 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.231416847 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.28120171 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.222629102 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.277564152 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.280882642 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.781671449 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.138215977 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.246008492 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.024959719 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.232405476 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.232919704 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.352588356 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.400354346 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.210035934 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.78658884 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.118555482 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.890252737 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.792426119 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.232278779 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.235865788 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.230353987 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.206531538 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.223103379 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.280824472 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.250722387 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.223740569 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.461050389 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.614195995 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.159043444 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.47826865 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.204713347 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.224687962 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.221711236 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.252295131 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.200950411 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.219987707 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.836893754 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.616631195 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.07403635 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.217848868 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.274520127 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.786528354 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.186146315 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.223690436 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.524864052 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.053585642 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 6.167198596 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.227112202 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.78938159 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.231424594 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.294858646 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.242826941 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.223498891 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.247783302 seconds)
  done (took 121.223467698 seconds)
done (took 540.375506449 seconds)
(17/22) benchmarking "inference"...
  (1/8) benchmarking "abstract interpretation"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 31.891524758 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 31.801227161 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 31.216730003 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 32.244998956 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 32.096148238 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 31.364651613 seconds)
  done (took 191.781681972 seconds)
  (2/8) benchmarking "rand(Float64)"...
  done (took 31.280440558 seconds)
  (3/8) benchmarking "sin(42)"...
  done (took 31.493600861 seconds)
  (4/8) benchmarking "construct_ssa!"...
  done (took 31.566996337 seconds)
  (5/8) benchmarking "abstract_call_gf_by_type"...
  done (took 32.773672268 seconds)
  (6/8) benchmarking "optimization"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 31.17837473 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 31.339316377 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 32.029286782 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 33.635272593 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 32.056505307 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 32.432088784 seconds)
  done (took 193.946959866 seconds)
  (7/8) benchmarking "println(::QuoteNode)"...
  done (took 31.347022762 seconds)
  (8/8) benchmarking "domsort_ssa!"...
  done (took 31.634881378 seconds)
done (took 576.992361676 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.273155996 seconds)
  done (took 7.4410186 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.350159967 seconds)
  done (took 7.525581592 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.170732665 seconds)
  done (took 7.340281449 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.18380574 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.199239275 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.189906202 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.193964114 seconds)
  done (took 25.961004133 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.440734769 seconds)
  done (took 7.609641116 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.169124626 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.188921834 seconds)
  done (took 13.532203069 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.297604702 seconds)
  done (took 7.486817099 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.317723009 seconds)
  done (took 7.503245851 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.18033972 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.174652491 seconds)
  done (took 13.550043526 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.168223944 seconds)
  done (took 7.337953284 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.980997838 seconds)
  done (took 9.267844434 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.176054465 seconds)
  done (took 7.390650428 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.249179462 seconds)
  done (took 7.417419144 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.292174031 seconds)
  done (took 7.461154405 seconds)
done (took 138.002444491 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.167217287 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.170631918 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.169115082 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.169795467 seconds)
  done (took 25.843309987 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.464073057 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.464722837 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.437455891 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.438444259 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.413766638 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.412113725 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.464644326 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.464646182 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.412091016 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.440886314 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.46436957 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.438143854 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.437562183 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.436962042 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.435826792 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.439299825 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.439152275 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.464227678 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.412931447 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.436548315 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.437863034 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.438183681 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.834838888 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.836963019 seconds)
  done (took 36.53491795 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.364782473 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.517231681 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.336303483 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.545638534 seconds)
  done (took 6.932364879 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.216160253 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.440857304 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.489931176 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.500026742 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.40334397 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.275432789 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.490109068 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.30538448 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.296970545 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.294846233 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.75414491 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.309231269 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.337642908 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.543316403 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.269707383 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.209029935 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.205129186 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.287782372 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.438572331 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.340908925 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.418013297 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.490596082 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.403480396 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.489836064 seconds)
  done (took 34.378811352 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.949518581 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.768457306 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.073012122 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.063676664 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.393267952 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.108436223 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.026526363 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.030696039 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.367943316 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.052959406 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.921124298 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.027247849 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.159758954 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.986325304 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.997544541 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.262505514 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.302929741 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.980292589 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.055056964 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.051537109 seconds)
  done (took 39.747002427 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.168310721 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.529930312 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.460145853 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.447453288 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.170520094 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.376156845 seconds)
  done (took 23.320892945 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.262078498 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.292807603 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.409236937 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.36979114 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.291263444 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.279098033 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.523627517 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.3255877 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.701681493 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.453212813 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.044512743 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.463120863 seconds)
  done (took 20.58487973 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.169335686 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.181825147 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.169619391 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.294320993 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.866796193 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.944363115 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.049058966 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.167874382 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.069383644 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.336353711 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.947753672 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.294925283 seconds)
  done (took 39.666956059 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.398458456 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.412949873 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.438012028 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.784348903 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.512507897 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.145325065 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.150557612 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.758748585 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.112638233 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.117651991 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.509963354 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.143968289 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.157921001 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.115121104 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.446392305 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.429236129 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.975464105 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.989984121 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.440266905 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.200725806 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109590586 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.232125245 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175113182 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.537248415 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.483659297 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.173284212 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.400363617 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.335773036 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.194783388 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.399431858 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.270244254 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.559052828 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.389235616 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.436996767 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.523620482 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.211679237 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.195795129 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 4.518408322 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.614026718 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.458561256 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.267476069 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.281207114 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.278808138 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.133744728 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.451729281 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.904490541 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.176022708 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.203744178 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.125081756 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.982717608 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491892881 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.821511096 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.454293666 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.658590235 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.299948259 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.428032849 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.963044757 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.312422019 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.37861448 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 3.917709789 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.334832078 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.198037985 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.401767369 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.111221547 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.053684687 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.439500374 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.838198808 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.032516327 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.880016646 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.427908019 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.500916869 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.980596386 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.874376204 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.213459374 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.595949481 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.944306664 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.458546495 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.173374928 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.350491812 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.181921527 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.113877056 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.277549792 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.746985581 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108997946 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.294309806 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.973068301 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.169798295 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.113395507 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.179765768 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 3.915844731 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.578710008 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.212489876 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.23191914 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.377072789 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326996905 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.130101841 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.753837583 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.45989939 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.112773922 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.73965598 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.294072875 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.158820653 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.282711988 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.68130177 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.497887824 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.103222292 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.591702623 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.204714658 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.435634805 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.74558296 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.960807185 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.406078442 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.49531371 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.477369612 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168726541 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.070343383 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.35533865 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.965988091 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.139675911 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.169281026 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.112292826 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.526103293 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.392013115 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.282201348 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.392543579 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.171776935 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 1.956635582 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.169243881 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.523826325 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.170371535 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.333732472 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.534706326 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.164946468 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.310928197 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.120837786 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 1.947037411 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.512377114 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 5.167039202 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.484293084 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.434068617 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.122681983 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.811822873 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.081657312 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.006820774 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.468372562 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.392713731 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.478097394 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.810356811 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.323269212 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.178664555 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.729187154 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.333504668 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.181842488 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.645938331 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.201388925 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.760191838 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.62868257 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.385939266 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.168829498 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.343524939 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.271074293 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.43383027 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.497562105 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.191078367 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.974340102 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.423035794 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.414857472 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.171111735 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.113552602 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.419571214 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.415424774 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.531924018 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.326811351 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.498565097 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.501966481 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.487453421 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.398470994 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.499476294 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.886861744 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.685661152 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.397052455 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 4.535465687 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.158914948 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.757314394 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.936985753 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.628709727 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.352435816 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.640075492 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.48411959 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.53320267 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.215741939 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.294938474 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.112009452 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.943681172 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.525846698 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.126818444 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.543534239 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.234540263 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354811659 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.525215422 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.210368256 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.298730432 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.109343675 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.53518118 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508589347 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459750178 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126060507 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.490916933 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.180053773 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.845882693 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.224743867 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.023526818 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.260079423 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.152887688 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.16956819 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.487928299 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.094013663 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.725302384 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.544687713 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.486955374 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.892012484 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.953292054 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.441907273 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.176708406 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.282454784 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.377417506 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 3.913688024 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.254858278 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.533674976 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.386257202 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.477532507 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.171100458 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.172145868 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.882384707 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.041981605 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.881406649 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.512879194 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.135619157 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.730315971 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.258136926 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.207172535 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.285630661 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.215024939 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.010401389 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.736036712 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.978220655 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.390472226 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.710523341 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.996982736 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.040017996 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.426007051 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.168972538 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.473637235 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.219736259 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.278066609 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.744094512 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.206833727 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.170238665 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.440476604 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.697400579 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.996039557 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.887341214 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.301018486 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.42250694 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.389142502 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507872319 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.503443163 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264015182 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.112881898 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.955235453 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.251194734 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.431008161 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.169910595 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.466943064 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.449238067 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.499185064 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.630170562 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.518379669 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.051175626 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.472015812 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.466132536 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.315754977 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.43783373 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.699180313 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.675004555 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.123401998 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.298789028 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.111977938 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.079655065 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.486714102 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.447282915 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.468751046 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.15692175 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.522922165 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.464687665 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.925106124 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.301266471 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.438919689 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.745899338 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.467811645 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.169936013 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.49170626 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.548667291 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.178913632 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 4.492024802 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.9906113 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.496206987 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.962158363 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.986500007 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.189247142 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382669582 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.801807683 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.353808037 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.302661205 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.46823351 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.131300273 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.323257582 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.316526181 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.441282182 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.003051616 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.468733566 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.546699025 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.645474484 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.022559612 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.588325774 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.170848202 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.400466637 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.969234272 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.807275117 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.346501444 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.495034029 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.156655789 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.399565139 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.432035671 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.224752264 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.64946644 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126102561 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.225291412 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.101401424 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.165945158 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.646428639 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.7244338 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.848190189 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.661607003 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.881768975 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.053770158 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.226390841 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.030908137 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.729550468 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.82043904 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.941080845 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.883047758 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.987858464 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.607209403 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.949390829 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.355635923 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.960965699 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.410998251 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.3991302 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.30314316 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.11785587 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.685023379 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.227211363 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.881022722 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.283372356 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.38940233 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.984520271 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.575662728 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.557485258 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.47031932 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.588046434 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.472181206 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.339669966 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.112447661 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17133151 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.33556315 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.407303768 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.182995296 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.428846743 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.498145979 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 5.405087743 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.415188153 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.437701102 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.106282933 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.562910073 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.539012794 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.388233536 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.556208054 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.534530556 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.75836868 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.598948904 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.401938228 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.460667702 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.499351333 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.969011833 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.891455017 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.431047944 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 1.958996885 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.113600149 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.394820235 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.176003465 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.391026089 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.624195602 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.432843959 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 3.917019687 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.608083602 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.665538896 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.37693661 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.226940165 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.172490204 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.39523167 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.382449827 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.126252771 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.699613075 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.447920741 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.30602572 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.129939281 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.954090464 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.114411388 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.401042819 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.402720627 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.001425783 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.66367595 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.920301166 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.690719949 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.550775249 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.426658604 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.010592315 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.113238376 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079122705 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.151346897 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.502663116 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.627100462 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.334891486 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.583799467 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.388749177 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.116177634 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.494156789 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.945427881 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.429628249 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.719124412 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.472871753 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.498745593 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.419026259 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.468069661 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.243791488 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.291177352 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.455038721 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.113987928 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.411632917 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.509744133 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.522956333 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.545805988 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.170142327 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.61731101 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.452671722 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.986136631 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.34045989 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.498251699 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.668501769 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.380269554 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.986047983 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.335435721 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.996234174 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.08421315 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.391668285 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.448359829 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.171837135 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.130855252 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.401317829 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.402257555 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.367967093 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.470586999 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.694278017 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.954156571 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.244543076 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.675995675 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159829682 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.901687646 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.135717346 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.551575317 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.170111937 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.47963631 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.787719938 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.39448485 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337561055 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.097320182 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.418971341 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.363864151 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.517967883 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.172340603 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.551284679 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.491979679 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.170698891 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.475386573 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203894896 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.963656162 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.117565826 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.154068243 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.170321436 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.095068444 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.131541156 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.921893923 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.228777011 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.181246183 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.249795447 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.572384187 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.113512369 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.17186852 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.823934863 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182635753 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.173492887 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.500237282 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.95276171 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.336103921 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.179894761 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.235358113 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.178230552 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.401598719 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.695670424 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.335364405 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.88136189 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.391092784 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.172028904 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.702283073 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.741302024 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.486691335 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.331503812 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.539950204 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.487430626 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.631829097 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.392421025 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.20438514 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.415687918 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.955090132 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.576230322 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.45722721 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.210563573 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.403208247 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.37827216 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.499974715 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.270190398 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.530203926 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.021455093 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.607685784 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.142741556 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.184917639 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.106999932 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.470826082 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.964250968 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.171725938 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.044014763 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.402733342 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.086982191 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.683916496 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.327977847 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.990069823 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.279055455 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.956605552 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.729472929 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.178822869 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.172909458 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.378582778 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.522032523 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.116279054 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.099327234 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.913127848 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.400520168 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.492264337 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.116114143 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.390407584 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.47064273 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.115343539 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.154279667 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.029021208 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.48240484 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11347158 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.612539449 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.118527682 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.941703561 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.747014039 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.479884509 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.12258292 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.128072359 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.973745156 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.171127056 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.172376944 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.502857654 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.311557876 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.299315963 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.470877962 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.025936403 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.462019049 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.497086412 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.092517099 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.158828593 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.47554338 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.407740553 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.739579155 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.939175259 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.639490842 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.083362005 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.153639971 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.109425539 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338318997 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.223083485 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.236201759 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.542472269 seconds)
  done (took 1777.784379794 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.239954983 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.301741308 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.201943168 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.21388622 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.210291958 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.223431774 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.241358534 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.20586236 seconds)
  done (took 51.008195585 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.566079323 seconds)
    (2/17) benchmarking "4467"...
    done (took 1.643619178 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 4.50885462 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.200468076 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.186464755 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 4.102932968 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.340501719 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.471291888 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.209612944 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 4.025945945 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.253809328 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 5.111986467 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.2052605 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.193254565 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 4.614491607 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.307788918 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.175374573 seconds)
  done (took 81.293348109 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.187201153 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.145162573 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.186341827 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.134390171 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.220995808 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.329941033 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.18235874 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.174242548 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.402400801 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 6.476650978 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.193493486 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.211457385 seconds)
  done (took 79.032117935 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.215446174 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.218073694 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.217587158 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.215495464 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.217441145 seconds)
  done (took 7.255406587 seconds)
done (took 2224.587226056 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.428708376 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.504727968 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.67744578 seconds)
  done (took 4.351029043 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.326170394 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.380808737 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.535431499 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.587942237 seconds)
  done (took 7.013839314 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.434551207 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.545985389 seconds)
  done (took 4.15054616 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.536025382 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.187999991 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.550049991 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.174269722 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.173865907 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.17491947 seconds)
  done (took 19.700649445 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.211425895 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.216927707 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.213610568 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.208516518 seconds)
  done (took 6.022772007 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.171719862 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 2.997586934 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.173130352 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 6.174303238 seconds)
  done (took 22.687671255 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.403147924 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.23790568 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.948277702 seconds)
  done (took 5.788960417 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.821465316 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.318320888 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.804988598 seconds)
  done (took 6.114685169 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.386862469 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.362151786 seconds)
  done (took 5.918952452 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.337136644 seconds)
  done (took 2.507815376 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.021569729 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.497316106 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.693481722 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.751035533 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.84897232 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.410653237 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.519011223 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.46531159 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.60280158 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.662808079 seconds)
  done (took 17.647021349 seconds)
done (took 113.776436498 seconds)
(21/22) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.454444071 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.67732569 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.234698607 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.392033559 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.304692496 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.237614121 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.557308926 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.525352939 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 1.962651667 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 1.962142007 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.40589857 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.303453932 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.555686735 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.665806553 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.556676853 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.665656902 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.289472163 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.45147093 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.004479364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.014092062 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.56973735 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 1.953438313 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.390129743 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 1.963456757 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.300180193 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.243142279 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.4434358 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.677516686 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.009794301 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.45605716 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.254186328 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.017660216 seconds)
  done (took 143.670371603 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.601376203 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.182102079 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.181951833 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.173045198 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.09550204 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.184168098 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.17576985 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.174973495 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.152165364 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.1553861 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.181466603 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.100942693 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.182883035 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.172955206 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.18255376 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.173771698 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.250874477 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.608079647 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.181804685 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.182395527 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.184798619 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.99414893 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.182263622 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.000693931 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.251263756 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.185019543 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.571536766 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.186096243 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.182570823 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.575754313 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.184326421 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.174469053 seconds)
  done (took 180.151033542 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.091242742 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.180389652 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.180897727 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.175515945 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.179750618 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.182086333 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.176126168 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.173105504 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.544061661 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.542005306 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.178660711 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.179323209 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.18001931 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.174468246 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.178151441 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.17335216 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.179539404 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.071690471 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.176880971 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.178799514 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.18038547 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.466047554 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.178479506 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.472142478 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.178799906 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.178858175 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.073178761 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.178539078 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.178614639 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.074347584 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.180598236 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.177810043 seconds)
  done (took 195.799707093 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.417002067 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.219757991 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.153347341 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.833982441 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.184103868 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.212771944 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.831169154 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.420427468 seconds)
  done (took 14.450325658 seconds)
done (took 535.249671507 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.416767385 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.876971711 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.323689392 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.406294473 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.336376163 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.471586499 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.403499506 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.517995938 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.811609611 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.507785805 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.5739396 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.382307902 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.815988184 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.392379274 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.325481536 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.529476537 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.528597056 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.73795449 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.335806473 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.802604677 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.349668225 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.892369011 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.524826884 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.813918326 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.579415866 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.889811755 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.14453339 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.531955698 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.381751412 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.350501662 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.486719605 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.342611058 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.317046951 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.313785936 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.55378638 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.556461472 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.349836858 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.894774458 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.32462479 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.729727264 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.798885595 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.699319435 seconds)
  done (took 73.493547862 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.218326403 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.263611719 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.335757792 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.291872681 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.807700133 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.282877827 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.392728861 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.386012096 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.287948536 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.377694873 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.41271025 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.806313653 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.417251936 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.766453064 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.392492569 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.414206047 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.294282852 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.757720851 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.420261263 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.384895741 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.247893627 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.336809821 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.249272451 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.366780581 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.245082132 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.255393233 seconds)
  done (took 37.601743751 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.252982736 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.364696143 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.43042429 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.094901479 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.412579022 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.170789154 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.392335816 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.320369668 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.676570112 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.266917298 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.287871842 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.332379045 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.365452018 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.451483435 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.793786623 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.282433526 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.396559272 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.353523616 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.377439167 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.125778353 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.514203557 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.294551612 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.397225185 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.996550677 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.802054296 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.435083012 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.239018942 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.686464127 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.748276713 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.323184712 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.325356592 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.376656935 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.525566116 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.439964672 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.326386263 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.240341578 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.234999647 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.29121332 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.947532293 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.359794106 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.392603555 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.876876565 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.498326895 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.674036009 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.722192572 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.316633563 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.584911173 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.299352648 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.312995653 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.695246539 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.49443821 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.421036807 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.342007933 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.373275612 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.307828391 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.455425599 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.376038546 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.542841416 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.236957724 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.514034859 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.306166479 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.495677612 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.381008314 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.731149043 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.437784254 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.381633479 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.018909518 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.088246703 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.497346109 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.671042249 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.811917779 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.282029919 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.245987115 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.28972103 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.370487831 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.611336013 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.564819981 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.429276642 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.543642949 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.37893654 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.260798872 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.695538805 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.427752601 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.475051607 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.259173307 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.224616667 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.310112353 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.509245062 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.374648499 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.623291252 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.681491971 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.551842425 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.398000514 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.223096736 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.150996724 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.600446708 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.219727326 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.228678312 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.424847214 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.682362235 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.286574139 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.022058765 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.758917352 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.881342129 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.346664626 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.236741846 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.53429694 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.724191244 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.545736536 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.212495953 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.96169781 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.921764966 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.775866083 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.40047398 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.212051768 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.663253267 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.304839145 seconds)
  done (took 228.912864502 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.172369803 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.180846725 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.174895321 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.179766743 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.172753147 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.729230599 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.210655335 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.17324061 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.615615729 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.21316062 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.171879303 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.174525551 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.174169088 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.176497562 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 5.653174166 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.038788774 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.867013295 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.174418708 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.172597533 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.17833329 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.823626753 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.175824864 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.175135238 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.178229625 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.174831396 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.175357095 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.177096836 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.268248133 seconds)
  done (took 155.929350582 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.237823235 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.551302443 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.256793305 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.304814706 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.269147326 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.252537058 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.666435559 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.335333605 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.29153381 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.249857075 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.243116252 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.452785333 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.514016838 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.715040272 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.319439644 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.360084748 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.808281962 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.373346096 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.244589295 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.239916263 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.3633009 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.519605152 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.450531757 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.473857699 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.382176231 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.472144671 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.295329064 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.248288321 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.349165994 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.601215666 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.250694094 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.557880032 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.374645273 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.234986316 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.606129819 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.502546157 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.704585188 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.798267903 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.407690827 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.208946358 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.212252331 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.437302021 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.501422734 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.284797885 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.227831948 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.753741211 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.258189932 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.587119293 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.258991808 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.206591293 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.309540378 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.312304205 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.434124067 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.468801947 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.40586007 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.355641143 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.743242892 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.20841149 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.387507256 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.483634648 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.216548262 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.621125486 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.577753574 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.281539886 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.240632597 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.984347338 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.305149734 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.691010606 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.718404152 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.264439734 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.52089414 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.413263093 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.219006925 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.486434941 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.403448621 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.675739925 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.686046255 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.341744819 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.31049908 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.285708348 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.477047462 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.226253001 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.698896135 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.32239716 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.214672096 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.624230453 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.535892678 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.219070151 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.240724273 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.345009949 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.378698135 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.389558998 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.483697846 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.293833296 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 1.991057394 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.485211722 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.534191022 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.255454352 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.340616902 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.228463371 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.323370423 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.412058041 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.221928693 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.48244141 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.644169059 seconds)
  done (took 159.116633309 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.758068352 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.255292352 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.568353302 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.759235678 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.559266795 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.294625949 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.364716224 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.273459494 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.446159139 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.351651778 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.40203308 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.297960501 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.133830242 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.945975405 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.255925492 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.398984857 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.306881621 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.709046425 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.444045543 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.615375577 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.380260349 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.772104568 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.492005107 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.565295374 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.584026177 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.597937476 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.78274235 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.329084935 seconds)
  done (took 46.820918301 seconds)
done (took 703.048380528 seconds)
SAVING RESULT...
DONE!
