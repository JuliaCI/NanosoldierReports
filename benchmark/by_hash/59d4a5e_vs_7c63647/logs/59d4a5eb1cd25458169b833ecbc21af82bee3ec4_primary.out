cset: moving following pidspec: 109330
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.766189001 seconds)
loading group "shootout"... done (took 0.793511467 seconds)
loading group "string"... done (took 0.224991167 seconds)
loading group "linalg"... done (took 3.167326635 seconds)
loading group "parallel"... done (took 0.021040236 seconds)
loading group "find"... done (took 1.168630793 seconds)
loading group "tuple"... done (took 0.705291883 seconds)
loading group "union"... done (took 3.02912706 seconds)
loading group "dates"... done (took 0.153355797 seconds)
loading group "micro"... done (took 0.056100063 seconds)
loading group "simd"... done (took 0.35980603 seconds)
loading group "io"... done (took 1.380250221 seconds)
loading group "random"... done (took 2.349205176 seconds)
loading group "problem"... done (took 1.180102571 seconds)
loading group "array"... done (took 4.559068669 seconds)
loading group "misc"... done (took 0.961632057 seconds)
loading group "scalar"... done (took 3.426261497 seconds)
loading group "sort"... done (took 0.302560922 seconds)
loading group "sparse"... done (took 3.538435351 seconds)
loading group "collection"... done (took 5.959714271 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.543857612 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.072183826 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.257615473 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076387597 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.281694443 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.083048516 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.089258974 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.06985661 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.027915554 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.162612965 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.214816555 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.391744965 seconds)
done (took 5.015289353 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.263385547 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033154317 seconds)
    (2/2) benchmarking "String"...
    done (took 0.126262381 seconds)
  done (took 0.773226566 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.139191076 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.01536878 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022175167 seconds)
  done (took 0.782086809 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020034932 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097901149 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021144812 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.02168239 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021655119 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021065778 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020862977 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020853259 seconds)
  done (took 0.8326753 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028228042 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022670427 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020659933 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022012886 seconds)
  done (took 0.699970178 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022199667 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.082910948 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019817842 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019713226 seconds)
  done (took 0.747342931 seconds)
done (took 4.740539186 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.197665226 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.766849544 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.986605601 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.181877311 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.359378445 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.301369596 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.074898761 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.242879428 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.148775428 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.031253595 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.18071291 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039750384 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.530678442 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.449974973 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028303482 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.144104251 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.562174125 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038942603 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.068366153 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.152896901 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.039904715 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038690302 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043145674 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026520644 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.085488654 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.134716963 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.572969729 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066705796 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026074206 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.134888029 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.02863611 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.030576444 seconds)
  done (took 9.360980853 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.151044424 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.145189753 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023340074 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.057584867 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049445756 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.02451617 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030010667 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022657561 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042313633 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.085396062 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045019434 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.15842319 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021081756 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024199446 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.140527442 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.112223013 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037339476 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.03676528 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022198632 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036210859 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.048424503 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034220075 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035242528 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032459342 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.069343468 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.086479519 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.040664929 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.061549161 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022346494 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034767656 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.04977105 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.061859925 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022436065 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021416611 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064956511 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.039118491 seconds)
  done (took 2.628934917 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.705934128 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.050713831 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.139836708 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.130739359 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.062013225 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.04860489 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.18215356 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078269819 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054847481 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023629647 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.209993518 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.629281708 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.170605181 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.026008186 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028116935 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.184222836 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.873900568 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.922246105 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023377661 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023573544 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.136358406 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02595338 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.180156315 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022804793 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.137146449 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.835511755 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025435372 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024036774 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.053048884 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.142531346 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.02070596 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.096158198 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049702999 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024858985 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.579084626 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021468365 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019596182 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.040347514 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050654629 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021906251 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022827225 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.033662197 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021046119 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071851457 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035163714 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524461647 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024834288 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.693048418 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.840230745 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.030492406 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027469788 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058204027 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019711129 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02319502 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.596458856 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.110225263 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.0225298 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.24235283 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025169659 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024173817 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024385957 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057283117 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02312853 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024373886 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026501112 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040629978 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.043481555 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032439394 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042078992 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021633558 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02253873 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021075011 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.383424372 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029413469 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025152552 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.02063085 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027054507 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022817847 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022264297 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.069317199 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.049137015 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046851401 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026049162 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023066433 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022266598 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.495750662 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.032607306 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02480867 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023945323 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.503836243 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020201714 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022163997 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023697262 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043336734 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022415963 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019411009 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056285121 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024186796 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.12814039 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.539084629 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023316138 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019673092 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.516771415 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023810202 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.052356891 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075997799 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022159538 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.059435153 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022478698 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019766567 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026075379 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.01973183 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023987178 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020796891 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021618387 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020728154 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023220688 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023512896 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022402803 seconds)
  done (took 19.793287165 seconds)
done (took 34.096087296 seconds)
(4/20) benchmarking "parallel"...
done (took 0.744018011 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.211339948 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048594656 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019218141 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.161867645 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043445307 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.134586976 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.175266404 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.126589091 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.045116469 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.044939445 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045207883 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.181157916 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.192910533 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.046261217 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.119742184 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.19265351 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.046532904 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019645878 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.045499727 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046768138 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.046466401 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019689616 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.045618786 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046382402 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.119253301 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.046772852 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019636898 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.122244829 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047892493 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.123943032 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.047405584 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046480976 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047437314 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.121724351 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.049047304 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.121634951 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019916333 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.048784707 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.048954928 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.049801373 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049924565 seconds)
  done (took 3.953414169 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045172435 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037180237 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039650053 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017799841 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027288543 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037217744 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017774406 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036762783 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040848108 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037255795 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037200257 seconds)
  done (took 1.129693006 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.040002427 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038370923 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039640692 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017717497 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029037806 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038112802 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017650197 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037581485 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040374295 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038040936 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038067375 seconds)
  done (took 1.070678038 seconds)
done (took 6.82868395 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.153931414 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.122333954 seconds)
  done (took 0.962153596 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.559078288 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.220940349 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.131836225 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.257145943 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.125104743 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.156828807 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.356285214 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.162311086 seconds)
  done (took 6.710854946 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.074892911 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.142713488 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.02385588 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022315195 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022595573 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022692242 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024275232 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022962154 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022190111 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024879521 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024435424 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022454665 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023207934 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024527856 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022499596 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022735724 seconds)
  done (took 1.382196769 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028466846 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.02535725 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026279125 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016857818 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.02737064 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025895275 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026914588 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027562325 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026631738 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026489254 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024286388 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.0271623 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026034631 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.02474635 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027152837 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016871553 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02714695 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.02650359 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028616549 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.02768341 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026525648 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024260842 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028249705 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025520442 seconds)
  done (took 1.330424575 seconds)
done (took 11.081922443 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.13931248 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029107822 seconds)
  done (took 0.866494036 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.128759841 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.127021672 seconds)
  done (took 0.961284657 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028477623 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015772531 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031958336 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023921438 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015888182 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015701674 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031013086 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015946056 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015789903 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015898266 seconds)
  done (took 0.918753626 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019079839 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022827984 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020861911 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018984052 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020584079 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016735642 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018967244 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017093818 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022520231 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016112078 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019853878 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037359704 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019334763 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037709742 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019211078 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019793803 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021204225 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019075583 seconds)
  done (took 1.094905542 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017459973 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016658828 seconds)
  done (took 0.743971904 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020335436 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016684022 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018474192 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018228557 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016270447 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.01572199 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016211197 seconds)
  done (took 0.825777909 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.386204256 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.086374923 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.311603845 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024061386 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.037512462 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.225389768 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019402856 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023704939 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.02360763 seconds)
  done (took 1.844200225 seconds)
done (took 7.96545152 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040070661 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141555359 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.148214068 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.451747479 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033748276 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022155971 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.05003258 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.229918375 seconds)
done (took 1.837409975 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.489209674 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.254383378 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.192169524 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023440743 seconds)
  done (took 2.182951186 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.31072327 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.141630258 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.030053291 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022297549 seconds)
  done (took 1.231655329 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021632519 seconds)
    (2/2) benchmarking "read"...
    done (took 0.02683334 seconds)
  done (took 0.772238264 seconds)
done (took 5.40037414 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029893126 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016538733 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022910149 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018066813 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017776201 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.01722144 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.01719022 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018047635 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016282849 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018237209 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.01823265 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01820724 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01790241 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017878317 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017498449 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018240183 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016307387 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017968311 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017984847 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017957558 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016256104 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018253342 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017431492 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017938826 seconds)
  done (took 1.150769963 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035715425 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020676978 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021257348 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021097124 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021644089 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.02120595 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021069644 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020252764 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.02112812 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019999156 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02178698 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021790816 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020068869 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021902918 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020175294 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021862118 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021455015 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020579969 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020436503 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021818212 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021276566 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020645749 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021772445 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021300315 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021734815 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021741163 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020162012 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.02057724 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021308921 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021732703 seconds)
  done (took 1.37176678 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022586448 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014889053 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015145138 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024990291 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014827134 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014973077 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015409919 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01456288 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.0149474 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015746996 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015247701 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014652018 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015505299 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014657457 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014684763 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015262704 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019784905 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035189113 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015063106 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014774174 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019333144 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015035584 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014776549 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014792191 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015295976 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014850107 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014720029 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015104288 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014854279 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015443512 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014803029 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019242744 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020842765 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015332861 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024852897 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.0197501 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015281385 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021319934 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015657383 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014672065 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014701162 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014694804 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014831338 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014740045 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025037885 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015000379 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015891426 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015327908 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.0149661 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014621721 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014736555 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016313031 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020392076 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016127514 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014794999 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.01613884 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014820643 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015601254 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014946679 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014801795 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014830455 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018908858 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016345406 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.01562654 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.036098969 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016316079 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025244648 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015025991 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015419896 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.01901002 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015468846 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.034107773 seconds)
  done (took 1.966039755 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.02747574 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025462408 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033926609 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024615949 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018269656 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01567039 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018645113 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015738033 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025022842 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019321518 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015813895 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018866947 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025061902 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019344903 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016869259 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.02494137 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019307589 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01854532 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015803002 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019203368 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016879607 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018885411 seconds)
  done (took 1.18117148 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.100011085 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020979681 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062803721 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.024146882 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.02309116 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024394707 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021004344 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020985488 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021150443 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021713324 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021715149 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021090085 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023159698 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021732743 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02172688 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021540424 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021149155 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021515568 seconds)
  done (took 1.237873209 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033438224 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020975565 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047676445 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020535825 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020682797 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020299969 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024000052 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024143097 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020430555 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020937934 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024417077 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020495575 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020509835 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020873896 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020505054 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020934813 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020491784 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020923429 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.02435785 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024386049 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024394867 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024347661 seconds)
  done (took 1.245466148 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034645473 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020015577 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.036212923 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021412987 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015256719 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.01528447 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021447636 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.020181104 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021301038 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.01962241 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020186105 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01533924 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022346073 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020362058 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022507317 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020348529 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019889805 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020390748 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019876836 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015391647 seconds)
  done (took 1.146658432 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.132269673 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017349218 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017124012 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021454847 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01703798 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017024416 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021597107 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017231289 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017221913 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.041054203 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017263933 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.01719339 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.02185074 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020030625 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017254023 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021899349 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02178261 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021724411 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017271732 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017224759 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.040816507 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017323116 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022113266 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01745493 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017422524 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.01738854 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017444314 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02042365 seconds)
  done (took 1.407766047 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0374317 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.01770006 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015499963 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019310591 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.01929987 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.031552442 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019273945 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019068131 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017625145 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015562796 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017713957 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017594928 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017660986 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.027899122 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017575374 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.01772093 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.027824264 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.01940528 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.031743806 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.031708701 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017685669 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027661267 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.01773323 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015578318 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.031786419 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017727472 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019675176 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020544188 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0179573 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015728001 seconds)
  done (took 1.370738057 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029348795 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026029239 seconds)
  done (took 0.78274209 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018325139 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032931336 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014691054 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027840973 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023483753 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018898128 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023448595 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023376773 seconds)
  done (took 0.904445167 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.127014064 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.150037024 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016678718 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017127529 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.123920241 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.082330842 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.134981072 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028148737 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030142388 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019492227 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016715867 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.135885193 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016407771 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029847288 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017849974 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025965058 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023744469 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034719791 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029441759 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015402617 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029164046 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017182874 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016311409 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017226745 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017484628 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023266304 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032252073 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028864853 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024796933 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014724861 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035805221 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015583323 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016277623 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024877348 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.126903136 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015783532 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053004031 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015821205 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020204869 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015462264 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027620102 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036471803 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029874553 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033616585 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017097936 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017530067 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015472322 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017318337 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019624379 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024839205 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015752321 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023082717 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015385482 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017078187 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026218326 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015869593 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02052754 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024952095 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029334906 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026147194 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028066813 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031200936 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024482567 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024448446 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016505972 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035711887 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017387913 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028952635 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.03048523 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016956487 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028895832 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015540256 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014844624 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015713789 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049387032 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017142521 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016600213 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015831893 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015902515 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017092583 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025278954 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020604891 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023081349 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018809548 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031721791 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024857107 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015472963 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023140994 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034042273 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019724297 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015827072 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032946078 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.01975277 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015534597 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.03389309 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026127007 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.01736257 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016409019 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019648988 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029265835 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017089384 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014845019 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02422858 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017350973 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.127907283 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021183106 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024322437 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016009341 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026606879 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022836399 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017758764 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015254909 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020959113 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016991703 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015256071 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02565866 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016264789 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031339332 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.02307793 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030755937 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031248294 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026848342 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032412648 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016010996 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015220298 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034990856 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025625476 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017441049 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034716782 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016079486 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026761343 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016169586 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017673512 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025544169 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015514944 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017900232 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016394424 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022784542 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017742967 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017911885 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022143579 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024688317 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028692009 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.01735634 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02502955 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016453636 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032510927 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026151208 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021249177 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019974789 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017200017 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028777226 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023314049 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.02566538 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016208473 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017166039 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016379443 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027374112 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025959782 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018177023 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026320576 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021210287 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017140515 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016402929 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017419017 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020282572 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020033297 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016977335 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024134221 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025177125 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030992155 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024408358 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025617404 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015765431 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016212053 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018264594 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016219122 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021179662 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025733498 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032258827 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028452286 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038136737 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016553906 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026189562 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018236071 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033933246 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02980433 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017513295 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021613133 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015562999 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018393071 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.02597847 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028201625 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031141703 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031602979 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021482069 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021287781 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016336571 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031929969 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016932149 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024959273 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02568006 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023233527 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016345288 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018436911 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025653016 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021339499 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017552388 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032596965 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.02476436 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016376816 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030923507 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016771006 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027408247 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016367863 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020283802 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021903816 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.01861011 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026142499 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032042005 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015579221 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.0168268 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032446941 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018470693 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018396415 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024512519 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031962079 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021434365 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024395545 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027351379 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027033715 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.170713159 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.025993305 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016378999 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.024785723 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018217852 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027184513 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015425336 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033415987 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014702187 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030612102 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016004037 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026295293 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015765625 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02464112 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.015994612 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032171071 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.016638537 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.01602728 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.026748218 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014525284 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024279669 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015122571 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020746503 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022155387 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024366062 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.016759128 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024516697 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.016664209 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024198476 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.02029539 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.023771618 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024274884 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020184439 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015030324 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023391514 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025801441 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023302585 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.016531951 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016549154 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015581808 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024379392 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016563491 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016113547 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023378064 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020262294 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021348438 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016547814 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016699042 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016540812 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023531726 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024368909 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03285683 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023640604 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022556307 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024173178 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015063407 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030508249 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015086971 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022548303 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014401302 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021423412 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024100553 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015313614 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033748237 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016471716 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022873611 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026751181 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023546967 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019263987 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032730154 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017980702 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023413962 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022968823 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.02007318 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022166645 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016632251 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023524317 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024405082 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.02542048 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015813719 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022564292 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024018241 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016646586 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022945052 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016518942 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023488498 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016917824 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014744285 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020285718 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026412949 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020668184 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020871801 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015787426 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014773389 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015739844 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022684688 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020569548 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.02406641 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030889881 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014792419 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016255872 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015363326 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019488518 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033742609 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025160354 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023516707 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020697812 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015009874 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016969795 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017165108 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015701734 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018645355 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015061389 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015603692 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026269882 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017252171 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020562904 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015969532 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01677318 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025617075 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020027485 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016096401 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022785787 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015550314 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021174793 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015100104 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017255012 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020669796 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015474445 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019786788 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026149662 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032307493 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022759553 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024527631 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016626159 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02363139 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031277217 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02418885 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016605242 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.025056693 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015397143 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034914784 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025043096 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024241826 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02543882 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016605509 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032829427 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020652533 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.026255327 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031799737 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017146187 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025062662 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016063641 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032149494 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020985096 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016072975 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024796199 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02390027 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022438978 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028087573 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016969071 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024785213 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021625193 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020119033 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017953675 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017918769 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024981529 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032649038 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017085121 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022274221 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024191326 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024579886 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021103991 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028500547 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024356315 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017221513 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017907266 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020102336 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016963825 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.02846986 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016500126 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02103197 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020959233 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016001519 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023213142 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032867591 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025507865 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025738423 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016276212 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015648187 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034848555 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.02029686 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019977936 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024477127 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026217029 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028885942 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025719397 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033677297 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016819922 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022608656 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028754771 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.01725918 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016180129 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020348445 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018080676 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025505791 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026263108 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023761219 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018391811 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023532758 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029978948 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017871777 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021364567 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.02308833 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017372986 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026970536 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024394936 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024949938 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017987516 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016191322 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019954704 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025163715 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023791704 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025327825 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017346882 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025653121 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030819032 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023850016 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020018311 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016173658 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019911763 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025412474 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023404421 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016294069 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021376477 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020218116 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025943956 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025917749 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021185053 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016234767 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033862646 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025057952 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025450646 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018218582 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018433048 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016777051 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016324215 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027863662 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016409583 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018206333 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021526939 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018406189 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.035146472 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024675033 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032668957 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017492996 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021230871 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01634052 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026200153 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021419742 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016451681 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027035411 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015838328 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032499985 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028750812 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024661059 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016420302 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.022134692 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025268276 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.03185335 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026266808 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025420273 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020232353 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026198462 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.168086813 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026434949 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015329637 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014635998 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025253873 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02395267 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027270186 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015249755 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025291521 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.016868842 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023580402 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023764031 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.016657232 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.016666416 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016620065 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024649264 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020315899 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.02440023 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020378107 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.031881114 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.015962941 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026004323 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024140092 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.025865677 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029044794 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026961957 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023498394 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015612805 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022605291 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023440984 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016092427 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020541673 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.017933048 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036586019 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.016590991 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016546773 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028824581 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021940416 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015203504 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021672912 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020223109 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.02492601 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015867554 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025272521 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.019755019 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015838789 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020152495 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020171468 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014371198 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.015007543 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015314738 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024552231 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.020028555 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.01520347 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033758669 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016346678 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023839577 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025668086 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021991153 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016372595 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014428046 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015849115 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028341333 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030331464 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019267936 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023586652 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016602066 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024155292 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014456242 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023677435 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022942691 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023586363 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015051734 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01534353 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029924995 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03030894 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020141147 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031571086 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023961756 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016573255 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036557401 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024045627 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016014889 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025753636 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017056121 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014762402 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014616447 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016592823 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026732616 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015365114 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017530642 seconds)
  done (took 15.050719032 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.059323913 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016378607 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015098501 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.01501525 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021879165 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016206137 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01502527 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016176864 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016194036 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017241277 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015151716 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015183782 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020559234 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030034721 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022943538 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018769722 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015201136 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01638709 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015202145 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016345227 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021128632 seconds)
  done (took 1.197375297 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.019640145 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019531258 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018904896 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019041818 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018273264 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015335005 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018674409 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015282967 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018978263 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015642398 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019292927 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015465621 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.01578363 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015765846 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015791001 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016889823 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019310319 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018508516 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015427886 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018907613 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016850023 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018909185 seconds)
  done (took 1.151300058 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01794246 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01588021 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023803013 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014721637 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014674699 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017453641 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014685681 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.01946575 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019444265 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019445758 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023634527 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015416077 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014574069 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020640316 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014551933 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.01529448 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.058638643 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015613074 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015688196 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014929591 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017097653 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024023767 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014957846 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.01511919 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019561848 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017605209 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014912739 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017139652 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.01542474 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019614385 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015681369 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014768059 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023730312 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022987339 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019591475 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019529705 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016097634 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015559966 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014931074 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014948748 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023130891 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016069172 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015151292 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015994371 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023885125 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015096739 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014913952 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023894864 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014879491 seconds)
  done (took 1.668374481 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028108545 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067974274 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021244002 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051011205 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026770873 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020361573 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020972604 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053954799 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.0162518 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016646249 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027854055 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027910506 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017693645 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018845563 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022144654 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017589405 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018179323 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016913182 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019804027 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.01726667 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019997881 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.02242827 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027308707 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027795263 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018710495 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017162492 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017442806 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019005181 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.027544559 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020652663 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019182228 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019746109 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027809735 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.021600808 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017396153 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.0175887 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028349166 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018018315 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017800041 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.01634239 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017534587 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018995572 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022362856 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028496586 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017950397 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022929246 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.01802537 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016136387 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028156651 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017847918 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021466423 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029002128 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.01897792 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018279966 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019314205 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028135844 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018092763 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016871979 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018186318 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027843069 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016413764 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018809663 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028666268 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017587589 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021061151 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028840835 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.023107281 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018850556 seconds)
  done (took 2.435905793 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024791026 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.05015133 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028786044 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028754547 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024349323 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024395945 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024623695 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024696498 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024596031 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02736675 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024775828 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.166421961 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02186531 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026347253 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024874441 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024794805 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024832007 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024755159 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.025056036 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024955927 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.025108709 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029626553 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.02501597 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029685634 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029469849 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021870309 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024923182 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.025032062 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029814774 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.025116902 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.02942991 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.02506312 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025134195 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029888258 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029516158 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.025002979 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015788106 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024856721 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025110107 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025123902 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021824501 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.030097822 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025244664 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02200297 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025410525 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025200997 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030215719 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029909896 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027070081 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028273201 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025374635 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030297616 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025174438 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025606841 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030459497 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.033549698 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030434008 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0305339 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025579127 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030444777 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030521689 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.033814784 seconds)
  done (took 2.5905724 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030107442 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02078578 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033579064 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014925635 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014822972 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023723182 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014785958 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014782124 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02065347 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020658657 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022064091 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02402697 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025904321 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022189969 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.024029564 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02590061 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024033906 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024005819 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020764698 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.0240004 seconds)
  done (took 1.23183635 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018777776 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020347974 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015736147 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.031177276 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.01563992 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022886489 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015597999 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015563504 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015623213 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015601708 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020089791 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02013484 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015785448 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023573593 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019194989 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02316445 seconds)
  done (took 1.0794623 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020068101 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023913777 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.127386144 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.01619979 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017931619 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.0154614 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016315129 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.0153382 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017621081 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.02894544 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016389255 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018437389 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016442931 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015099362 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015704077 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018384144 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017573679 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016438212 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016417376 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.128317883 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024586781 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016957779 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018530463 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017075687 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.01821149 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024727899 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017911876 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018340081 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.0165116 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.01874383 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018324697 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027219732 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018372169 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017087763 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015310537 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016250514 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016676848 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018794454 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018698825 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016683489 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015512743 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018446204 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016701078 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017012075 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017792188 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018687961 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017824614 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.02651956 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016468176 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018331282 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016653527 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017710484 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016925591 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027439874 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018596698 seconds)
  done (took 2.004137128 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034183389 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020578104 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01487926 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014774712 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020122953 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020806051 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020174379 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020366101 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.02071253 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014774724 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020727387 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.01974941 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020799636 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020460015 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020971859 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020445869 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014897171 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020641472 seconds)
  done (took 1.141903838 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02404073 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020553838 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020717668 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.01671992 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016663104 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020540731 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015097358 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.01625607 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016253668 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016781673 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016879309 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016437273 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01644311 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016434488 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020341694 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016849084 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016388422 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01538988 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016867288 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015233666 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020864178 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015395367 seconds)
  done (took 1.159587562 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.189641461 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.149006859 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038971591 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034475979 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026505578 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050848403 seconds)
  done (took 1.261981575 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.051306111 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052586607 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020316633 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020207641 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02419011 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022687223 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022620072 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02271092 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025655914 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028608776 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023005668 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026200529 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025929488 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02770742 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024397018 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024507765 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023023407 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023004679 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020442039 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030177882 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02307723 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02632903 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023353574 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023111404 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023349123 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028039814 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026290489 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029081038 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023192858 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026565386 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024877833 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023374536 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026617892 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029019364 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02057597 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026361466 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02337375 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030921905 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024882706 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028077151 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020449095 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02492477 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026421769 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026254905 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0268334 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023711067 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026467315 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023560548 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023654201 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034812627 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025222473 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028303844 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025081875 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026911664 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026680662 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034848158 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029474097 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028464027 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025253746 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029413936 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028839698 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025566998 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028783792 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029788978 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025464663 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028837886 seconds)
  done (took 2.532669613 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059475095 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020661492 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02282304 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028052177 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026920439 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02258939 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022819448 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022958459 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02291978 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020904218 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058446015 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023152915 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027501494 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027562422 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023055008 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022835281 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022955373 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.143219336 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021476132 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033965103 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023371034 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027979175 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028038323 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027921268 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029012363 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024902771 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023331876 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023253289 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02320041 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023118233 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026060606 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0233174 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027916636 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020769197 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027894604 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023361576 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023179772 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026108443 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023203192 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024862059 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028044297 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030786168 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023488534 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023398606 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029407669 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023480253 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023467115 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020994021 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023462716 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021050149 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029284061 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029354872 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029260837 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028419338 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023599883 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023584841 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023545141 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023545246 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023649025 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025158368 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028310832 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023441931 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035216796 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023729234 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023704394 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028797373 seconds)
  done (took 2.635849174 seconds)
done (took 51.624414456 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.213142917 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.175192846 seconds)
  done (took 1.151708968 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.138887297 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.13590824 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.164134611 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023550536 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.080955193 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174110824 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.12541734 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025977695 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023845006 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.02523501 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023417783 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.024880915 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025029572 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023331387 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085989737 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025950565 seconds)
  done (took 1.910523286 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.074668239 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.241337423 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.05848968 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022554873 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105075616 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028650221 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024144497 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028074171 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.02854084 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022856213 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071236351 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035536744 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.02717474 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028120862 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024029719 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027233794 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027982695 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.02851006 seconds)
  done (took 1.686147267 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.068878152 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033036388 seconds)
  done (took 0.883607767 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.125146331 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.061991258 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.10291358 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.308443875 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.094445102 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.096837631 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.1006523 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.096375902 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.067812416 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093566963 seconds)
  done (took 1.923282981 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.06110124 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057318104 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.284875956 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.055051387 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034164985 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029279142 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029123128 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030715365 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029535552 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028975592 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.074050865 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027485653 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024105071 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.070847894 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049667106 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.060223314 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023375123 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029919852 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032246058 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023273562 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028032236 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.030893659 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.133111945 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.0304249 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.051827819 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027801896 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.02938124 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028739822 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028647353 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030447297 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030902678 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054013159 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.031772503 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037035795 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028638245 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.049924193 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024210302 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.050629082 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026990818 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024205851 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027631081 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031015117 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024817214 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030528435 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029859813 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030106171 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031322653 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023491613 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029874381 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.02725028 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024428049 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028638708 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028508958 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029637761 seconds)
  done (took 3.022092614 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.077761292 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066025918 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023780091 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07373224 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064998178 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023826414 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079788832 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060043582 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078533333 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023359045 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023056379 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023086118 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030787706 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035248016 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075845772 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069142821 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02517013 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023730359 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.067980896 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068944519 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022638342 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.080103051 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070710439 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.067812717 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022310493 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023912335 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.02253707 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023285777 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031437015 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030811761 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023057174 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033889201 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035213271 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.03046665 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022400955 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022715845 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022647855 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031413979 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032848877 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032660845 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029815606 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022305762 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022640054 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023271253 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023755524 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022194821 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032765041 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030790394 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032603795 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023186158 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023270841 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022517726 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023527235 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030281036 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029143511 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030772423 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033904126 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023069691 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023110881 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024541737 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034795486 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031563836 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.03152592 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024134379 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03269305 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02302344 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033855005 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036638131 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022913949 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023600485 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023148417 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0231611 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023495451 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029995909 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030025295 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023544544 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023443565 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022809837 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.03175258 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030171472 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022875282 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032126868 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022504194 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023154186 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023585169 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023753673 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033110426 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031459747 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023670903 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023159231 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023233561 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023153909 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022440163 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.032740545 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032356778 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032561183 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.034548612 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024117431 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.03529756 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032742751 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024167663 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031658789 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023734787 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024001988 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024014268 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031689889 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031314275 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033027257 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023679547 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023262402 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032461719 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035488514 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023406861 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.03122673 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034088493 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031745455 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022896451 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034614913 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023413996 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034483157 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023807853 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034493891 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024009898 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032372983 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023956355 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023065634 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02380102 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.035815065 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024357344 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023746905 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024253111 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023748193 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032387134 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036658079 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024450533 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032860031 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032611323 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024344602 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034798362 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023944509 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034836748 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024037315 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024269109 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023040986 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037149856 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023665648 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024170313 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023876729 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.03464237 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023715263 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034421635 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031671195 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023303003 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035873966 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034246188 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031727704 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034785046 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02468226 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024037112 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02360747 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023984424 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.034994208 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036717711 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024878368 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024008551 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031376926 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035259072 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023327135 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031757308 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031696655 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032141238 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024086187 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024004021 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.0353413 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.037551303 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.03236052 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.035331158 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033225157 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023782843 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.031790484 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03535903 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023845579 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038765082 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023837953 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.035589938 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.035729731 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031182567 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035443106 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.036712729 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.034639593 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.0342362 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.036502277 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023347375 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023702392 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.032498255 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023731716 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023943948 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.032072962 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024501378 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024621952 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.038956423 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023950363 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.035607023 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.023305559 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.033102973 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023230186 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024423422 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037526089 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023830281 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024420699 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032742705 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024036885 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.031825034 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034959576 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.031873522 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02371341 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024398476 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.036611814 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.035537506 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023827009 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023671117 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024463193 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.035292703 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.034604662 seconds)
  done (took 7.763753469 seconds)
done (took 19.130379238 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.162998862 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.073186075 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.157840582 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.092038019 seconds)
  done (took 1.267196998 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.057380553 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019504505 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.144527034 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.155487382 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019619632 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.138204819 seconds)
  done (took 1.335874025 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.213308996 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.139641367 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.141772705 seconds)
  done (took 1.298519788 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.137939662 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.284355973 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.557665053 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.132262497 seconds)
  done (took 1.922938929 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.175798441 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.167078378 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.031012877 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.183409362 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038057137 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015815685 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.103027183 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022372374 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.05235972 seconds)
  done (took 1.651771634 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.096064972 seconds)
done (took 8.499653451 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.180241365 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.140769099 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032731594 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026880514 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.132565876 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.132849135 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.138775978 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029212076 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.129624796 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.301992064 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.162180688 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047630701 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.162711385 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.043142008 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.260138835 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031033291 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028795571 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024296898 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.144511091 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.126417145 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.241141554 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027988703 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.093402692 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.02999574 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104209638 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.078095454 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.169013027 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.293685766 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.276670146 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030499125 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.128067107 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042584277 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.120045142 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.132241772 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.136476298 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048587437 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019799045 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.242873592 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111981436 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.30679916 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.151916438 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026465961 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142030628 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024539635 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019309388 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.144107231 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032853092 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025969345 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043415383 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.026005328 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.04124408 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.026099742 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.141458907 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023517058 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.091939062 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.142416104 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.16428814 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.097917333 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.02531183 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.038882684 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029273766 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.153759318 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038904524 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025400001 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031725328 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019999277 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.139788579 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039382111 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.02035223 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.03029953 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028185847 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.113356763 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.157299182 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064474668 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031402057 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.11885247 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095673178 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047958551 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.04890698 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029371017 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019512105 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.169171473 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025216557 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038206047 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026164906 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052687832 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019846313 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035443721 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.156922865 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151102884 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.087187313 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020880597 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.233918943 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021969752 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.201267905 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020961974 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019726868 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.164004545 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019419135 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019651022 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029014975 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.027804621 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021174872 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.149469955 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.10206001 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027175159 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025865759 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.019652802 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024890683 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020539562 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019669025 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019430965 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.093829605 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.034649002 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.018931616 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106533277 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.125495836 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030388665 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037043996 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.083448345 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022359854 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027904132 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026218098 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.122811967 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027122655 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.132409783 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.02081038 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.04189212 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.11853345 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.09206689 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.105258675 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019305499 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.154136779 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029143242 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019113144 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.02617277 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046623593 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028718353 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.034512444 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027371686 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.153854301 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030137573 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024584349 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.118727944 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018760599 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.10998756 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.092682105 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.12709695 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024233334 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.0296661 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091443268 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042672403 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.047737681 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041928065 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023519371 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019493975 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019239539 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033853484 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018655342 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019458107 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033357611 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025534786 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.018959756 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.239855985 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.02924948 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023693158 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.261917263 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031319296 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.09892801 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041112105 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020048016 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.104114941 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021428217 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039974548 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081804465 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019988266 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.094916136 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020226368 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019845972 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027024464 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021396669 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028603103 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032771426 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020354645 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033572791 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027263843 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019746313 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.103995324 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021518703 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.168940356 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.10323719 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.115378905 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019953168 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037810301 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019551288 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.133814247 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.01988086 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067692818 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.114638868 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.036081626 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.039886064 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.02085646 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092752407 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034776115 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019410013 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.100280575 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.128361585 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098258397 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026960611 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.245103828 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028531075 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020146448 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026985735 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02791571 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020321156 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.094995734 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024228323 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019267399 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019520374 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021406576 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018902827 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045356613 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019108143 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.02707828 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019356943 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022180462 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021405803 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018927904 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027387225 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.095482593 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.12996182 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.02550865 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039437883 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032749289 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031111992 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.067077926 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.026468223 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.141523566 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019322467 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.0291704 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042143169 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019586203 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024678958 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019714776 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.03899396 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023106727 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021205307 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028306881 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020217316 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020117222 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.02001683 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020206851 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028266847 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021697136 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019676407 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.01964474 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019871748 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.02450277 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025096994 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030576444 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039810062 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.478915704 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022166313 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022340818 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020102775 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019954176 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020457156 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021726256 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.02006464 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022129894 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020358968 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019793296 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049466786 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025153551 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.02080605 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042639583 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020017085 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029548222 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.129459795 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036925755 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025078515 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019579276 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.271627724 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.110407084 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043174078 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041121169 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.18650534 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031527753 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020053706 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020297942 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019071441 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.0466705 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.024216322 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019985574 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019006306 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019236305 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066596712 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.02752469 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019227584 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027472038 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019294401 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019593571 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046678424 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020411441 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019343492 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038286795 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031827956 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.096277747 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030550014 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022192588 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.069057682 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018696426 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019339633 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019586537 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.11047777 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032046759 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020464212 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019324135 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026427215 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027860503 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070898672 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.02493351 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022139038 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027005869 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018631982 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019536766 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043899027 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.046750309 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020404162 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.022747953 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019111675 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.01948581 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092135668 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.026751026 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023746446 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.101269744 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021182623 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.026923083 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.018606148 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.481310014 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023863265 seconds)
  done (took 22.016853408 seconds)
done (took 22.836518602 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.165153178 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033682483 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032638689 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027959431 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032032537 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032001068 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033071142 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028710382 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031793667 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031182384 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.142781733 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019256816 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026916067 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034392296 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027985367 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035430371 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031763042 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.03467523 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019877381 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034886418 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030102117 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032629156 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028285896 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.034356035 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019905681 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027908475 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.162618937 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.03831799 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023256917 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029708347 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.02722752 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.033282756 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027302106 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026901892 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028974686 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024916656 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029694548 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026122538 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.158024954 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025232742 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.019966124 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032513842 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026768965 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027380961 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028259077 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.0316148 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024914517 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033230121 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019402912 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032466458 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.157631958 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024093804 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.02326557 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.02805 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024926323 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028856863 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.023012208 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031174112 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024983609 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.03184398 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027784466 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027387447 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019325811 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028050353 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026974884 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027175252 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018480837 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024039826 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.01936827 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019331263 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018852886 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028021781 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026327445 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024492726 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.01887492 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019285517 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019052385 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031839459 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026641372 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028282404 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019806295 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024987554 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024563013 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019847891 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02406144 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031335371 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018903689 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019830541 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.01890782 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031161039 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.02609795 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019356633 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031432125 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023958321 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023695097 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019470299 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019002754 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023784602 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027464874 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.01939414 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018594631 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023943919 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024699711 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028165744 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019747564 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023886294 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023728697 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018639773 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028129598 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026898766 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028501859 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032510492 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028071391 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030710753 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019880745 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.01849517 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029257427 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019685207 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024056248 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027495868 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024867903 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027359891 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019884607 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018921988 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023936122 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025445703 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019818149 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019845665 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019747521 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028271219 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026980974 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018633896 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019470849 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.02845828 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028301787 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019097033 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.01903946 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028305735 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020005893 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025625525 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02491348 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028377447 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019373747 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019816618 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018911742 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019391016 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018991634 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025071936 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024171055 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020026002 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028248236 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026886825 seconds)
done (took 5.474625129 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034644046 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.062971592 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.177473 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.140654823 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032748625 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.02053375 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024567509 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.039908841 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023245857 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.044931052 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044987312 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041449156 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.164431836 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018752878 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019746119 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020621441 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018301895 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031802612 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.146259546 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043455791 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062443555 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019557464 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036479124 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039944796 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.032801 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.03874958 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021009152 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.02067093 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022561291 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037410688 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045848031 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019618407 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020822801 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.03959464 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.03623731 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028883105 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020519382 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026875659 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020623679 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019763396 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.02165224 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038484196 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026860515 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027163028 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021070052 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020521849 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.02033707 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028021709 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034204909 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026305994 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.03258299 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.037093093 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021815889 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020234262 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018636584 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027756961 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020226587 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020492563 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020483199 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019675377 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020510603 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022607919 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.02580824 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030709185 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023928077 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027636982 seconds)
  done (took 3.295402534 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.038383343 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.04888397 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033796183 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034034901 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019310952 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.01991059 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019935365 seconds)
  done (took 1.125519727 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06723815 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.138774398 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.146014563 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.14669834 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.157863498 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.144477714 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032739267 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.04951715 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.01945805 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.158678161 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.15499966 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.150125911 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.02401429 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032519938 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052517264 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.153300608 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.0329292 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027368114 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.144644082 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.150915868 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025066889 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.050646193 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032024622 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.02104713 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.148253513 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.141125018 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023951389 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021115825 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023110796 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020403666 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020427325 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043306448 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.141027517 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035361521 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021467385 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.01952394 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.138696563 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021742397 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.141543464 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027844792 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.141626099 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022960338 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023076008 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020755168 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02180327 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.145327408 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021871842 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020624278 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020170281 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.144102309 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.019991628 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.142253451 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023476291 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025942141 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027624265 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027053733 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027660566 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021022459 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.145712278 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030728225 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022338493 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.153542921 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.152857977 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.14278033 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.153591234 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029513299 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.143371929 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.141888134 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020580667 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028472111 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021120353 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.153844797 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024590824 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023341008 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.026218979 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027922098 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.160310461 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.161042528 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.161782126 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035351431 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.02350499 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021270117 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.158873865 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.162160271 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026718496 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021131993 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022071705 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037024485 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046274883 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.02323445 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025780561 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021088623 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031420051 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023502457 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023568095 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.155443156 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021188634 seconds)
  done (took 7.701321049 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028072811 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021261565 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020697229 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021060084 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021220749 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021062405 seconds)
  done (took 1.138632885 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.047863097 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021517964 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.033199091 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021323099 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043104559 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.14309962 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.143226249 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022531251 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037169329 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032975451 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.143381057 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.147239657 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.145933251 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022369003 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.14344448 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032681412 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.144916727 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026192626 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.03209083 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022727424 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.03484395 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022215383 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022522916 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.153481059 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023493688 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032429049 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030258874 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032328501 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.03184871 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.02236291 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.02217035 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.02318986 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028085054 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022338687 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.146502111 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028433367 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021677026 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025327152 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023339602 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023120415 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.149706646 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022825008 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026243662 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025479337 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022510081 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.02826568 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025473697 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025208279 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.147305764 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025734931 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025427741 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022060763 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023364053 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025347682 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028372618 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022499959 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025293386 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.147833287 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.02261838 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028495085 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021795635 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023296396 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022527958 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023232735 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026676358 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025371916 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028383887 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022788297 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022756963 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021739854 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025556453 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021879555 seconds)
  done (took 4.256904399 seconds)
done (took 18.432973046 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.509210298 seconds)
  done (took 1.42774438 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.015780126 seconds)
  done (took 1.963563077 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.051752581 seconds)
  done (took 0.997689064 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.290354512 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.404202127 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.723870507 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.093149646 seconds)
  done (took 2.443013141 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.850400802 seconds)
  done (took 1.803464733 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.219596202 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.181378338 seconds)
  done (took 1.381881475 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.493479925 seconds)
  done (took 1.436682537 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.315279432 seconds)
  done (took 2.266440177 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.190990859 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.129650672 seconds)
  done (took 1.271311324 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.600407444 seconds)
  done (took 1.547757375 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.548800795 seconds)
  done (took 5.499848265 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.190170312 seconds)
  done (took 1.200412987 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.193209436 seconds)
  done (took 1.145537683 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.695112736 seconds)
  done (took 1.643740745 seconds)
done (took 26.985791904 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.042755829 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038951763 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038670019 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034074711 seconds)
  done (took 1.094227735 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030043456 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024354448 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.02658063 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027078315 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024459888 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026213642 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026687588 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023038432 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02435839 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.0236094 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021927903 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023518561 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026091574 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023154502 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025511181 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027025575 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023701378 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024060048 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.02560198 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023205581 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026166654 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023582632 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023564912 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025056033 seconds)
  done (took 1.551563606 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033734935 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025436223 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028617982 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.02422894 seconds)
  done (took 1.067779032 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032244018 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030199733 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.03845957 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043085906 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029495132 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030332636 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036880164 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036975493 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043339543 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039766528 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021210347 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.02093473 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020164269 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038807208 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036377697 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015778612 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017217572 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030538597 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029692533 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032459724 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023178466 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018957332 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029744172 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030465365 seconds)
  done (took 1.678456264 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037399408 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019195281 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.035124965 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044500449 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045457932 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018968225 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032547184 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045210957 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.08196714 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018930181 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.02488057 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018874224 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057562733 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018982266 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034214944 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.064425487 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.067324152 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.02301988 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051843337 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.01902076 seconds)
  done (took 1.720454427 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.027996317 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023317843 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023694411 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.018981734 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029852093 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026243622 seconds)
  done (took 1.112686347 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023898901 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021854411 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020899789 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025869237 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021603288 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021553267 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021487871 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019642268 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019566318 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.0203295 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020349575 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020769016 seconds)
  done (took 1.214889041 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.17054735 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026191532 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024079315 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019572991 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021188944 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020338299 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034505842 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022317517 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037577909 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020177755 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020469594 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022641585 seconds)
  done (took 1.396166436 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060948658 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065422317 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09994766 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069970815 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068752559 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049755693 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.199485536 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032492896 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.118845822 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092042585 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071169939 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045501935 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040229594 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023197388 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054505982 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073644924 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091781588 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026515569 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068186944 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.242437286 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089686381 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.093027664 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104563433 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072297775 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047458131 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104539223 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050937887 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058313342 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078562858 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084023558 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075470856 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053164566 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025109651 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024552667 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107985104 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062665132 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076044719 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.046929922 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060443373 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043171421 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064179535 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023472911 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036308769 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.066543398 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040965773 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090967712 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047901443 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072099814 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035682225 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099074549 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088344741 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.17870637 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04187043 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0623787 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10228487 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073598879 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100408379 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065375416 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039444237 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.229565999 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.059121633 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053757953 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06116044 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033784589 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131456926 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042554683 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.06559576 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064323936 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.049024402 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049028278 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060463831 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08976193 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079137439 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.07984875 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090749158 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045096825 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073401461 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053977628 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081505771 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057020547 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026351401 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076602909 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083190362 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053804102 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054484657 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085993357 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046967933 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029724226 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.055794596 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074834744 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034272168 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.06963732 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035255303 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.065339068 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095667075 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053631455 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066877611 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073939871 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032176977 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114135003 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063854187 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026786619 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07307611 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069560673 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114993629 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05219439 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030397414 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055738963 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05992479 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.111530074 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067943169 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035457145 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068785957 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103600616 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05195996 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262265992 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053022518 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106455163 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073786288 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04290855 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030684399 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046544562 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.221728635 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061240924 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065292328 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047498045 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037296548 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040084131 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068291351 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04634097 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034186775 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06717839 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.056170826 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028058538 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041498416 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.030131866 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094032612 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031799362 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088682326 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078763085 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028712059 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059658348 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048767403 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058602318 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050540828 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070803717 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092348759 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137269638 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043456784 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.047505972 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060766547 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098585931 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082733329 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046386859 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031069165 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055453301 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066647942 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053214368 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080644839 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048580922 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062916121 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058874876 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099301548 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102876988 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055069629 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056397266 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064836007 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.079114077 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028910051 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115413138 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060233828 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074311686 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041496717 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100480076 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066648177 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045485904 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041804774 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055535927 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.061893718 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06367933 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105658751 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051563891 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027155551 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052017571 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109218522 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03342092 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070393014 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047782419 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.049113572 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079063071 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.054549859 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038051337 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022988373 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.244838284 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111954982 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023613995 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065591931 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.060405999 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055516489 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.075007011 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022799454 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071170294 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089312584 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069362288 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093120895 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11829007 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070591601 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071158174 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.067207946 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.058737836 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03232971 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.078225628 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087636161 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048926276 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044832751 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088319636 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072507415 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.091990004 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074418818 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074832047 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.062607934 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063387165 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059659049 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.061512925 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103622728 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077783757 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081902251 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037694913 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061734303 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073936619 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094163591 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036081433 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100922373 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040463744 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077124365 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.032920208 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081299818 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030094271 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.125227295 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034141009 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05728569 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024094258 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029153529 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10278623 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.070940377 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067459622 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060427246 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.101343175 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098899195 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032382547 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06676186 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0742142 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059525359 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.22787891 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062759569 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042870463 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048475882 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060343744 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038220738 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034468071 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069989846 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04745418 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078677789 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037462435 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028259724 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091987729 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057032439 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048202655 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029595537 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059779947 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.07873089 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046280287 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039951304 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067829217 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057674167 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094369416 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043984778 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050864814 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07769603 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033676754 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045717071 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022942833 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038796946 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029813219 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082302426 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029106924 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070345654 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022459144 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086116916 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042557057 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047785249 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056868525 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0662299 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083765313 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049320036 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098851101 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044905432 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076952669 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063557772 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04960211 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041426207 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058068455 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055857117 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07866886 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050625171 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080308432 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102397849 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059182339 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09981397 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045623674 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07806293 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062263668 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081245854 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06911128 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129452142 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10159061 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071721127 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068958589 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030225575 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053612571 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064905375 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073446238 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.296585517 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079267491 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025958324 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057710441 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047516293 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061901244 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057005313 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035292638 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097827055 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055663662 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041326923 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064974256 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044023958 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057283085 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029296105 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052840218 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056584755 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047844325 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050619761 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066827367 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081136267 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065228726 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096534517 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.055421718 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045510837 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.071495172 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063366803 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062373718 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038809647 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039263096 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09157713 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072605526 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.080500546 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054720069 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064307032 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065762247 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055326242 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082052159 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063523347 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.085266706 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034811023 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031375751 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022323222 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.02611454 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080717733 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063723713 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0675412 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054529972 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026368871 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058663513 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059385661 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026129466 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042830403 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050438385 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053057189 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047763353 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06367679 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066415371 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051145776 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059935035 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052705198 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107046697 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.056855515 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045739463 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106071977 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114583082 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045873586 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051565311 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026129475 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034225876 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07391215 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115314011 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.258003482 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.031989882 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040531161 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039228281 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040007968 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025168388 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.04203628 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042487448 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058440001 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051242901 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.067051976 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057572579 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02866393 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055707808 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052133286 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045643517 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059901554 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072337931 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078529442 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.094699802 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066552187 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059865168 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029308401 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033503531 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029174984 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032783146 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054655837 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.031988355 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029403688 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096459849 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.04507389 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058382798 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062146353 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04151275 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029061485 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089661632 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023160934 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090807802 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024895811 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036191137 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036071518 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032903083 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04909038 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096123458 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065129934 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06769127 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061885286 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059914832 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118921332 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116987831 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0369249 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099382844 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030024952 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030821297 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030064836 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067293787 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045369706 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069519924 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100528752 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045417546 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057898723 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032605811 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102913087 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.059839507 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060644824 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041541043 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033960363 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106599829 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034352481 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.040060041 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046482251 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069978778 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027345808 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059980634 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03889726 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035166539 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.270441435 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.661053776 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044214174 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029192078 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049320588 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09420923 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085106903 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049596513 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061155831 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071901307 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053382454 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046587795 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060557659 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.146104328 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02744407 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047637204 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056795834 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050516959 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054451295 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051825412 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040333472 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045509717 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040234097 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032526552 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060183477 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041502837 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049512138 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060340988 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036116898 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.041089916 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084594832 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.057149833 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.036710236 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04236559 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.057415615 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041789158 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058017817 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023355523 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066723282 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042971279 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07471406 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.05515597 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063815229 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082191489 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049089203 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094845891 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.06445618 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079658447 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04186965 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032477451 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083867312 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045450037 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031996891 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103917449 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.053939952 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.058440559 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059616648 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.05147173 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06932037 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076632138 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070229199 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053148983 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034049678 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060427545 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062030455 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044224692 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035243887 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029729706 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.031044758 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.314220235 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045134705 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04152054 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071828519 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04673562 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.208519688 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.056529368 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075471923 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040844408 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054558231 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063793654 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044893605 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063159771 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053827548 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081545371 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127170461 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077158256 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082350767 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08678562 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.030955489 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028726015 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022200165 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066648487 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032676843 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042290987 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032272133 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086691486 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.037129153 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064600223 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.198229114 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033833657 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047299511 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049257471 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023222892 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036480346 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060875509 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040486633 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033594596 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072137598 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034984905 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083700124 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066158402 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054179053 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050053288 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035145561 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069419089 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.05786385 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.085029959 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049166785 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029372496 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079915257 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058610612 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096833603 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027253846 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035458637 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086758576 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059665561 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089552179 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034527682 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10998281 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100008975 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055578038 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093057668 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025006005 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042308288 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045448249 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.082723436 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040240399 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069730086 seconds)
  done (took 40.666913089 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.143932158 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139410485 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077087494 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.088810099 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.244519834 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253721047 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105795899 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077970518 seconds)
  done (took 2.240672313 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024227144 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037205113 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034401891 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.279844225 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.053340087 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020467875 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025337665 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035062382 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.02060992 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.02003077 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054590607 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020293489 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.020844758 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.426749008 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019604334 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025607664 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.02080907 seconds)
  done (took 2.227413883 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.302485875 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.651499807 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.323134995 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.385528193 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.105170285 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.56051593 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028461464 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034158694 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.638430332 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.162512716 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.09796064 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.174097482 seconds)
  done (took 17.536947033 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.030947375 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.157358087 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.155173537 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027592197 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027153981 seconds)
  done (took 1.537476601 seconds)
done (took 76.070589773 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040328799 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.122989777 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020454662 seconds)
  done (took 1.244465595 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.160588818 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.15433657 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.15433343 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.157262476 seconds)
  done (took 1.697000895 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029827797 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029453691 seconds)
  done (took 1.137030663 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.184290688 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.250588592 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043737005 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.03898959 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033928818 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034050105 seconds)
  done (took 1.187842812 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026621146 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024503857 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024520535 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024812854 seconds)
  done (took 1.171151422 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.137496198 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019261188 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021892629 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023476338 seconds)
  done (took 1.27371945 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040430304 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039708563 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068546493 seconds)
  done (took 1.224659394 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039232889 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038371981 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.03272384 seconds)
  done (took 1.187234166 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.06522836 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.050016628 seconds)
  done (took 1.1882561 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035386802 seconds)
  done (took 1.111092882 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.047652654 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051128875 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.220620351 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.18626388 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.223221633 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.208456451 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030040252 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030598417 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026293569 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025197249 seconds)
  done (took 2.12025803 seconds)
done (took 16.13468893 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035719868 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.142334846 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.269956438 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.039875127 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.608139206 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266552102 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.677721648 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043165877 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052394812 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021468218 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038029659 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586250965 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.681564667 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.097969619 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.666597991 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.096022274 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.760325765 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021723974 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020944264 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021586494 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660690734 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021122286 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021382688 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021905334 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.758592383 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.285862013 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022243505 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.092837673 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021238037 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024963649 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.268834685 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022384538 seconds)
  done (took 12.437268512 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025643324 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.07569043 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026207051 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037101651 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023326665 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02329808 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025301283 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021893211 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063619553 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021446209 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038386019 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020972252 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025656977 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022430134 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041456602 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021490119 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023366111 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021917313 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021511363 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021827189 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040271855 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021151667 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021777255 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02199586 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021789124 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036108189 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022741659 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021484392 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021885715 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025492744 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026645593 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022847661 seconds)
  done (took 1.992625051 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078487635 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078208831 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026951158 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061676793 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073187516 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024088351 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105153008 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043780407 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066767392 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021811751 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038560096 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02161516 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058168594 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022834015 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042480307 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021656072 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02388045 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022048267 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021612618 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022115489 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040926185 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021505486 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021813084 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022130526 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022135667 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037948327 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022704445 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021555463 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02171506 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025497984 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027338992 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02292793 seconds)
  done (took 2.269159202 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.02549108 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025281933 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030878393 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.034033865 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019941091 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022069942 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023132956 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019974846 seconds)
  done (took 1.287703112 seconds)
done (took 19.077855671 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035119412 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021901197 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024736819 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041357072 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027978527 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.145779392 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018860327 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028544464 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025135803 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025224705 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026633969 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019915314 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023672719 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018545726 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.02544647 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019746735 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.148158482 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024131676 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.145947302 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.147243211 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022406852 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025425169 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028315432 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.146227151 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.146251543 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.146317206 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028987761 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025756202 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.02015284 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022784995 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.144468456 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.146170217 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.02264076 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.142706148 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020271265 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02002424 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024344912 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021608689 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.149997533 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029149464 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022329185 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028734573 seconds)
  done (took 3.449219648 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.151023031 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.15580424 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.147844145 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032172728 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.02845224 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032030381 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.154152814 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028968073 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027538527 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.153314449 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023388836 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027498889 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030089146 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020608422 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.02758789 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.02384931 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029204584 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021775478 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027662157 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027578056 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.154010347 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020954456 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028067278 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029157308 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023259723 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029179601 seconds)
  done (took 2.559954024 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029834502 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042874941 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045412004 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098826392 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062949142 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035791483 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036143946 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046933806 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054030916 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.020957558 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042761629 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048286258 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.048980545 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027638255 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060074943 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039426257 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.03358944 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022525328 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027268319 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054884298 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043701368 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039566698 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054108929 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040610299 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020125029 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030063631 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028320271 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037256631 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028106169 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033131264 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024801739 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.02453728 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021839176 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032275731 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024926937 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019244084 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.044235525 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033478565 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.03560254 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060305608 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030799348 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022281472 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047739429 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.08554906 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.02044605 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023607595 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025017276 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033255878 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.02220515 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051154673 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035802642 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020623912 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040095508 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022309316 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02225188 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036319582 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022475697 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.022917997 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032482425 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026974741 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042152624 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026166336 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041151326 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020657574 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032143406 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.02220252 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022541914 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019644463 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055434186 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028261049 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070573891 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022067107 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019265118 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.03319868 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032292557 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.027981794 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020606181 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039547259 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033157641 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024817231 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031613225 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023800281 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024249213 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057596996 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020096863 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.01920925 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019197742 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023530119 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024216367 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021652786 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033203732 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020393185 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024231569 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.03520913 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020843295 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021542386 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023548563 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022264447 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020279174 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030593567 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024527466 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.02267012 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033559038 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021861478 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024287134 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035638718 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030156665 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020252784 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022191978 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.02698976 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022585094 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025186787 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024226612 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022693659 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025952592 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028354857 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026720375 seconds)
  done (took 4.894417429 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.241228464 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.2291996 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021905824 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.225624584 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029384836 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.159385498 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.228435967 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.22855826 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021547501 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.02240353 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020656536 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.173156519 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.167858245 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181556479 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.161047847 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023611341 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.04843348 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.181273567 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.236599379 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.230700721 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047288725 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028597081 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023885471 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022920091 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022284786 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030119588 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038432638 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030039591 seconds)
  done (took 4.191142808 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029950552 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065834239 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025017963 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045873825 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038164969 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021497345 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023235779 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022533751 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038013135 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026843888 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021251124 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025439591 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024767354 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023707707 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022291817 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027795333 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.02778426 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028577219 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025093743 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02602674 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032319695 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045693506 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025580273 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021637035 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024785993 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021438417 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.0269487 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030051546 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021287595 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021245239 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018619224 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025994557 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036042671 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022586909 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021309222 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022106903 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021868176 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02192766 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021787421 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019961397 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019893442 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026790499 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020243393 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026508255 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035908554 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023844866 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.02309431 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02418057 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023925214 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018506408 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025063683 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024770815 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023967486 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029703057 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025287665 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024085707 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023051012 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035847872 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027303428 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021139641 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020899429 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020180619 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023295816 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028378646 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038240712 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023142936 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020000327 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021915196 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023332463 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035944262 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021020205 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026819234 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018714565 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021838519 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023956364 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024607358 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023121427 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020249819 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021422906 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021824098 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022078016 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021457061 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021023145 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024444594 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019648699 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020243785 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022345045 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023234877 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027146569 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020544671 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024314859 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.022991596 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020516718 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024099554 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027006053 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024608951 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041696742 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029364065 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022287213 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019566502 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036373515 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023503831 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.02101165 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023636099 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026127015 seconds)
  done (took 3.817482577 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.05119377 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023636755 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041247025 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.052702721 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031413717 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027293726 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.03504134 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022748376 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042262582 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020673443 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030565624 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019904317 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03433288 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030072043 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023380887 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031271999 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024249697 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041994175 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.035991661 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020401717 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030103204 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033594942 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033825258 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039154891 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.03872916 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039927549 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033600931 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024433696 seconds)
  done (took 2.034724348 seconds)
done (took 22.028716586 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.15035826 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.350709589 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.120966899 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.844569592 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.197261752 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.246545534 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.30620662 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.096994659 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.739688937 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.202499524 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.761667517 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.961858665 seconds)
done (took 59.157076744 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.194408818 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.266820045 seconds)
    (2/2) benchmarking "String"...
    done (took 1.362183607 seconds)
  done (took 3.746269184 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.547888254 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.109440683 seconds)
    (3/3) benchmarking "different"...
    done (took 1.143204457 seconds)
  done (took 4.896223489 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.47455231 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.642425218 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.394825372 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.097320358 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.111950851 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.603157569 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.285352399 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.777741576 seconds)
  done (took 27.019431735 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.106484128 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.447453007 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.482384638 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.584880183 seconds)
  done (took 17.806525162 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.554471208 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.503266959 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.502739102 seconds)
    (4/4) benchmarking "different"...
    done (took 1.818661319 seconds)
  done (took 7.608219769 seconds)
done (took 70.853743661 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.097602082 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.24607137 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.120393848 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.292070219 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.128891857 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.189989486 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.117314044 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.148581213 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.108645381 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.108956856 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.026133173 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.108286325 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.109423865 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.157472878 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.112028084 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.15417622 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.233026741 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.11122426 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.113731475 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.747519024 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.430443178 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.100758642 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.119298246 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.180314753 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.343574314 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.126513072 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.394036483 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.119424469 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.707116317 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.108931955 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.114061122 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.108023059 seconds)
  done (took 181.380926529 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.097359856 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.794773656 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.836384895 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.117653226 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.434319096 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.457199782 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.908887342 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.455551488 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.107893733 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.111272549 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.981150566 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.1009768 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.048184283 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.634039061 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.143284356 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.142741809 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.977839676 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.925759768 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.154954407 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.972379252 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.097831661 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.484355201 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.447137877 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.895369316 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.11212455 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.117617212 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.124486232 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.131118972 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.579578877 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.92970363 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.108438766 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.134893248 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.291742782 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.345510525 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.099109992 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.106015075 seconds)
  done (took 151.51533075 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.349441451 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.106616939 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.140732879 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.215619707 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.903318756 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.759981781 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.107964051 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.097589998 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.097520397 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.104241442 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.098551937 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.162761677 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.107911925 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.404085687 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.135739002 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.098936049 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.097547495 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.393979033 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.11755735 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.097330858 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.097334575 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.196461589 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.448386223 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.208203383 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.107046912 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.106258161 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.205603916 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.113696206 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.099011001 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.097190078 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.206038482 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.107904353 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.222000111 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.216045078 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.113331614 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.15283842 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.115410926 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.185432898 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.109192578 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.097224202 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.098961765 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.14313428 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.106482509 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.943758105 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.204813973 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.110467915 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.115830776 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.668922832 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.68748921 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.109903891 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.097685757 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.097401659 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.100690771 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.098840738 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.483248895 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.111861464 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.131174374 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.074467474 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.112474719 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.097503981 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.096953177 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.097026034 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.097588535 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.103643433 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.133149338 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.632776893 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.419637199 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.459402723 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.749611124 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.107876451 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.098349076 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.096845134 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.322282983 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.167095454 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.09963423 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.097381675 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.264221342 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.107233114 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.09751241 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.952107106 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.955253332 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.108483646 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.205852545 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.107992089 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.096830205 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.546905304 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.409766925 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.116641034 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.116950455 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.151841182 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.101454289 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.097128264 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.103984605 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.952418633 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.108793157 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.109125189 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.260678395 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.108241844 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.097916263 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.123023546 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.44809993 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.10811425 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.179147909 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.485049092 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.864760842 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.108417363 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.097374033 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.115641971 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.098397319 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.10909646 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.109435119 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.098712441 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.097839847 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.10227384 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.097734597 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.097057959 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.096902265 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.116091441 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.098747553 seconds)
  done (took 323.785600318 seconds)
done (took 659.267963199 seconds)
(4/20) benchmarking "parallel"...
done (took 1.095441266 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.358428206 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.505298048 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.273264301 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.351620067 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.310362156 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.282160981 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.311428321 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.400050363 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.338630304 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.278093226 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.334845243 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.280269374 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.382388307 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.365037474 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.399309223 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.368321732 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.3077326 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.790848899 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.32214752 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.280089175 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.300651665 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.302489656 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.264456417 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.336850528 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.40089042 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.279612505 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.50634188 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.343755973 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.315221365 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.360188614 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.37640393 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.392162379 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.322846107 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.389319014 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.339801345 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.406036738 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.320374263 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.373012164 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.283667644 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.318601939 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.334192288 seconds)
  done (took 63.604426878 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.435436738 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.293850331 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.420886132 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.40840978 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.016940982 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.418419187 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.496886262 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.299589758 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.298422312 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.422082427 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.448504125 seconds)
  done (took 18.084945418 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.345368343 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.294069861 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.427046463 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.429161021 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.498962793 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.422273903 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.465940185 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.293002763 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.304192084 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.421436829 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.456797054 seconds)
  done (took 17.480642343 seconds)
done (took 100.265610664 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.673792372 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.180890852 seconds)
  done (took 3.951484387 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.130970272 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.118695135 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.110175205 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.114403877 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.113073244 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.111011901 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.163898252 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.122561028 seconds)
  done (took 10.081703146 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.110298221 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.111131546 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.110489487 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.109968331 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.110113632 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.109479523 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.110516719 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.109972272 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.110364539 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.110508345 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.109990292 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.110818476 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.111654153 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.111190539 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.110968656 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.110849347 seconds)
  done (took 18.867211413 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.109623526 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.110618553 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.109741032 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.109990759 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.110435388 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.109938346 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.109754333 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.118271277 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.110718097 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.110691063 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.110478935 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.110146311 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.10959938 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.109949649 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.110337725 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.109521406 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.111779658 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.110292712 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.110266827 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.110344975 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.109733398 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.109878125 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.11057076 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.112859349 seconds)
  done (took 27.752856393 seconds)
done (took 61.774901984 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.732699744 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.16557358 seconds)
  done (took 6.994836089 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.114528526 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.110954811 seconds)
  done (took 3.437242873 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.109573347 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.11034987 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.109971755 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.110379217 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.109996312 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.110386563 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.109887627 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.110173027 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.110252608 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.109809938 seconds)
  done (took 12.19787203 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.109583848 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.110123611 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.109730034 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.110464372 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.11007107 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.110668795 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.110013041 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.110284766 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.109993645 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.109824355 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.110696132 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.298449737 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.109961424 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.3362141 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.109799282 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.110033204 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.109829119 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.110056334 seconds)
  done (took 21.492737021 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.110048967 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.109989114 seconds)
  done (took 3.316713435 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.110639304 seconds)
    (2/7) benchmarking "second"...
    done (took 1.109906768 seconds)
    (3/7) benchmarking "month"...
    done (took 1.11031427 seconds)
    (4/7) benchmarking "year"...
    done (took 1.110234321 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.110466895 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.110512897 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.11002986 seconds)
  done (took 8.869110825 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.603295716 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.27474898 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.332291161 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.632166054 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.7564753 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.046184531 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.761071145 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.046922146 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.927280956 seconds)
  done (took 16.477186602 seconds)
done (took 73.882040719 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.782001991 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.100467218 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.821788792 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.219676264 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.131280191 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.436864923 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.101629789 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.64735323 seconds)
done (took 37.365375402 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.116829626 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.098564788 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.146958453 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.146834774 seconds)
  done (took 19.489592473 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.10039981 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.702322573 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.148619283 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.152327523 seconds)
  done (took 19.304798488 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.628744895 seconds)
    (2/2) benchmarking "read"...
    done (took 1.535816979 seconds)
  done (took 4.279810321 seconds)
done (took 50.289402882 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.111141234 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.110812638 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.110558689 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.110725697 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.110530912 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.109827718 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.110161914 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.111419035 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.110708831 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.110703357 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.11056225 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.110778014 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.110367535 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.11030901 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.109825333 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.110705906 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.1105275 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.1105189 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.110340904 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.110801222 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.110802829 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.110913568 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.10987106 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.110031779 seconds)
  done (took 27.749931299 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.184255099 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.170246383 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.187355235 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.187662677 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.200661764 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.188244268 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.182256744 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.149179501 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.191371811 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.159263756 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.143690943 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.197087987 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.151679209 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.197027588 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.149668388 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.196763803 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.187601576 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.14978961 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.15010863 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.199766043 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.181741416 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.149832915 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.196819184 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.143945379 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.191463238 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.143446735 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.15855141 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.170946928 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.149804328 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.191412799 seconds)
  done (took 36.299500584 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.143946539 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.110820433 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.111737299 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.201030124 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.110488962 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.111013983 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.110799545 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.110744745 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.110672093 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.111011273 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.110889715 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.111131432 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.110648248 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.111348835 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.110572056 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.110861715 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.143860579 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.296978296 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.111749533 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.111374793 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.164321776 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.111077155 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.111359569 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.111354196 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.110864295 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.110790348 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.111001012 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.110831063 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.111080518 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.111632288 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.11109189 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.155783845 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.146580831 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.111254721 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.229771346 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.171392925 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.111252765 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.69391575 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.176648093 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.114912988 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.11126591 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.111126751 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.111364053 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.110615344 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.167998299 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.111452038 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.111098076 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.111194621 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.110690995 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.111031581 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.111134003 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.111202274 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.125757524 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.111147979 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.110634591 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.111640492 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.111198787 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.110758142 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.111147606 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.111444263 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.110626676 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.176870573 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.111272935 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.111279523 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.482163264 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.111082028 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.177171166 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.111072063 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.111282255 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.333046918 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.11172364 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.318471111 seconds)
  done (took 86.408102797 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.111172765 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.111100007 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.191038047 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.194276101 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.110507792 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.111079316 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.110411411 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.111496773 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.780233872 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.111061623 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.111808451 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.110626536 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.776864606 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.11199729 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.111162639 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.193458758 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.111430781 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.110573017 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.111559396 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.111204337 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.110837636 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.110586513 seconds)
  done (took 27.122412808 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.144615748 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.126283838 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.151558459 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.126637174 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.125273602 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.126166092 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.155197306 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.126403187 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.151857984 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.152332495 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.154958583 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.144723527 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.126315105 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.155400588 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.150320746 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.20615762 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.144392222 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.207959226 seconds)
  done (took 21.77430041 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.287582069 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.276466859 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.195044138 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.15313554 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.373376906 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.346153543 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.215435276 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.286797366 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.153803047 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.276825478 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.286846677 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.155304983 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.345761367 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.153270473 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.152959859 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.372732559 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.195106942 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.153267434 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.223189355 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.214803208 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.288026483 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.222194848 seconds)
  done (took 28.426359568 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.153281511 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.164970859 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.182180466 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.187624706 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.110888799 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.111340315 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.170172707 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.146858978 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.126164136 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.147814971 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.146933808 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.110919822 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.204959002 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.170305575 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.198665652 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.147318775 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.164542498 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.170731374 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.153673175 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.110852199 seconds)
  done (took 24.179019371 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110438205 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.110541953 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.110666276 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.110211575 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.110947997 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.110567294 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.110957746 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.111118372 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.110107028 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.348937948 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.111270201 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.110920517 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.110453505 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.110859161 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.111401372 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.111144024 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.110778688 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.110659376 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.110784105 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.110258386 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.349164054 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110807585 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.110379881 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.110478962 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.110691803 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.110722146 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.11037484 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.110900098 seconds)
  done (took 32.675159577 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.159770066 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.11159439 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.111554609 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.111190807 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.111526665 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.174339977 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.110937908 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.111019761 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.111135756 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.11133733 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.111498032 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.112232172 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.111682272 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.162127419 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.111697779 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.111419294 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.202741197 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.111079577 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.174113116 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.099529825 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.11119237 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.174876255 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.111678362 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.110640351 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.098911783 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.112520286 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.111008478 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.111414984 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.111526448 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.110485036 seconds)
  done (took 52.79568975 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.131953806 seconds)
    (2/2) benchmarking "in"...
    done (took 1.132221684 seconds)
  done (took 3.361673648 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.110896396 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.212101322 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.111609317 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.31021371 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.277261425 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.287138449 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.277286716 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.206203564 seconds)
  done (took 10.890386478 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.110460617 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.505806725 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.132899306 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.111213462 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.110483534 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.579423651 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.08319082 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.039257754 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.876164026 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.997266657 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.138548251 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.618973381 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.143718627 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.407138558 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.231384147 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.964348609 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.342139502 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.64622186 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.154708666 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.242193762 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.835519944 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.217431791 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.111485236 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.11092516 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.112061479 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.038687042 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.908384816 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.538508997 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.254124695 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.241284192 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.851160762 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.19688089 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.112026071 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.361932696 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.234068039 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.112599519 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.292166186 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.223909267 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.111937309 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.111884812 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.844175246 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.802468269 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.379059192 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.345377149 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.20137664 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.111572574 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.111239752 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.111487814 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.379096484 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.758335636 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.142635555 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.087546521 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.255708556 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.112105444 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.793833751 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.126252012 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.11201261 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.039007048 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.612308033 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.406541533 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.493848548 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.294365153 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.130131298 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.245587018 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.112250425 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.327226974 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.988863879 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.899670701 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.853646199 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.229417883 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.614702525 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.132912534 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.111469777 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.112881537 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.071836827 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.431230376 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.112209241 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.112113037 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.112593689 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.111893652 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.354071213 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.236016453 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.956538038 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.256471521 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.313276656 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.614196268 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.245457414 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.112401415 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.775628335 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.982846862 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.140002904 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.748872356 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.351492208 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.255338523 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.097828878 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.377449834 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.151267757 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.111850634 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.952590024 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.72587729 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.126155194 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.112045874 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.458841847 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.204558228 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.116445435 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.112081794 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.809790069 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.244764448 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.26283735 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.158436968 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.112140863 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.111728019 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.724112465 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.145583579 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.112802926 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.609453183 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.147576328 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.629201514 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.3398586 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.31616681 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.439653012 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.073856255 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.397881448 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.987342361 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.116614115 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.631353546 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.010746981 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.762070367 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.355594229 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.243040447 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.959113697 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.182891673 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.112614683 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.237901215 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.194998475 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.113103075 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.112785279 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.112718844 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.111826978 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.112312582 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.231578554 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.498551466 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.951062137 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.127221182 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.343990804 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.238550327 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.939578738 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.382552355 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.814357532 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.257406651 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.112281754 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.81721575 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.400272415 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.838545853 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.247174892 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.112952989 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.112204254 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.965025378 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.122582608 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.215819824 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.113124819 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.734980156 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.146420019 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.113024079 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.112639374 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.56996761 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.256290402 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.113357574 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.206137895 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.89790252 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.974482208 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.1274122 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.415422384 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.235170807 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.113355464 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.112764327 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.112625228 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.907476323 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.770817125 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.2966802 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.752901168 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.887647716 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.210063684 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.250952018 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.210974399 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.356000799 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.343379848 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.258542275 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.113173109 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.112704528 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.112526717 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.615882079 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.026597469 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.159936181 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.990984049 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.149946303 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.039306021 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.136385734 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.900658084 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.130883439 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.840677436 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.083953793 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.221089179 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.113537226 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.11312151 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.255483757 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.299944955 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.258253718 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.672117822 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.127675878 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.112398463 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.770685376 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.247537867 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.751852527 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.224930582 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.955046263 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.198719725 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.246166304 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.284835401 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.78397284 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.248962294 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.112712589 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.835921205 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.266477059 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.113195599 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.162147007 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.800282224 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.924559332 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.854373535 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.753517466 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.089533839 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.676866862 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.370612631 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.258246945 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.937054153 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.219166141 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.375606643 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.22126439 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.584089973 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.135571663 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.85221989 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.13100244 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.847987693 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.127781496 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.092830393 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.243105944 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.557908674 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.237366717 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.113739148 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.296451889 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.213453578 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.781836527 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.246947305 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.231305718 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.445791975 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.033223671 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.21928342 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.381802266 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.222804201 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.01877879 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.096060783 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.455151088 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.022188958 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.139982935 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.136721251 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.879506833 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.291816837 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.379562486 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.254475629 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.113326564 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.112887284 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.28956339 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.205784656 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.113819399 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.469495632 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.095777541 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.180666083 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.137204107 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.11375131 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.11342475 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.322386621 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.252027634 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.39924517 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.608063467 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.70085068 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.921211107 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.247306029 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.763419756 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.251438875 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.810013267 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.144500929 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.114484594 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.786777102 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.247328682 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.385616252 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.265937136 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.231923853 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.764287101 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.240303487 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.431048973 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.251075974 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.24317792 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.878823622 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.66594899 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.368978797 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.491080426 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.156099232 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.656735734 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.190312246 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.688887485 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.165349259 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.825354026 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.102791305 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.175641938 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.113650438 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.113426091 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.654446686 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.139507537 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.117950315 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.912182714 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.809325523 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.047672188 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.870624381 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.146826795 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.115009766 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.113630518 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.113646067 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.045676732 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.099692108 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.510433959 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.255671839 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.114285154 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.114771982 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.084510166 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.432492501 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.910471307 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.990278628 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.091311293 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.256118679 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.114680526 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.114044032 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.114441464 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.113635199 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.113559825 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.115013121 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.604178795 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.128608641 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.737324976 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.1480863 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.114610723 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.374197725 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.183348936 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.114353838 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.300043939 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.203045182 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.223145446 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.187008275 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.114255965 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.522850237 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.258680624 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.104568582 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.327249963 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.390801644 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.348682284 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.632674043 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.170100359 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.532907896 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.446176872 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.943304455 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.11754822 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.048649741 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.136822032 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.883538067 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.128156694 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.50578086 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.743544256 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.160614481 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.352485118 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.02919509 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.51566609 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.295546393 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.186199951 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.114242611 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.114505808 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.181455067 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.355871928 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.165712867 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.33059298 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.316571066 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.12026326 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.332480768 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.21498566 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.314383662 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.149142794 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.129136182 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.113766161 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.114297977 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.572779224 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.976773479 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.209333224 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.114814281 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.042118898 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.90007345 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.034616552 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.770800514 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.06479385 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.254733075 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.114820691 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.31517348 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.170228458 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.897583662 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.138615681 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.903397965 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.443212306 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.165897882 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.287835367 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.533526429 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.881269371 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.503152771 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.23606358 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.114641224 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.46084885 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.131914641 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.260372486 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.020474132 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.482646429 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.690910821 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.627158654 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.409175504 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.235369746 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.037631032 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.633796198 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.163613265 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.119269058 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.954399626 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.260486003 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.416449099 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.083172592 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.404138149 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.260030052 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.762204178 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.739129556 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.258535787 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.7261299 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.259123039 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.115003105 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.89442946 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.058176909 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.194346885 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.242166095 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.115032203 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.129839559 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.79144635 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.719557901 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.350056193 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.195985336 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.115253012 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.866061199 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.831856709 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.146496325 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.115854831 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.114712059 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.545319473 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.169358933 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.115252825 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.521495646 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.725868786 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.258267259 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.623820097 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.280415921 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.260891381 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.38854574 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.493973393 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.321448171 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.180543648 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.116143277 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.115316484 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.114435088 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.670518768 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.129269057 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.115077812 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.712580268 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.259663667 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.860279154 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.054598395 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.348316251 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.189781988 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.520501394 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.259299593 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.627517728 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.069627139 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.136298862 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.395582522 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.226114116 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.223344013 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.860719252 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.223825124 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.115286823 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.055854166 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.41789135 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.46308113 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.514842685 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.415260189 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.205948662 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.772875347 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.230925547 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.89437207 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.136789165 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.115664096 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.60865704 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.314051811 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.551467978 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.271709447 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.551687292 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.236634075 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.448498215 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.472447335 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.210120582 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.115636721 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.115468444 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.122532512 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.173605386 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.629742354 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.059912329 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.560204665 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.252903166 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.984188629 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.679776126 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.977848049 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.319679292 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.44531883 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.369192585 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.154104106 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.088220803 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.451286011 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.201948603 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.273174627 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.212534085 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.891308591 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.191540442 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.115890131 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.677635259 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.130155355 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.115397357 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.116283998 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.040626893 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.788224465 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.224083681 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.340249942 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.216018528 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.115417126 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.718075958 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.39459236 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.156697691 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.11559051 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.115962563 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.982402174 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.230736838 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.11654672 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.450267604 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.273712559 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.406307171 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.959233109 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.55586987 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.209627713 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.116576132 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.11547386 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.808486202 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.675252261 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.152168629 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.457712567 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.207314728 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.633482374 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.151170003 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.567522618 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.652829729 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.099966004 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.244225205 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.115792719 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.159525935 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.055048255 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.033694243 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.880082301 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.479395223 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.211812066 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.886663884 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.10454345 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.181927365 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.236393104 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.19059643 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.115758203 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.115331437 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.115610133 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.616231343 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.158793042 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.119886489 seconds)
  done (took 1436.406226742 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.383849811 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.115763645 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.115852501 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.115873872 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.116112658 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.115949764 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.115670304 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.11541182 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.115317527 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.115746929 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.115686054 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.115586632 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.115190744 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.391090587 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.11651291 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.115516439 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.115348255 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.11530853 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.11535086 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.115685739 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.11596914 seconds)
  done (took 25.076405821 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.116132819 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.115941507 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.115970655 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.116151033 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.115871254 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.116296841 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.115640305 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.116201235 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.116450043 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.115882873 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.11626892 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.116175529 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.115664146 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.115514986 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.115748335 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.116394422 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.116536706 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.115364594 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.116214259 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.115486021 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.116471977 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.115529188 seconds)
  done (took 25.655013305 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.115159636 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.115659777 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.850987211 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.245320243 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.115696527 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.116468376 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.116600674 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.31686586 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.145623333 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.006272311 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.475898393 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.209372991 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.120121841 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.352591336 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.214886967 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.116374792 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.238078637 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.115838192 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.115999373 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.115963197 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.11651445 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.327020984 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.257962505 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.117095902 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.951362069 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.262249762 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.116738239 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.115975308 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.115613457 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.105706047 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.134207668 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.117117921 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.95298666 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.873214758 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.459214248 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.013188572 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.146066365 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.116501827 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.115702174 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.116769633 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.328975625 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.946345264 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.120188229 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.116583113 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.434837218 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.237622778 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.117294413 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.470684832 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.210359737 seconds)
  done (took 88.837534536 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.117214126 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.243684096 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.17256011 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.116487975 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.244156442 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.116784111 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.176508587 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.116051362 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.115807342 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.11650397 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.250448316 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.262040835 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.115954976 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.116818548 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.209394355 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.116249007 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.116231118 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.115772141 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.115809612 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.115821453 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.115459672 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.172990676 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.236130009 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.257952515 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.115962987 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.115382215 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.115805212 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.116662778 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.253502996 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.11563987 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.116827389 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.115961336 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.245713007 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.193092626 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.116078486 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.117380876 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.245889263 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.115900682 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.116105474 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.116117396 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.116686583 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.116564574 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.170485819 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.250207525 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.116280979 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.211419616 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.115978756 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.116557462 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.25090592 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.116307925 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.11641313 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.267067025 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.116914034 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.116081336 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.116575861 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.23939339 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.116539393 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.115440416 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.116241379 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.25249817 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.116309852 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.115998152 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.260456877 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.116420591 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.116557304 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.27175957 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.217075589 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.116427159 seconds)
  done (took 79.779071669 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.116526145 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.253215913 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.291822591 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.29322311 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.252954459 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.250202269 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.255482201 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.252887887 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.253133209 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.255846 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.253110394 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.20208078 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.222858627 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.203748147 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.255642329 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.242432892 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.244835921 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.242389077 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.255138323 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.255757982 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.24439387 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.291912312 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.252695 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.29343895 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.471099594 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.223745594 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.253153473 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.256034012 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.296113199 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.253445229 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.471025072 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.256294523 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.253160377 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.295795887 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.469602484 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.25035981 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.117106807 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.253247049 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.256393341 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.252769377 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.22316005 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.29451359 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.250305433 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.223591403 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.244231199 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.250511767 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.29331029 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.467898614 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.202071812 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.255744039 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.253182348 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.294897235 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.250124706 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.249754255 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.294024101 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.210830584 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.291821842 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.293810542 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.256080056 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.291752511 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.292917214 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.210584702 seconds)
  done (took 79.564634271 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.117167699 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.116514624 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.200231181 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.116080967 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.117111867 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.201466747 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.117236708 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.116869359 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.11699454 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.117270102 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.116884692 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.200037737 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.478317081 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.117150295 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.20141671 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.479047121 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.200954586 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.201514878 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.11657749 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.201054691 seconds)
  done (took 26.753133526 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.115928469 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.1165445 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.116378232 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.272099925 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.11673847 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.252223333 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.116952781 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.116976101 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.116657414 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.116850327 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.116991764 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.116897733 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.116289542 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.271972036 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.117171234 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.252363668 seconds)
  done (took 19.552741495 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.116244797 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.116791951 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.116424735 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.116226649 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.116495658 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.116597595 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.116849389 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.11640392 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.116347952 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.574180857 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.117206215 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.117282662 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.116989336 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.115842565 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.11638247 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.117093332 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.116307402 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.115992097 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.116495084 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.115863616 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.693295677 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.116551956 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.117069443 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.116951448 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.116398402 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.688977819 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.11684486 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.116101245 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.116335233 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.116977881 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.115902409 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.5909221 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.115852596 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.11671977 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.116041235 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.116523796 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.116782809 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.11737645 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.117003008 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.116315725 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.116792651 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.116615224 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.116978808 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.116964805 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.1160607 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.117240735 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.116390623 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.570636447 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.115963183 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.116446858 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.11712738 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.115928869 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.117595347 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.588904273 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.117035796 seconds)
  done (took 65.52421785 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.161469346 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.173598749 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.116483898 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.117183002 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.17393388 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.155976728 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.159804659 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.131828563 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.154863006 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.117729475 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.177342339 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.132664323 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.156488315 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.179817623 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.178578351 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.162426301 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.116617826 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.188257412 seconds)
  done (took 21.858797651 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.117238694 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.116446302 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.116929138 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.116435599 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.116377709 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.116936091 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.116718488 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.117236778 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.117038356 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.116117874 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.116927239 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.117275898 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.117304247 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.116563444 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.116936769 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.116182539 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.117188092 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.117012839 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.116572483 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.116256767 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.116768988 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.117036784 seconds)
  done (took 25.673858905 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.148327599 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.162915549 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.117637607 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.11752495 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.117912958 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.140049336 seconds)
  done (took 7.907458245 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.169343312 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180319829 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.15282794 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.171776598 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.185794448 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.20039786 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.194272486 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203368036 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.182174545 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.416797097 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200467743 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189392079 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180389612 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.247900938 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.181216692 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188489898 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.207964492 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.206079892 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.162458882 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.201293428 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.205916689 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.189263434 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.216096204 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.200053635 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.208766585 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.247322191 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.179848886 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.420520671 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.195153153 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.189820164 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.178215585 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.217829347 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186296181 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.409843575 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.168469363 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.185939001 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201408966 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.200799496 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.180242953 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.242559242 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.163758595 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180744514 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.183984786 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.210539147 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.189297182 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205602524 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.211461161 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.211654267 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.216212096 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.415654395 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.189286816 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.241353877 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186014599 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186556409 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186107467 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.404919534 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.415144675 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.240375508 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184042147 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.416695132 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.242704969 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.178911768 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.241121524 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.418990231 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186324757 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.243645967 seconds)
  done (took 81.924742912 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.243184246 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.159762867 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.203057209 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.420217156 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.242452445 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.200082596 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203743014 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.194249248 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.194801937 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.176591994 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.206866605 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203625579 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242662443 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.246929599 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.203865591 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.194000385 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.20273102 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.241842171 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.171436336 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.407918688 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.200256026 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.242309936 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.244753507 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.243041875 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.406279024 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186159633 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203473514 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.201869699 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194493309 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.201541695 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.206000501 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.203539644 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.244175439 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.153058314 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.241836749 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.207305562 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.200364631 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206071952 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.202060076 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185750648 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.24725762 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.203065727 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201331743 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197305694 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.408166256 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.19477692 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.195441699 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.17180931 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.202826135 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.170640538 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.408169701 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.40686643 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.419155598 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.243027991 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.209218358 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208208997 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.203433545 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203196337 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.207541637 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18506587 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242324161 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194762334 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.410845717 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.203535409 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.203482728 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.242765717 seconds)
  done (took 82.424314317 seconds)
done (took 2419.717976744 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.165115155 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.235187249 seconds)
  done (took 13.503765693 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.116695004 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.116873458 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.26934646 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.116879391 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.120610275 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.212659703 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.159776849 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.127315748 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.116925504 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.205120121 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.116983757 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.250376302 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.218403966 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.117602971 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.145413098 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.127358167 seconds)
  done (took 39.655894855 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.228150068 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.639353797 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.075197717 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.91453611 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.152270831 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.831454209 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.450474126 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.851999654 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.423662114 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.56816615 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.38016534 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.168126904 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.959993076 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.282832699 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.577450438 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.59139925 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.664350197 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.734963898 seconds)
  done (took 60.599210615 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.11099578 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.262135968 seconds)
  done (took 8.496372474 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.122787 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.119921609 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.121962664 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.129953643 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.128029235 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.120989395 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.136008096 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.142330677 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.128629318 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.139331079 seconds)
  done (took 62.412711163 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.131549888 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.583260504 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.530989334 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.549424802 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.751139107 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.609185082 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.281162535 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.45949877 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.202930261 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.105403119 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.433335989 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.604276739 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.976955082 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.403624783 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.764925828 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.345856794 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.818856868 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.47921103 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.467792528 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.503944901 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.395062847 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.271467548 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.577919635 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.929487932 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.121781614 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.738333541 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.385534783 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.248547602 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.190066991 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.28052034 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.529998134 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.134110075 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.447046615 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.121899289 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.169631084 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.795248386 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.828293768 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.317971803 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.542237143 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.466730794 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.519357223 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.81157474 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.185491505 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.79339991 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.277188646 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.516314285 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.115164891 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.352547833 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.212440277 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.242791828 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.56140557 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.293548498 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.256722136 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.236313235 seconds)
  done (took 154.985527719 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.105532933 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.485842966 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.261799062 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.107555504 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.500194035 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.324356497 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.688116556 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.584423605 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.123801868 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.34229066 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.283472838 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.241331157 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.108919466 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.108595269 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.108778594 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.108257163 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.299341828 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.599861098 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.126065671 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.10623458 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.314526584 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.348617917 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.241494361 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.110792258 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.274499321 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.356123212 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.527158938 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.24383442 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.497001112 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.106674379 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.543297454 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.125911736 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.106858582 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.00019319 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.505262339 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.441542884 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.548594095 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.116998968 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.833436622 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.10946904 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.785622338 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.313317298 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.435787314 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.256421519 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.362674972 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.34586353 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.717945035 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.105804494 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.852452062 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.288728793 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.330465011 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.344869489 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.399043878 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.113167678 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.660633848 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.107738572 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.107112297 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.367502262 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.268176077 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.242097944 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.108862448 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.107807951 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.107684789 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.356014145 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.109313616 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.228346226 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.107984301 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.11024138 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.228651136 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.242063629 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.269999237 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.35972926 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.361172949 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.309710579 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.108352126 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.346861967 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.526405517 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.354605924 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.108860778 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.107895213 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.493522047 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.546327776 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.268763079 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.35647851 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.424964587 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.396716155 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.63412316 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.105708999 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.328754492 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.27230332 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.469641231 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.374234226 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.471322746 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.999080357 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.106813346 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.107016125 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.447863085 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.243544325 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.109186145 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.622617909 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.37999799 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.711888757 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.292128119 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.556225531 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.221685002 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.109453659 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.671189725 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.106428924 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.329627524 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.431552763 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.11615782 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.109813606 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.263850184 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.060526178 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.10592366 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.246886568 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.489019249 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.114193984 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.267561564 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.109361473 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.365952581 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.985136727 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.344459713 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.108938813 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.384913969 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.298963506 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.390139654 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.109862655 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.464091821 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.380602416 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.516645644 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.347537293 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.97278704 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.108022572 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.417788469 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.108464682 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.107480444 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.288848192 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.824677959 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.290327059 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.108781524 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.478779285 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.276393445 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.485213567 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.107476726 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.391821756 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.36389494 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.477586177 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.108245315 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.246773039 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.108160919 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.090153682 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.277385026 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.106900571 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.108728943 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.965795697 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.111993456 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.258643387 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.343416313 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.803509221 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.482007519 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.445955965 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.105848669 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.535642091 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.315657678 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.536721313 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.621527622 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.281201883 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.835929184 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.342386695 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.107249816 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.356327539 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.306160089 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.110154859 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.108263264 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.822427932 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.046790163 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.107157869 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.277403892 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.417791592 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.353418472 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.32507626 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.108651316 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.472689673 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.108669971 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.314334835 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.613755171 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.224810284 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.107236919 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.108663477 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.109332815 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.109127973 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.320752314 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.364828607 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.673824181 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.26292243 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.410939528 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.332403656 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.433992276 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.573746599 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.1201039 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.446157455 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.109235775 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.503996064 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.11483454 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.2752636 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.364984988 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.110437521 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.431424487 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.47028464 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.20881604 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.504629694 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.110124846 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.109577498 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.677960221 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.286202319 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.555024699 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.108115156 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.357200905 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.482926135 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.244893085 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.323768999 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.40620864 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.148935283 seconds)
  done (took 727.517523781 seconds)
done (took 1068.273947209 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.229037085 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.120610433 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.138858984 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.116565688 seconds)
  done (took 25.781895395 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.091446346 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.195718182 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.301009606 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.119356229 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.504105386 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.176150306 seconds)
  done (took 11.501340439 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.10700932 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.111390314 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.11442886 seconds)
  done (took 19.437842258 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.393035884 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.559222254 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.273438203 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.205984486 seconds)
  done (took 6.543836898 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.242869222 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.282169038 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.275117059 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.286525969 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.298705477 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.322852775 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.397766965 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.342388879 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.21926922 seconds)
  done (took 12.828215378 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.717562 seconds)
done (took 82.96445906 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.438597024 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.477852887 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.322050613 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.323037541 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.27576103 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.472133075 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.295887518 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.212544038 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.460994799 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.547093876 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.623901133 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.297034983 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.488912992 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.599133048 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.475204483 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.271477974 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.210520435 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.31955352 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.844500516 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.391328058 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.636128559 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.382690826 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.275620547 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.161017706 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.085242812 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.2680104 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.429174267 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.294331384 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.189488045 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.186760099 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.235563821 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.630065633 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.4735291 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.547445995 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.366279664 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.134643177 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.553536111 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.267303133 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.331328564 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.667846475 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.472725767 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.289629833 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.123264994 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.306113774 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.540172693 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.165696849 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.126986733 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.296367155 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.595768084 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.301788608 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.588894456 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.141977164 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.766125506 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.212837544 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.266380131 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.149089691 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.090424307 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.585664189 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.313452805 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.455178196 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.154774934 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.264946002 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.013962741 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.167044563 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.452271102 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.412827072 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.583043825 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.270228107 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.599405778 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.161185389 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.15350371 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.155387779 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.853088381 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.276333182 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.123997228 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.284402455 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.412845311 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.314375886 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.127979794 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.484145996 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.365003983 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.127449921 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.277985955 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.439470486 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.296612029 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.490670129 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.565798584 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.572246606 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.575567778 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.289883001 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.892018316 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.288710911 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.235471948 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.162385046 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.146236911 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.788765569 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.041256069 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.624848648 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.267038567 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.658648199 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.161206164 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.150041744 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.492907565 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.430744969 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.94843558 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.164747641 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.289637534 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.116000062 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.434356187 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.190490227 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.235794988 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.702666011 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.1388386 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.196978171 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.609194327 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.137075297 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.453420175 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.572869182 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.206720098 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.129880041 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.429720357 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.131060103 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.262112748 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.633824756 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.491987642 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.352231708 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.123697963 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.10301965 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.127615452 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.337813421 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.133570104 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.705600468 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.666656935 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.158541483 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.379130823 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.263805408 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.12300913 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.482963382 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.176171835 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.355709246 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.433486319 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.441314624 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.256475273 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.130823364 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.460947821 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.132147253 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.387396738 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.454652624 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.297041381 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.43808475 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.274257392 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.157332557 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.100128856 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.525388949 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.759610387 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.687245901 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.367859298 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.259961367 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.640219806 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.373269503 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.956557641 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.224037587 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.178712032 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.133341794 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.141270173 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.197432378 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.121246313 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.124957692 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.429389661 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.347248428 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.675597022 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.90297105 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.139799099 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.401805522 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.287135088 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.998084333 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.706063083 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.134394957 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.406564657 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.624408873 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.296172776 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.156803541 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.119509965 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.180919702 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.874807452 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.163841708 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.405264108 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.597634866 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.380256083 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.476542085 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.381370276 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.165997935 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.481971785 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.399729829 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.44595072 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.344692284 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.558853592 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.270300914 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.458345722 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.244186571 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.45211382 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.136776587 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.962346929 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.373246949 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.629064584 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.556215691 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.413324678 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.31008431 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.485183072 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.131708487 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.52790459 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.235934805 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.523908854 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.166850403 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.452060798 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.240168829 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.495570148 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.041434549 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.247504873 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.495075044 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.286029803 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.260452339 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.581700855 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.151270542 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.430998393 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.30141729 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.329079436 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.371428792 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.159511032 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.256974607 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.37822508 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.298327408 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.353408242 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.946794068 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.565775343 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.816409959 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.258179917 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.125115054 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.548312799 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.156273989 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.154868098 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.411084394 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.293681396 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.42798614 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.295187116 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.295217976 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.211977674 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.16444567 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.625581399 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.956392813 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.700956303 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.107193877 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.155325729 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.115632916 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.561684586 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.52351209 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.202066716 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.261957777 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.713885269 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.160135369 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.314671746 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.138173487 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.140558508 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.913171337 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.265528579 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.443089341 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.691914595 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.146098428 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.080283768 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.192494895 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.543076372 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.6504393 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.180187071 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.255840838 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.523756549 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.145331066 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.505170599 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.159127701 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.300541595 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.454951633 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.245966798 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.238962745 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.121855138 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.168332998 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.585961873 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.381115206 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.626668389 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.169526375 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.580281269 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.299425063 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.386809493 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.155988973 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.260381318 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.46676158 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.286319194 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.472793176 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.130331231 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.293747974 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.379266538 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.184424414 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.146035432 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.266454492 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.807851882 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.680317447 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.423137128 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.28623306 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.088384745 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.367864625 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.127245856 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.626927679 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.274347538 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.26754383 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.77597259 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.61607103 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.129965613 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.327469954 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.133912981 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.487314933 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.15527469 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.139710269 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.28636051 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.21663189 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.118746404 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.576244378 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.310950811 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.627629978 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.249974393 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.029350664 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.337142792 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.311431918 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.241054468 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.528104283 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.813912112 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.145421392 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.272868751 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.797984421 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.342213542 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.16109291 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.404147237 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.128032184 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.725187494 seconds)
  done (took 878.161803275 seconds)
done (took 879.538591009 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.315354825 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.494674546 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.366370625 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.09234153 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.928208624 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.778484617 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.39127448 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.356971864 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.204252025 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.379547605 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.05164046 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.940463068 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.232573127 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.239337667 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.215915246 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.24548806 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.316532143 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.370507779 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.244985063 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.222655961 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.515434616 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.228404591 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.563909584 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.443214624 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.508837176 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.260123063 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.374600818 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.606461855 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.576133751 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.309111119 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.399541455 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.38057372 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.965040003 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.399898892 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.229354199 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.211208627 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.124351338 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.241675627 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.376737202 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.240810835 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.517977472 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.273796394 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.899832418 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.993175276 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.927826016 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.593129145 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.989269118 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.271523387 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.288463766 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.36319647 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.362850318 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.388867708 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.568222814 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.350863098 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.034482686 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.004935777 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.575422073 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.104817886 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.882115004 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.372565102 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.556766284 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.232443869 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.32986778 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.369209871 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.27000826 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.467522982 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.577540778 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.390593444 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.370557842 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.395787699 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.409201165 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.399167147 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.280225441 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.275505126 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.261837293 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.436535269 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.051381999 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.407142595 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.922048888 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.237593984 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.095760392 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.114650131 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.119941767 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.229185274 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.356729323 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.902405083 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.9650712 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.16563401 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.244640967 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.396052535 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.026336567 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.373752531 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.589094222 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.349070051 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.363436859 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.375618845 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.957105032 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.35893475 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.131499081 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.360388937 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.904859075 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.339644715 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.172274576 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.229375219 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.231683512 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.380275929 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.332293675 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.54744029 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.350362871 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.287915353 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.505148983 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.270776409 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.353082335 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.249314328 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.19413964 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.905869067 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.428030431 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.004562037 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.320022197 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.80360924 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.42920821 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.230183784 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.502999925 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.434077239 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.321343292 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.220218454 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.22882489 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.075734772 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.243210556 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.225258478 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.318519459 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.581172023 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.331688576 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.1016785 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.358797132 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.91412838 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.36637474 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.35802129 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.200069871 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.061853639 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.23408286 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.087541203 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.436899336 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.503213649 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.370178937 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.426091521 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.241335654 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.418978642 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.335182362 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.268693522 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.377689508 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.23993986 seconds)
done (took 250.614105008 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.475985237 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.467316299 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.423675483 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.418445026 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.500406338 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.499679222 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.203216961 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.578879225 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.237434978 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.550841807 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.379240607 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.020961675 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.539705343 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.373709243 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.48358162 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.368934086 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.237288818 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.405249132 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.590534994 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.49343318 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.946661287 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.394004092 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.297932648 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.566542589 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.124045445 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.930391882 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.492396217 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.242908315 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.40077131 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.905281812 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.99574734 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.436171458 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.501972821 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 5.036866842 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.553580488 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.909197917 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.510889419 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.941701476 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.499115163 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.476361597 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.41831216 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.063742716 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.906119648 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.94422051 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.287654582 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.478755606 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.202096058 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.205349478 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.139784625 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.889258572 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.416032066 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.012590984 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.021018845 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.457687309 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.356938423 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 5.019256081 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.614687564 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.640350368 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.498662103 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.443928614 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.492671855 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.583178697 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.562604649 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.346206549 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.988905939 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.470817157 seconds)
  done (took 150.993260565 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.597297207 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.43711661 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.567669162 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.621959406 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.757627922 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.59319343 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.675086679 seconds)
  done (took 14.397816731 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.215109098 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.197068441 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.419881537 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.421079069 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.242372793 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.309424547 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.265123903 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.886435034 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.430388304 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.217805744 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.498541785 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.425124287 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.820198027 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.991318168 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.285696925 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.420713131 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.183166191 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.249090262 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.23390414 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.446101011 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.898836868 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.873934164 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.389493123 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.265651782 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.186180798 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.222322001 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.188098529 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.147539383 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.218153366 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.163056083 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.1849717 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.286793553 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.181126298 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.955200334 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.195784005 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.49861363 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.188063251 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.216769047 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.312804363 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.130435189 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.163181384 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.180477456 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.317070623 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.187131382 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.162087056 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.364556343 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.172281535 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.184807087 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.161948697 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.173693268 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.371592348 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.183123537 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.193382818 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.802345179 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.39970816 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.86233662 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.285582176 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.191897391 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.175469105 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.239890761 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.203332631 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.469355082 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.447520614 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.187424579 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.402776838 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.470626412 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.178365841 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.161360112 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.179278513 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.400151522 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.170102237 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.424154225 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.189988117 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.227359471 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.218846393 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.318013973 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.364049528 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.965624003 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.944061746 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.893298234 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.154813926 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.174421677 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.470829209 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.119854985 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.821278508 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.174351783 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.220149083 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.860137461 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.100482191 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.187252156 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.485524488 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.161420331 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.235880491 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.228349738 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.196680887 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.252378746 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.418424791 seconds)
  done (took 155.085653222 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.364128649 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.764433722 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.411202586 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.217020123 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.319079596 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.487044241 seconds)
  done (took 15.692111415 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.490322019 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.979873281 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.204458115 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.205261757 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.237434676 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.173406794 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.169831465 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.353537397 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.313995742 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.193325003 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.176711971 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.197497675 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.192953111 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.351301682 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.18742994 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.187918215 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.182271688 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.203643853 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.188520431 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.250603676 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.482426455 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.234516536 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.24857251 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.084034324 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.222376737 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.185110068 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.184753558 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.182430395 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.177262639 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.497251936 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.366553676 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.166421334 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.046321395 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.519296935 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.935787225 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.075640892 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.315051002 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.201006781 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.230509064 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.183484544 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.200314218 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.240982145 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.209166174 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.193057107 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.514809153 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.987521099 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.239143897 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.443561249 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.174568097 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.201115888 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.19413586 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.196094369 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.179823888 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.202791795 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.766879388 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.632817128 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.152764271 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.182851471 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.230119588 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.075705111 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.24364373 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.172454398 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.499653196 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.108105709 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.875949801 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.201482526 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.073768553 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.301341018 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.25266833 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.198606288 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.187879644 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.193381781 seconds)
  done (took 119.68515047 seconds)
done (took 456.994780429 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.144153235 seconds)
  done (took 7.258123761 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.208816734 seconds)
  done (took 7.473754172 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.119657039 seconds)
  done (took 7.243010975 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.1301446 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.149920529 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.145214678 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.153648121 seconds)
  done (took 25.742979624 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.306647804 seconds)
  done (took 7.432495828 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.113762341 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.143151247 seconds)
  done (took 13.489664088 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.355480884 seconds)
  done (took 7.528747816 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.458800166 seconds)
  done (took 7.584450631 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.13571122 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.151392853 seconds)
  done (took 13.441221477 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.11576829 seconds)
  done (took 7.240869942 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.547905434 seconds)
  done (took 8.765143083 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.13282563 seconds)
  done (took 7.296399044 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.17147646 seconds)
  done (took 7.299041187 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.180707781 seconds)
  done (took 7.306369912 seconds)
done (took 136.22083127 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.114928772 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.128781021 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.127676057 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.130537914 seconds)
  done (took 25.615041268 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.45624555 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.455920344 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.43287656 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.613482469 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.403902037 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.398297538 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.455162986 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.465597011 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.40115248 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.50513206 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.461836612 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.504604305 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.606194205 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.446500779 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.436155934 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.514152181 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.505503742 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.459227946 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.399702811 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.435890326 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.504814491 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.507215718 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.87628301 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.87548142 seconds)
  done (took 37.248190201 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.339579327 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.498696621 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.305370779 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.449469433 seconds)
  done (took 6.722338201 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.163733058 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.514735567 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.501649775 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.560879428 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.499846962 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.307806877 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.487854225 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.313688452 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.312279636 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.271787936 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.757911648 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.28949503 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.296003224 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.548194764 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.300513786 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.139102738 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.151451556 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.266706095 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.507684195 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.385307948 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.397917612 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.490347307 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.48913733 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.488883676 seconds)
  done (took 34.560839908 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.889324369 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.071976688 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.50158863 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.073118459 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.843463382 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.928994353 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.426709513 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.639801583 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.40044045 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.376953371 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.873002169 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.869277471 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.287487242 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.013228933 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.95281495 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.313145306 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.349471826 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.999652362 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.756355318 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.437691922 seconds)
  done (took 39.121047046 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.118092546 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.380214809 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.384969005 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.341622232 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.146847212 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.125299217 seconds)
  done (took 26.620032195 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.159790301 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.27227583 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.454273549 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.402771584 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.282716328 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.263856512 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.778566018 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.34662062 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.902856062 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.924396502 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.757734213 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.581122339 seconds)
  done (took 22.249519289 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.124985574 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.156614592 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.120677518 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.287748797 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.936443771 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.985781308 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.440180485 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.115303527 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.185061581 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.314430672 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.9805132 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.288800677 seconds)
  done (took 40.108294106 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.335267124 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.341305823 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.456311429 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.95854121 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.649045307 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.212332746 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.55026921 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.625910023 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.173653195 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.235577482 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.650232157 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.177153558 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.655487903 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.090660091 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.121600212 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.440590889 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.933700537 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.610543094 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.557246411 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.195096593 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080685685 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.267362275 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.118702564 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.664207282 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.444903213 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113035755 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.341327776 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.359967576 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.110589532 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.347649144 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.111061992 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.594712338 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.326574277 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.421303888 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.642166573 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.228664842 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.231211612 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.239143097 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.720704905 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.411080589 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.257953409 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.276132168 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.110470503 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.344309921 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.372888806 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.904199933 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.117119069 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.764504443 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.097594631 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.249689747 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.017417822 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.347524432 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.567398845 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.912106665 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.259056844 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.433667524 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.277417935 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.230446693 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.417986529 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.144337772 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.309372641 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.232024513 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.340361053 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09712736 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.621499601 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.467435682 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.453244208 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.449686027 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.413096995 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.429544121 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.489954889 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.241255701 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.944773226 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.259345487 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.676021163 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.028414965 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.49382144 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.136219343 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.847449389 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.64713694 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.089010486 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.226306988 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.767750764 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072771003 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.109607724 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281978588 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.984160401 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.08495646 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.206553082 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.176986025 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.548435236 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.267828456 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.284807174 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.427424414 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.81508188 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.126418912 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.840334305 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.412673248 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.085849584 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.676829487 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.110056612 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.098375582 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.1101557 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.695429872 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.531278461 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.166439549 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.886273045 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.8108054 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.432051317 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.741990009 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.276893585 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.110023881 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.487238434 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.443101735 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.1098174 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.866995077 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.221443522 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.242853462 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.480024896 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.109393059 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.084074399 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.530915967 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.325299127 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.110541656 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.346984652 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.112722743 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.264843993 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.109560478 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.818135905 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.162171777 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.356993587 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.640024505 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.335290683 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.206790912 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081573132 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.259928578 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.613240149 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.209142475 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.46785343 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.55139331 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.719397026 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.878931115 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.102057194 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.965873589 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.595690319 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.386951221 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.452230757 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.26605918 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.294964786 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.204431771 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10941848 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.283723851 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.126583415 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.649602533 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.11022255 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.777864717 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.874175262 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.41296408 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.109664704 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.090619019 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.230451767 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.371129812 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.775901934 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.16686112 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.277674991 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.37960051 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.339233407 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.110819974 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.082896578 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488751786 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.39204073 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.637230406 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.377307206 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.771853015 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.459819703 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.594973505 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.329761066 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.460809292 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.883739014 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.352182862 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.462824253 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.715331996 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.141602866 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.11163613 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.202378501 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.545897119 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.341629939 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.824707258 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.216746991 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.165714584 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.158347351 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.694223066 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.085815356 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.259322146 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.586341675 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.148209508 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.674354324 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.290747563 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.360560182 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.434104727 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.139698756 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452371942 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.224577666 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.531364551 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.501104344 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.428945322 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09252612 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.113356355 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.634524425 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.629927805 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.260971809 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.354397496 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.385716507 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178181828 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.110532351 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459881483 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.105278947 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.82726882 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.462779899 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.82072874 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.799785106 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.274714427 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.110000455 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.119003367 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.067017666 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264930446 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.176148282 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.290877873 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.6540464 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.385945299 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.442116776 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.109840888 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114155411 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.387913132 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42090179 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.377291719 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.61760955 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.733544627 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.807734466 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.226464759 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.813633957 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.279833651 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.14549001 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.782749913 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.421612502 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07599423 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.313973427 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.825950668 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.266724785 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.297308957 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.393165577 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109794405 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.596706706 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.73987014 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.113103847 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.140644278 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.263815814 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.111183509 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.362328764 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.875421105 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.353037578 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.299125043 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396201369 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.374528921 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.313432054 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.516488736 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.646461168 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.481720275 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.083204495 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.271286994 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.18706536 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.427542701 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.110694456 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.406117392 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.79427324 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.78417681 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.941617265 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.656592209 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.338375398 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.786935405 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.583732517 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.369346087 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.428360101 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.075763876 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.76543657 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.104628301 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.252451192 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.083452226 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.899375795 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.440780719 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.502708544 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.599316764 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.186534311 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.642914755 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.521452969 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.169221426 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.273505908 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.37134992 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.10999561 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.418955299 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.109815415 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.272766174 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.542070933 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.113961893 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.649552936 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.315476208 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.443645457 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.267854355 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.679668591 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157601235 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259945072 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.587202288 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.288750927 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.251947302 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451511539 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.949026505 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.18332886 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.145587673 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.616304088 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.738246608 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.593035246 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.742463131 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.702727827 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.477642579 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.884776908 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.11206301 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.332592026 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.279607508 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.841240492 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.308949544 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.514047648 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155523245 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.337311064 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.441543044 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.30014895 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.681838899 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.094422343 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.713231871 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.330377432 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.632563682 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.676865999 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.895830149 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.593020657 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.295369121 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.650502182 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.096052973 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.275249312 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.509099859 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.846221659 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.920478763 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.966000182 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.912958825 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.272028498 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.587588608 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.211945609 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.909985488 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271237625 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.406105823 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.332779402 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.253619875 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081342543 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.728909178 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.885530255 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.385266277 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.276065545 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.313266797 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.244050637 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.431121432 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.672325097 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.424614268 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.882500225 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.596307463 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.365370562 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.086071415 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111576542 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.38909173 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.294816755 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.207086774 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.422544063 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.55296031 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.173748574 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.191171462 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.238118686 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.685088245 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.887484953 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.835276046 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.457545492 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.6521505 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.72034141 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.876664064 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.883939568 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.331989923 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.472445195 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.525202395 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.024638754 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.500384462 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.428452634 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.270176565 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.086798807 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.31608072 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.115446911 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.211072052 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.8809053 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.422386419 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.190813383 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.286130272 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.718399427 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.434250681 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.159540997 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.171575207 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.339839078 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.310134993 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.109997924 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.747607787 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.53270992 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.275456169 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098632736 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.87487947 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.086517368 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.33137288 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.400761791 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.319476107 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.961626133 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.205341981 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.7886196 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.654033359 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.49388193 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.32874112 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.085828239 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.893700398 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.137679798 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.78652207 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.938119259 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.361854583 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.63235256 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.312869341 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.116629834 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.441497001 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.251216595 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.439918049 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.397491702 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.603609264 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.539225672 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486354689 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.413596569 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.859039646 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.271824392 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.354225608 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.085728068 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.112079209 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.187151081 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.488512764 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488760235 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.110685103 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.674351142 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.361859475 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.250814803 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.306451465 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.215945223 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.712837861 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.322501775 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.264853281 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.29102113 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.353147526 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.483888386 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.111543608 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.386366722 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.11110403 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.1082759 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.337275789 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.363339675 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.46846726 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.426392428 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.00807369 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.272296399 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.868727034 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.988386968 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.645189261 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.11327393 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.946759608 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.484624403 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.11183889 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.59411896 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.783095194 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.314369456 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.390139343 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.201158791 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.261197809 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.317741878 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.617964994 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.119892985 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.765536486 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.53269713 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.112120825 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.590929485 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.196867514 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.282674927 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.851349022 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.61215081 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.112775377 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.911399854 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.254738671 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.620802107 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.804309722 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.279284211 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.124232061 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.845583079 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.087786493 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.112200309 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.251688303 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.64694128 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.13063097 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.691967491 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.268268449 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.285931381 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.112929602 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.252899481 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.110365327 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.332492885 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.303493556 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.358748784 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.388601594 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.314249703 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.114908072 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.747407174 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.820657457 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.554919312 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.327374536 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.430191072 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.507439053 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.944585155 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.434767535 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.694411442 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.341604974 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.322621226 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.554390583 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.372852283 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.152840848 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.336139584 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111611169 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.437616985 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.273200748 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.673910467 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.387159367 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.468817785 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.450171991 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.132124088 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.670713865 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.590658597 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.999216888 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.111558132 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.423356211 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.110338886 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.201706573 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.751648821 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.315245551 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.264420271 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.091193978 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.714320389 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.426562329 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.250648335 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.113605396 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.325810622 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.623360523 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.084292929 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.905592453 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.002504542 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.329285131 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.450009855 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.085138062 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.315389299 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130411837 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.090048806 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.613022235 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.111865522 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.446936356 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08663601 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.672417619 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.090381728 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.209993417 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.285772453 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.494766824 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.111897638 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098879754 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.282995078 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.112025363 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.110685896 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.466292152 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.20937555 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.368025094 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.58768789 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.385278315 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.465896864 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.021964584 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.929034129 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.132380478 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.422221796 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.947771691 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.671797268 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.231159176 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.647394462 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.208977119 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.137573363 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.664444378 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.361598513 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.838744887 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.258011321 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.620763376 seconds)
  done (took 1954.834154199 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.123432307 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.167402924 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.195381736 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.207839294 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.18063666 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.203990577 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.153839747 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.224987216 seconds)
  done (took 50.567188262 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.110014876 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.144260013 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.59584834 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.303846139 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.145050868 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.341940398 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.277341646 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.627392389 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.325217571 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.180306576 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.180118072 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.190879839 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.124574372 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.158996858 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.043078662 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.204944239 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.116646561 seconds)
  done (took 91.195459067 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.113151394 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.254325558 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.146426691 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.071935833 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.214351534 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.561534968 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.130383104 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.111532352 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.597348442 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.400906788 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.143862173 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.205935775 seconds)
  done (took 81.109189603 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.150511075 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.149854528 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.151015952 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.150806328 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.149887779 seconds)
  done (took 6.861544165 seconds)
done (took 2417.961705811 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.339162844 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.667711473 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.701833623 seconds)
  done (took 4.479191557 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.180112747 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.245997501 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.313947546 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.260045425 seconds)
  done (took 6.135185669 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.400833706 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.599018633 seconds)
  done (took 4.109320318 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.57211561 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.125228075 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.657528178 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.114471475 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.120597246 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.119044661 seconds)
  done (took 19.481072452 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.14405396 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.143558572 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.146909805 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.139142826 seconds)
  done (took 5.691473163 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.110669748 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.139558879 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.121691286 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.062260029 seconds)
  done (took 18.543633997 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.494140457 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.373718033 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.869200714 seconds)
  done (took 5.859856721 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.933038461 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.494917656 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.930624058 seconds)
  done (took 6.468498486 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.074405777 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.170075797 seconds)
  done (took 5.353826447 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.274203617 seconds)
  done (took 2.383439631 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.601563107 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.602216358 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.963644034 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.001832691 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.141550537 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.444593783 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.447014216 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.404970341 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.810896963 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.661909837 seconds)
  done (took 18.190661334 seconds)
done (took 108.500174452 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.995312982 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.513226443 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.274767559 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.305810782 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.21294275 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.277711221 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.727905317 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.067958577 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.423979253 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.412823514 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.812591517 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.21302093 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.138506064 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.498148198 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.139169128 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.470289931 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.270282836 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.004306994 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.146248177 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.098650346 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.742056309 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.690026995 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.52019281 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.704856236 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.285649488 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.26631344 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.946455363 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.483864915 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.413248414 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.967380318 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.284626284 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.365966011 seconds)
  done (took 153.784704434 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.111445816 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.126107445 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.128039561 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.122208948 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.240205984 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.127266219 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.123933074 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.121386198 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.839014844 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.836754368 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.126881533 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.244475646 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.126471284 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.122158072 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.126443916 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.122497241 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.060529281 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.127048817 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.127001056 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.126279986 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.126619949 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.002353293 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.127221252 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.994987291 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.050125856 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.129604274 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.121934114 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.127190263 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.127824784 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.126635027 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.1272917 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.1218688 seconds)
  done (took 188.396447341 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.111361467 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.126005043 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.125728593 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.122721358 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.125580124 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.126245091 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.12373611 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.122328342 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.126098295 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.126179602 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.126382095 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.125378111 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.126337845 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.121210916 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.127280016 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.121806829 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.12593704 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.126706581 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.12573934 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.124727856 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.126848484 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.12292545 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.126292019 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.124927054 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.126150043 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.125283886 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.123205309 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.126195206 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.132982168 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.121561472 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.128756859 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.122848601 seconds)
  done (took 197.121595142 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.420946352 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.154448156 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.040487721 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.686134875 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.030610205 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.145158371 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.685152812 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.422909882 seconds)
  done (took 13.707939721 seconds)
done (took 554.135903906 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.780262632 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.024309764 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.296988813 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.339103794 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.715898208 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.425156756 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.336879575 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.61015349 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.870097542 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.584251783 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.59326525 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.346644195 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.935851144 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.346583861 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.310795595 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.603945513 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.520281 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.803583031 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.328127271 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.975753865 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.333895821 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.01182391 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.624563488 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.925610633 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.59705298 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.065574309 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.231378503 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.521818218 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.334966805 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.334864921 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.10683643 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.500664429 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.375659164 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.371129611 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.613605128 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.597243252 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.460382375 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.556683676 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.298061964 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.796366808 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.00504951 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.730671707 seconds)
  done (took 75.252847857 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.146798369 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.171037148 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.307287493 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.216609185 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.779701 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.22285309 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.385227857 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.365498711 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.235019692 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.366156192 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.398676323 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.83756365 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.395771818 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.777560219 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.382505762 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.402421361 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.223814781 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.74652302 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.381084178 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.363749939 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.187162242 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.309136527 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.186837335 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.344309061 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.182912381 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.19291146 seconds)
  done (took 36.64919812 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.192256413 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.343436632 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.40322153 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.472876779 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.386661521 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.137424874 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.487515272 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.270312945 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.046004913 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.389703582 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.258805743 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.303742052 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.323605751 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.43147996 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.703324507 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.31356388 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.310400172 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.316199268 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.333294879 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.36874881 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.268094663 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.23257437 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.488748129 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.318599878 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.834031546 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.505055612 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.495395839 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.727771975 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.662532385 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.311114088 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.282829306 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.471573258 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.538272504 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.405341788 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.290042265 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.175233222 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.17527505 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.249775791 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.174944906 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.377804998 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.484672481 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.331137961 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.552643958 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.676056895 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.199011479 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.412091003 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.583870458 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.256336874 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.276151447 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.946362402 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.456218578 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.098946165 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.319309874 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.352421686 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.287098178 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.600469084 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.366965247 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.421168347 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.318541747 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.887850975 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.231104389 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.540563713 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.337067095 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.208063442 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.488574168 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.358357922 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.506020109 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.558765527 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.554123431 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.646693368 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.698446315 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.232910597 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.185165095 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.246036787 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.331692296 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.621635161 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.570646518 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.431372016 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.557035576 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.475445918 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.66257369 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.586018108 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.125889846 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.815201563 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.227630303 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.16399661 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.240665679 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.495985404 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.468417062 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.622163364 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.68448524 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.442356768 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.579572082 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.546428897 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.522056262 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.559908159 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.150662419 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.167890615 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.389765898 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.688005099 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.237845848 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.561849515 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.807062256 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.529537814 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.577356289 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.409216531 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.56352938 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.198448691 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.600685396 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.14332124 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.562479304 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.412234473 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.425567617 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.436769878 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.143642483 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.655646282 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.273579866 seconds)
  done (took 230.177740928 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.111429177 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.12825516 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.114692608 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.127984236 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.11299617 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.739213777 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.195588465 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.112909312 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.737330087 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.196143488 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.112604152 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.112459984 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.115433947 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.121578497 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.739457708 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.711032008 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.768232424 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.11201949 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.114723365 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.124453393 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.824993657 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.115703948 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.112656447 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.124330079 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.114271713 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.113402656 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.122136658 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.169702513 seconds)
  done (took 152.422413572 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.17954723 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.541885165 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.208285237 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.264546284 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.219004663 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.184814578 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.68402185 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.316389895 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.250368262 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.184536201 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.179215595 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.402018041 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.421615221 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.766201381 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.307642274 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.306458943 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.854957474 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.3229561 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.186657643 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.181096876 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.341013937 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.526924203 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.443942654 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.443486178 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.335980053 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.448187761 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.246558277 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.175967413 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.299439235 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.6777726 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.198089916 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.5409315 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.320203232 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.182871196 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.693856775 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.530618429 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.750036474 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.729276384 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.375349469 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.140046841 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.140022208 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.420848819 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.48955295 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.236575765 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.173834382 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.814068654 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.199059755 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.586183791 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.21948315 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.139445553 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.279335292 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.279854345 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.427309087 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.177630971 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.354755522 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.302617706 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.679616303 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.16269015 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.248143854 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.482279168 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.156323307 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.683786288 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.130628188 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.232710335 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.183724263 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.031728103 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.26204325 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.696833847 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.79959946 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.226646283 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.574919294 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.362587306 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.155209133 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.437052018 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.356098682 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.624373655 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.759108269 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.313451047 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.279684093 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.254596572 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.451735875 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.171198776 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.74574579 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.279055118 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.154300708 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.68629773 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.57145156 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.156425026 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.173030697 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.286663228 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.337202667 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.397312478 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.452249768 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.244671037 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.06826967 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.436566721 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.47216899 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.191392113 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.308157654 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.169765576 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.573676892 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.365327354 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.16124828 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.495831619 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.572610655 seconds)
  done (took 157.737175978 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.872579658 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.229165153 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.356400564 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.714804963 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.517256459 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.640894509 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.448105661 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.247497723 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.446543471 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.381218806 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.401862298 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.261917218 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.13665241 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.929348502 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.229036126 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.354463251 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.246212529 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.819466708 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.492998072 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.199987445 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.467782922 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.903901933 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.4822443 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.605132389 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.589080064 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.693567099 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.838946118 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.324223298 seconds)
  done (took 48.956509054 seconds)
done (took 702.305687685 seconds)
SAVING RESULT...
DONE!
