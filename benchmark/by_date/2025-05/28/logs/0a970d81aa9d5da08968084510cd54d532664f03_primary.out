cset: moving following pidspec: 23903
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.786579149 seconds)
loading group "array"... done (took 3.099184396 seconds)
loading group "misc"... done (took 0.406846348 seconds)
loading group "sort"... done (took 0.245511216 seconds)
loading group "frontend"... done (took 0.004991643 seconds)
loading group "shootout"... done (took 0.700791335 seconds)
loading group "sparse"... done (took 0.471861219 seconds)
loading group "scalar"... done (took 1.03125232 seconds)
loading group "dates"... done (took 0.136555487 seconds)
loading group "alloc"... done (took 0.016883198 seconds)
loading group "find"... done (took 1.180786079 seconds)
loading group "io"... done (took 1.143146056 seconds)
loading group "tuple"... done (took 0.733849777 seconds)
loading group "string"... done (took 0.201242958 seconds)
loading group "random"... done (took 2.12605541 seconds)
loading group "micro"... done (took 0.046635144 seconds)
loading group "broadcast"... done (took 0.544073083 seconds)
loading group "parallel"... done (took 0.019932413 seconds)
loading group "linalg"... done (took 2.661213811 seconds)
loading group "collection"... done (took 5.65128076 seconds)
loading group "simd"... done (took 0.880656952 seconds)
loading group "inference"... done (took 2.365490111 seconds)
loading group "union"... done (took 2.750710446 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.118202753 seconds)
  done (took 1.906284291 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.137231638 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.238105061 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.590020634 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.139858886 seconds)
  done (took 3.876581929 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.682275628 seconds)
  done (took 1.465675059 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.969093006 seconds)
  done (took 1.764163831 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.971400492 seconds)
  done (took 1.754028706 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.227325201 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.194140564 seconds)
  done (took 1.203971683 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.815941791 seconds)
  done (took 5.606471883 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.527205353 seconds)
  done (took 2.320044341 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049372488 seconds)
  done (took 0.869090767 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.226746658 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.220334825 seconds)
  done (took 1.273427081 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.228246613 seconds)
  done (took 1.03393161 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.417580349 seconds)
  done (took 1.220897285 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.325787142 seconds)
  done (took 1.134635423 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.365680861 seconds)
  done (took 2.172753242 seconds)
done (took 28.360345123 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.2640035 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123535209 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117618072 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.162911084 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000306567 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.164140028 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.094413579 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.320219282 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109597234 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.181463858 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.034032965 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.474627838 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026841036 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.250325349 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046754238 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029411819 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.161656975 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020678852 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.438678782 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020351656 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7432e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015429787 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.192443866 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.313836213 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07684746 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074817399 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038480259 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040915294 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030798985 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063287923 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022285621 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.362911254 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057257588 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.592820124 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.036765218 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060716808 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09108812 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142980056 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02310568 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02303918 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030911347 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074064175 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.029044624 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4523e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.067925252 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066597426 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046952382 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031735157 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.01885067 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061050759 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034158254 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058434381 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02043412 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.08462475 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063597501 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.041870525 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052806101 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087061838 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026200953 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02871285 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030524674 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.034168846 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03391061 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058923248 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047316592 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.078364041 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.128313737 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065702869 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015572014 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023940788 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097134458 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042355138 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.030072172 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047369804 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041904247 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042402254 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067561715 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070598799 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064207718 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084504485 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052537714 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107823334 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053235754 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062220966 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042317704 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035633689 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031801769 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.18746481 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.018543417 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030833218 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.036040436 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028412668 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047707384 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.028118215 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000307724 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029019506 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019811588 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031607659 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047488812 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0481e-5 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039815081 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042073454 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06192355 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.01089684 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046423913 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000485868 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.022768936 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012614958 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.8241e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058982224 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.013139539 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 7.3509e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024131927 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028908338 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012864023 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06774307 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023957954 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064970347 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049914645 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016516768 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.019702687 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098490912 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056948148 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.024181535 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021166837 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04780044 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.014464069 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.7095e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08019217 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.026690917 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022691646 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042530503 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044298039 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.01581417 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063214918 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.022438842 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020510768 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.0084e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028608635 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038703269 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.011137799 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067894401 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069536007 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011581405 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073167511 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017207694 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034853508 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087111126 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048301932 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014215787 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050679746 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011398682 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.030200058 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03241228 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052010108 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034365403 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.3343e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061249518 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015170866 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.066036057 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.067522754 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04841785 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04868007 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035359158 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042599818 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044949686 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072764065 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014524989 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05083817 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.021094633 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022458253 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040391947 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020839348 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.209812786 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015692296 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.6654e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040887443 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013841152 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037007164 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0184864 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006600577 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000213383 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04440675 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010855355 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034316635 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0097e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014701089 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059901086 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028328066 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052487037 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000304813 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.089095306 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.022679894 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081793944 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018462692 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035132936 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030837605 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000131594 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046311797 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052193173 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.049567773 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.549175991 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08341628 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062378327 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.94e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045781507 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015870399 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032185002 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026559256 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.001424838 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053493638 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046154045 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006620632 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.034749587 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036456932 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014302675 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023423386 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.2655e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.2407e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.029855817 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029183742 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006617354 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.196671342 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.072867298 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024068682 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.9176e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025673727 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073589439 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018077933 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.03106189 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084197492 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.018068518 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04937885 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027079348 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048698015 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082593764 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01775467 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067578351 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014564531 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046406159 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073103478 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056586763 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.927e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039416543 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034058804 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041890154 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02994662 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046433315 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051195887 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000105465 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.7251e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.027706528 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042932645 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.4658e-5 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.059401847 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060482964 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033163212 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027306867 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039781781 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023269896 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046491344 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021855196 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.064944081 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04554383 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033812806 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000202811 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016636048 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075712476 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055626707 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000163918 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033554062 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.019108746 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065328318 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081716442 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.033500718 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067069958 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.026018056 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029030485 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037762941 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.038785102 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000125559 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042821849 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03994826 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04785632 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029884028 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.036430155 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019981912 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033476926 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.026680195 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000155917 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027336549 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011446358 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014093068 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.016013239 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045593522 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014629451 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.8727e-5 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027457917 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0325949 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036278008 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000437254 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.04358349 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.9764e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.344e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041708976 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.06075433 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015759467 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04879575 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050004863 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029525929 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052292362 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03071378 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016200939 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069943263 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062341322 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.025952811 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06533608 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.06523556 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.015770563 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034118559 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019982469 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019216079 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056484418 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033790186 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.037467275 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067463472 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052265581 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000122051 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018714685 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016619459 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022283801 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073040214 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061372574 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.297214257 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.1962e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000156593 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01467122 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086218235 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012326064 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031968424 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000106 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051981185 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000325682 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075161435 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.3288e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093372948 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000488194 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046216747 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086892623 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030529142 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.018002884 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020455895 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016236863 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.2917e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073313597 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06855115 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032430289 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171370463 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052080206 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.3911e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040761171 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044947892 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011418136 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.1431e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035914518 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000493656 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.047658627 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030210569 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028933545 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041324682 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.251498765 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050857925 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035696462 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3048e-5 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023284055 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031606528 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033954843 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018600025 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.061965554 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017458963 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016670796 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035918352 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023021296 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054361889 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053575347 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033259589 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050113341 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065118278 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087340223 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.035109982 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013410561 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.01702579 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046539852 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173424655 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017246791 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033175977 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071119867 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013637879 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021649819 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060647473 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043369151 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000510401 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040542822 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044582072 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064374051 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090271658 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065883112 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016394858 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023379312 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050165763 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.5316e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020764237 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000324719 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000135816 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027145346 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.9075e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000110213 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.01610816 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02494465 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.013900236 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000187874 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029357708 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033051768 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016474888 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050093504 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028309534 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.5121e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020935471 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.016798556 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017673819 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025865057 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073949849 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044766674 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012620661 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034688565 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05833946 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071027126 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027424448 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014827305 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.028149019 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.3874e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.052879452 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010713769 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.0566e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019347634 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03877986 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022077989 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.8499e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034360811 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051005319 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026229669 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0570476 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068860326 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045693937 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071368226 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.5222e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042537253 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064733947 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.014232089 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047655478 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026530581 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025288361 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022402202 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.623e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068310937 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011482835 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030927219 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042299192 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033213427 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042097925 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016176578 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073102391 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024227171 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.022651861 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042228506 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073987256 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024138036 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028240279 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050745017 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04846314 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028312935 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068958136 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.065430171 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.044913444 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035060528 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.016080603 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061213623 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075081062 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027726139 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015618306 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051554226 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066503703 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011625548 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.042301061 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.3226e-5 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028814077 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000587799 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015097018 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083548845 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.060377361 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020872875 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030550841 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072329943 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059966669 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017147142 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071047605 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7598e-5 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022684744 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011489513 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041697281 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048569971 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.461709088 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.8961e-5 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020493298 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028210206 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000331477 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052746359 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04691075 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039941112 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062882947 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012990408 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086305923 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013198083 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018513808 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029300815 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032894099 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031181565 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058945345 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060206977 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.6702e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055775685 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.039979997 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026826916 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.013626096 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0221096 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015570156 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000121609 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084057971 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049482483 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047658736 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.047464115 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033216908 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.6947e-5 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021528248 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014173276 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 3.1172e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065829427 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.033596081 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069573069 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04768163 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.6867e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029957478 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.060465236 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022844537 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051024194 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029217856 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.06057371 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.7849e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018460734 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065654348 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.8057e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065757114 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04684892 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030813859 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.096385991 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 4.4241e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.648e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070540376 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047737425 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070505994 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01437932 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054426375 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027650035 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070073049 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025412858 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024229159 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052552127 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033086009 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035468313 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.016072763 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065909885 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031203188 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014433819 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034667848 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.3677e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000115108 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044988535 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067987124 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.020483115 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055557841 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042648183 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068672003 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059551189 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026704775 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028683872 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079356958 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027450485 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.013929749 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025792843 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064397409 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029533157 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000348393 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061262891 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168520741 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049628582 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.00010982 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025324972 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063800596 seconds)
  done (took 28.611353951 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.061505612 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.227597161 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.038913971 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.056258115 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.05824467 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.052002937 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.032682163 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.191729426 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.064541203 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.052825073 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.040106714 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.068390736 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.04070395 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.052683114 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.050076408 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.035176114 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.040611934 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.052796009 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.100487503 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.067084226 seconds)
  done (took 2.307232305 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.198220249 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.02870502 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.092475574 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.073592385 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.074674707 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.51631714 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.053439339 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 5.0471e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.28319178 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.055545849 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 1.8232e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.002446372 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.3169e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.003332769 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.3436e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.006801296 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.224e-5 seconds)
  done (took 2.346270833 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.172892755 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.340868412 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108095927 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.189485762 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.1312986 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.305528279 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.487580372 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.28419167 seconds)
  done (took 2.956475066 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.131955155 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034012982 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.112854372 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.098100357 seconds)
  done (took 1.310096439 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.055616717 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024634894 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.033612028 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024406966 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044622847 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025095486 seconds)
  done (took 1.141966021 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.044934622 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.05176831 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.176875732 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035334399 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.032531895 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.040050034 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.054978807 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045448115 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.036448626 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.034125091 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.032602685 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026462364 seconds)
  done (took 1.573071787 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.057653793 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045467641 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.05072399 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.043467219 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.039224906 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.038894997 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.05050783 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.044324935 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.038989966 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.02454044 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030020538 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.04714211 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031148641 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031033857 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.03005204 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034248739 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035675294 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.01967617 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.045558877 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.041616509 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.043379233 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.045812662 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.034945849 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.046400332 seconds)
  done (took 1.889476037 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.050116437 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014145295 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.010530428 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.014685035 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.014888071 seconds)
  done (took 1.044959393 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.136336684 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.516756924 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.378394835 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142457548 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009286165 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.007739662 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.54939929 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.662031033 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.408038675 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.7575551 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.590080589 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.100224679 seconds)
  done (took 27.196272033 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.051244596 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.050045616 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.05137133 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.046339519 seconds)
  done (took 1.142913817 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.031250882 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.6336e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.041726592 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.1497e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.1477e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.042704557 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.037432609 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.1831e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.437e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.1903e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.3422e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.8627e-5 seconds)
  done (took 1.100936491 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.034549718 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.044740664 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.034012059 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.045173856 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.047366519 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.028253405 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027011717 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.04066127 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.040864862 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038267458 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02311622 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045401442 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040625922 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029385908 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038552263 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022838452 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033966308 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.040572988 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027472878 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034472282 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023795801 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045394473 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.03870438 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022942199 seconds)
  done (took 1.794105436 seconds)
done (took 75.135918755 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.091884579 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.037561981 seconds)
  done (took 1.075800519 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.209594327 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.060716559 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.060890638 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.05475377 seconds)
  done (took 1.069730815 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033497797 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034679214 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.039545965 seconds)
  done (took 1.057631379 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.045652238 seconds)
  done (took 1.009916541 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.14593202 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.233528306 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.093179469 seconds)
  done (took 1.424645082 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.16563384 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.055848849 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.054748293 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022386565 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.032735922 seconds)
  done (took 1.123302704 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.043961418 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.030319642 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.01986945 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019601077 seconds)
  done (took 1.069850436 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.060977295 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.055331524 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.059740532 seconds)
  done (took 1.135516899 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.06218089 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021734101 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.021705058 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021680247 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022035354 seconds)
  done (took 1.048447541 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.173178937 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.081200588 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.035931723 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.091547506 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096590124 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.1903e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.3438e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.0709e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.5374e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.072204569 seconds)
  done (took 1.508126988 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.124630096 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.0836e-5 seconds)
  done (took 1.089082393 seconds)
done (took 13.955744837 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.104838835 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.102399255 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.657620631 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.589442295 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.036838056 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025245515 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.030903538 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.6232e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024356819 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.4691e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.933701658 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028767218 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.578153092 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027499632 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.082973471 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030766815 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.5117e-5 seconds)
  done (took 12.209151004 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.9517e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000899682 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000368347 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000932922 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000585456 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.0514e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.0989e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000349665 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000957049 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000365676 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000362024 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000588972 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.022850577 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.00053295 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000410828 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000547506 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000379211 seconds)
  done (took 1.077541005 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.308e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 8.018e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.799e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.859e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.543e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.055e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.195e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.229e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 6.391e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.253e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.093e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.756e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.2165e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 3.993e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.0908e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.129e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.729e-6 seconds)
  done (took 1.017112216 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3616e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.2211e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.828e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.8199e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.4659e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.869e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.095e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.58e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.5512e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.428e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.0332e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3645e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.00022396 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2198e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4386e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.1215e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 8.638e-6 seconds)
  done (took 1.017002415 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.03759766 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.033940929 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.711861604 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.974058215 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 8.999589724 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.037735607 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.187682824 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.368e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.395696619 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.035163923 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.710624511 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.279082692 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.22871007 seconds)
  done (took 21.64834486 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.242853138 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.211267085 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.131955878 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.063429921 seconds)
  done (took 1.691332353 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.146558176 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.10604545 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.0718653 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.061479844 seconds)
  done (took 1.431473847 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.104004869 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.050697022 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.066971844 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.055645045 seconds)
  done (took 1.326051471 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.037555931 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.055156557 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.03761355 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.028986149 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.035224165 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.055459153 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025477138 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.024809584 seconds)
  done (took 1.348351651 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5346e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000115315 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.9135e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.2933e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.2873e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.524e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.3919e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.241e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.4019e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.4118e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.4245e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.3671e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001890013 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.2031e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.2167e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.8539e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.5999e-5 seconds)
  done (took 1.050579048 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5032e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.9195e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 8.915e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.112e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.954e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.602e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.487e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.593e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.146e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.382e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.529e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.262e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.0941e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.069e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.1819e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.067e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.496e-6 seconds)
  done (took 1.044527947 seconds)
done (took 45.714935347 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027347692 seconds)
done (took 0.956727631 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.090886317 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.073278873 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.050326662 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.116836266 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.064927402 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.106214852 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.08998886 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.485373932 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.072101662 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.071172387 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.390661092 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.841934793 seconds)
done (took 5.388790757 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.109329345 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.208268641 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.046998446 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.082058143 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.5285e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.041237281 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.082618544 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038569106 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.107242615 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.054293196 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.089043702 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.051893429 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.3315e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.8816e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053299319 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081171781 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000715327 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.104292451 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035052025 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.2742e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.5985e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000685614 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000676693 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.102e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.032250765 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000727422 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.4816e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000803435 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.058701582 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.0761e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000136637 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0726e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.2496e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2479e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.2325e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001080653 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.5185e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.065538749 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.114e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000825747 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012446881 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.5748e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000989385 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.7061e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000135042 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.000997989 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.0062e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.422e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.82e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000781746 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.777e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.4922e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.7763e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 9.525e-6 seconds)
  done (took 2.484333317 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.545982847 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.443270965 seconds)
  done (took 2.050452656 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.059540367 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.110416623 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.155501915 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.127279053 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.110038489 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 4.3312e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 7.573e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 9.768e-6 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.207480016 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.5575e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.6933e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.3715e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.9108e-5 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.8791e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.3755e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 7.287e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.6512e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.7579e-5 seconds)
  done (took 1.841916548 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.461716561 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.166366039 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080851619 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.306079215 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075949649 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074641631 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.128268473 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000157572 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073071901 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.0e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077536019 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030446689 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.072052888 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.9348e-5 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.033571554 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.2399e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.027583665 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.00234996 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.09078023 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.003130946 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.130145858 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002741297 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.090965617 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002065178 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.5839e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033108016 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.03287216 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032694211 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.068721586 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.6126e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.003078781 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002221347 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000571744 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002211445 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.034693995 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000106606 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001520736 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.034622582 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002288967 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.00138977 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.031139597 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.00213946 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.034692208 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002979956 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000108079 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005652631 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000224439 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000130255 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004729162 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000168375 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.3448e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018291841 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.6057e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.034850204 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9734e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.3322e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.5035e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002640496 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000132138 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.4867e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003819964 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003962539 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0001118 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002310664 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033001417 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.3469e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000196728 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004715794 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.6159e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.046413996 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000114025 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006098411 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.00165239 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.1532e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.003002606 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000567328 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002441324 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000204847 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000151497 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.00246109 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012341101 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000174622 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000103933 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002930765 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031602026 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000102145 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.1768e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.013244585 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000228508 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012708053 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002231996 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000205149 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006221326 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.00906583 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.00019691 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000105508 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00019062 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007821968 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000105247 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.042019115 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001509261 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 7.648e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000212835 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001152433 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.8236e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000780436 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000690015 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.363e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001428895 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000146916 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000124282 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.00146914 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.5997e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000125964 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 6.7575e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000205961 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008170017 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008099753 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001380142 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000140264 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008292678 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002022111 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011003213 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000121256 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.00144963 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.9885e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000116663 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000180096 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001547365 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007480838 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004986884 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000158587 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000218425 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013240026 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002320246 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000481467 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008094105 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000117664 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012575915 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008975396 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000248533 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000777302 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000132967 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001623753 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002529455 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006282806 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 8.3114e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.2739e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.00018346 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011737315 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.0837e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.7971e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.1172e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002460446 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.6996e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000153546 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001439817 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000112809 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.7756e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.6255e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002417773 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.1432e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.014219652 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.2481e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.6536e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001135068 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004705343 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000702125 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000143026 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.149e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000238681 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.2757e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000532636 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.1081e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001738029 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004985917 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000172901 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008511042 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003402695 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002089889 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000808669 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.7632e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001739181 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.8759e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000218254 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.00012866 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002588966 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000132316 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.3026e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001652429 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006939099 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014421963 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000155089 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.974e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002650301 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001464349 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000127676 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000179693 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00012353 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001991612 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000473053 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003644976 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000729196 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.9381e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002145719 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009078522 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 7.5764e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000115432 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002730644 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.002968413 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000126611 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000172436 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.6183e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000110851 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000226832 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000884826 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.8194e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.009807998 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001204053 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000141579 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000153632 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005047756 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.2005e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001510183 seconds)
  done (took 3.900094571 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.058669972 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.12689541 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.234749069 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.031475278 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000181935 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.138368268 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000164991 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.267166211 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000119994 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.030224375 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000101424 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.05466704 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000234395 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.45134957 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.288864766 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.206189887 seconds)
  done (took 3.957631087 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.80640568 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.875374669 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.257161487 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.412668656 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.13493246 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.436710861 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132568749 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.110517423 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.112739866 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.103832522 seconds)
  done (took 5.462532299 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059506004 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.166866591 seconds)
  done (took 1.310959653 seconds)
done (took 21.943093154 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020215295 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020176148 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.019782605 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021746904 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019199024 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.035869595 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019814143 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.019181095 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.048474519 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019945412 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.026383389 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.032150271 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.02029726 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.018937276 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019027642 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.018725925 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.019597437 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.01901007 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021153021 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.019322215 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019786556 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020768486 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.019803509 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020384697 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.019897313 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025187521 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020002222 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019095513 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025628206 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020766726 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020140329 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.02026257 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019040149 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.019125846 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.019540148 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.01879996 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.02658204 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020225909 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020201826 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021208096 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.019670178 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020646 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020062169 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020725828 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.018999586 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.018949188 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021182341 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.02088551 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.01895185 seconds)
  done (took 2.135528748 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035126591 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.4734e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.034243878 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.2218e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.2538e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2401e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.1117e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.929e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.967e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.912e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.4696e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.319e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.581e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.961e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.039e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.951e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.008969946 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.8032e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.2524e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.115e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 7.161e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 5.336e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 5.29e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.338e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.115e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.287e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 5.622e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.34e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.115e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.075e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 5.278e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.276e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 9.088e-6 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 5.908e-6 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.089e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 4.938e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.045e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.8372e-5 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.697e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.302e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.687e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.103e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.5148e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.636e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.052e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 5.839e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.315e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.658e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.826e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 5.843e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.817e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 6.052e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.8e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 6.056e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 9.114e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.657e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.328e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.445e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.56e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.126e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.248e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.805e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.992e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.578e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 5.902e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.522e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.992e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.965e-6 seconds)
  done (took 1.255581633 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01940453 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.0323e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.99e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.043e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.505e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.984e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.998e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.297e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.964e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.644e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 8.363e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.788e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.965e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.567e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.817e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.634e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.77e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.385e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.574e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.099e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.738e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018929427 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1414e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.243e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.629e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.286e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.318e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.034e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.244e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.401e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.417e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.977e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.966e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.896e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 9.183e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.628e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.887e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1162e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.759e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.379e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.305e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.31e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0445e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.807e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.029e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.355e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.17e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.354e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.06e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.871e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.887e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.366e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.369e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.223e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.222e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.12e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.274e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.068e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.434e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.831e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.129e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.222e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.176e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.293e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.234e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.862e-6 seconds)
  done (took 1.127601765 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.04341538 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026554288 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.045863672 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.04199794 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.036482485 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.048872718 seconds)
  done (took 1.330631643 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021207768 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.4928e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020595606 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.0924e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 9.221e-6 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.947e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.288e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.979e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.167e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.359e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0713e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.514e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 9.192e-6 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 4.894e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 4.976e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.192e-6 seconds)
  done (took 1.131666413 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019081618 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.4219e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.771e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017029352 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018476083 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.582e-6 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9144e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000135752 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.713e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.849e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0011e-5 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.825e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.622e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.105e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.0003e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.92e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.32e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.357e-6 seconds)
  done (took 1.146353941 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019066296 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3608e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018488452 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.2187e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 7.259e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 6.425e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.339e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.623e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.774e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.4851e-5 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 9.99e-6 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.65e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.521e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.84e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.658e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.795e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.403e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.344e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.0328e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.442e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.626e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.104e-6 seconds)
  done (took 1.12562247 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018896204 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 8.978e-6 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018785548 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 7.458e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.342e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.472e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.143e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.287e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.765e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 8.719e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.085e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.892e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.02e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.205e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.885e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.72e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.888e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.028e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.858e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.733e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.18e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.629e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.619e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.718e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.673e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.601e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.553e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 9.434e-6 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.772e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.13e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.77e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.838e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.828e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.517e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.659e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.638e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.046e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.153e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.581e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.789e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.532e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.5438e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.591e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.751e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.971e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.837e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.488e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.531e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 6.166e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.801e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.664e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.965e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.757e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.843e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.719e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.501e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.145e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.359e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.63e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.971e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.905e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.465e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.374e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.686e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.78e-6 seconds)
  done (took 1.125492596 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.019125317 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018621264 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.3581e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 7.209e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.751e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.487e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.749e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.526e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.75e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.545e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 8.45e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.271e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 4.81e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.847e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.437e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.93e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 9.048e-6 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 4.883e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 4.723e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.339e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.503e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.623e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 8.006e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.618e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.643e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.716e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.727e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.798e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 4.581e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 4.981e-6 seconds)
  done (took 1.125555315 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.019140973 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.2865e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02024508 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.2445e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.147e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.963e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.946e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.954e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.395e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.048e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.0264e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.691e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.698e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.719e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.841e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.606e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.181e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.376e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.21e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.001e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.671e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.368e-6 seconds)
  done (took 1.127769133 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019143375 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.3608e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.763e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018385316 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.1884e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.816e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.69e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.585e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.363e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.57e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.4036e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.319e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 4.894e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.312e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.071e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.001e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.157e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.68e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.868e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.812e-6 seconds)
  done (took 1.128820894 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021187248 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018663167 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 9.362e-6 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 9.094e-6 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 4.823e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.35e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 4.732e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 4.948e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 4.826e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.063e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.904e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.168e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.689e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.762e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.754e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 4.769e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 4.85e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.921e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.401e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.19e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.957e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.066e-6 seconds)
  done (took 1.129495856 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019285354 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 9.473e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.615e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.378e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.982e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.704e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.863e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.407e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.375e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.397e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 7.749e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.17e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.785e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.271e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.577e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.351e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.545e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.48e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.343e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.361e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.199e-6 seconds)
  done (took 1.107688928 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019169315 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019032922 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020659042 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019936924 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015730193 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019211247 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015493209 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.023399849 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015384871 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019102817 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.01862267 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.018698837 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.019488823 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.022861275 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015557821 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019796994 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019466477 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021412607 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.01998031 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019811255 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019985237 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.015388696 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019094941 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019178471 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020278192 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02031689 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.020496596 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015322209 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015531903 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019221582 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.018847829 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018894357 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.020577198 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.018939683 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.019678513 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028192026 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.020081606 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.01545905 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015446651 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020037904 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019732247 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.01971217 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.0186663 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015437414 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019791339 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019101845 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.018859599 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015421246 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015390148 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019643048 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015525565 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.01934404 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015345864 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.018790465 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.018973387 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015564402 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015410211 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.018867389 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015523597 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019022334 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015331932 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015286028 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019521637 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015523995 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.01901368 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015371321 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019153458 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.018843027 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019059229 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019049178 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022551375 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.02000128 seconds)
  done (took 2.426244726 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019778375 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019584589 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.2206e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.806e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.027e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.897e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.397e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.052e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.092e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.133e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 7.311e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.308e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.168e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.793e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.942e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.09e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 4.668e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.763e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.022e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.046e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.331e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 4.999e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 4.721e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.665e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.028e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.542e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 4.96e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.197e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.203e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.493e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 4.768e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 4.878e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.367e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.004e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.119e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.335e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 4.624e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.72e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.151e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 4.705e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 4.802e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 4.76e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.4541e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.74e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 4.829e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.331e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.014e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.12e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 4.843e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.881e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.195e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 4.851e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 4.988e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 4.759e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 4.99e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 4.994e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.242e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.491e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.808e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 4.908e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.274e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.353e-6 seconds)
  done (took 1.133455782 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.019075629 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.016912697 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01706441 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018540919 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017014245 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1696e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.9463e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.867e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.919e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.31e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017067928 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.3527e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.3967e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.6183e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 8.689e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.528e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.2976e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.193e-6 seconds)
  done (took 1.199761196 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.019158106 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018430811 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.1227e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.792e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.429e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 5.19e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.732e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.39e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.467e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.878e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.3357e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.34e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 4.97e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.225e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.181e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 4.788e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 4.741e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 4.978e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.987e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.118e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.857e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.875e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 5.275e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 4.742e-6 seconds)
  done (took 1.131872117 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.051829733 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 9.353e-6 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.816e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.568e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.036e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.005e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 4.715e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.847e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.176e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.656e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 7.664e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.746e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.037e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.639e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.609e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.839e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 4.691e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 8.042e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.004e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.118e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.662e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 4.816e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.052e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.098e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.648e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.919e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.148e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.532e-6 seconds)
  done (took 1.146043159 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018827277 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.018877257 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.585e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.641e-5 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.439e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.427e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.305e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 7.364e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 9.229e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 6.418e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.222e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.514e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 4.996e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.569e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.278e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.592e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.081e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.518e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.519e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.25e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.265e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.051e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 5.931e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.532e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.357e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.07e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.06e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.497e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.268e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.406e-6 seconds)
  done (took 1.131708396 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020599836 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.01861411 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.02283896 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.0982e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 5.759e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018426112 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 9.533e-6 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.018873622 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022056018 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.021856109 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023428135 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.2816e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.01897092 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4905e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 9.62e-6 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.020759874 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.092e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 9.432e-6 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 8.87e-6 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 7.747e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 6.921e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.478e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 5.082e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 8.629e-6 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 5.361e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 4.913e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 5.286e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 4.772e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 4.722e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 5.332e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 6.122e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 5.26e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 5.75e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.107e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 4.763e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.057e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 4.773e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 5.803e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.289e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 4.718e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020090697 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.0769e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.6305e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.0639e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.606e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 7.074e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020497059 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 9.013e-6 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.0226e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 5.626e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 9.058e-6 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 7.486e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 4.912e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 6.595e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.305e-6 seconds)
  done (took 1.341042253 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019294424 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.4081e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.501e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018639767 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.054e-6 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.8923e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 8.622e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 9.265e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.992e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.89e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.2e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.437e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.269e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017070294 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.1889e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.0876e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.62e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.223e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.605e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.565e-6 seconds)
  done (took 1.14748068 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019184828 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.4681e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020590283 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.1563e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.705e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 7.809e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.276e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.06e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.988e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.363e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.59e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.588e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.717e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.777e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.358e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.401e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.0072e-5 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.502e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 6.116e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.322e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.507e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.442e-6 seconds)
  done (took 1.132679658 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.018809393 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.01882199 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.2313e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.576e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 9.71e-6 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.426e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.157e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.097e-6 seconds)
  done (took 1.133186627 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020225738 seconds)
    (2/2) benchmarking "in"...
    done (took 0.019825844 seconds)
  done (took 1.132779485 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.031483576 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020783066 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018965043 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.022791014 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024140217 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023995845 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01974711 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027355474 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021020764 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.021569926 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020736982 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020289349 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024116867 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020370871 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.02189996 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021798866 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020410817 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020618625 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022430454 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020761441 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020708789 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022227174 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020572786 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.019888729 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02667934 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020644665 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021185104 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01965807 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022144586 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020208207 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020905825 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025742172 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020195895 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019778496 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019620147 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021447517 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021125767 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020930081 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021480744 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019648493 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019256577 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020747965 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023447528 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020082149 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.00428733 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023229828 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020060589 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019499659 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019776417 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022536987 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026594663 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021567963 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.021962941 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020740166 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.020874455 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019695403 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020551926 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021151831 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.02023308 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021545778 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026532241 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027078996 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021404641 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019976758 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021008623 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025917899 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.021464686 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019998669 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019201345 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021381891 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024006989 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.02207187 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022455402 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022049259 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020560002 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022239862 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027552741 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.02064493 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022693218 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020971611 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021084017 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021547142 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020756777 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024331151 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021685208 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027347268 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021488062 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023100236 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021151088 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022034438 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021286191 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027469024 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022286893 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023677875 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022344262 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022814634 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.02013944 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019371521 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.020441911 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019959767 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019376996 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.02156759 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027304881 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021323821 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020432394 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021559619 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028470551 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022959051 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003313297 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021633576 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023158978 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021885954 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021651371 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027129462 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021254913 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.02669997 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023955098 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020725875 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019864962 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020848664 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003667639 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019802751 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020387393 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.02091848 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021752936 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022950229 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02168837 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019708122 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021276082 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022057827 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.020024601 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020894374 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021156019 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020880151 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.0204301 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020570376 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.022360447 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021611697 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.021017746 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.021079863 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023389634 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023231034 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.02076367 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021208677 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022283596 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023765343 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021276969 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022084084 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022254544 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019304344 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022049322 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022295745 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019751386 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.02043168 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021273122 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021909316 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022503626 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.022060158 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019733573 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021885829 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020294297 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019740284 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.02807907 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019892426 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022219478 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022287568 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021386728 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003112267 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.00279582 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020899369 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022697842 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020432243 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020484824 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020315947 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020140414 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020889016 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021645264 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019976581 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020779475 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022099093 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020519427 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.01930058 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019693003 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.0220614 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018994992 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020606697 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.021479291 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022385382 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004039335 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021927641 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018548947 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021011012 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.019898126 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021874029 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020331391 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020300657 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.018953367 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02162657 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026057416 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019917535 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021692586 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02121526 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.01960623 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020537518 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020370007 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021101688 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021226114 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.020760629 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019179883 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022780953 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.01869937 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021676449 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019454698 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020471543 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020189902 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020175272 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019879824 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020917749 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020197112 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028074205 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021371476 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.019997218 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026134785 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.025829123 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.018975661 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.019695581 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025814066 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020624886 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.02071738 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021170286 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025524466 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021798359 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020494099 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020363556 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023353322 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.022656704 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021326661 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018667233 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.020418203 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020710533 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022038197 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019547016 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018965868 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021020271 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022060712 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.022870301 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021798393 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021989247 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020873833 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.0219722 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021069821 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.023583403 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021954711 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019904698 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021911433 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024017288 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022366482 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020780205 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022489693 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026464278 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.0201354 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.02085905 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020533276 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021185348 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.02166079 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021907365 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021503942 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.02294555 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021562677 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023324864 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020632967 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027427255 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020365302 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020773074 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019626205 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.027814682 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020842338 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.01885191 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.02063392 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022082239 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021532698 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.02245354 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019594247 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021612123 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019863384 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021981816 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026467036 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023682587 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.022068997 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022038534 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020711773 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02105539 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020673039 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021063263 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021335915 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021365384 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021665565 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020005643 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021422779 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020575183 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02599696 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019478406 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021419231 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019101105 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022208842 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019508485 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021960088 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021910743 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021334634 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020563956 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022420833 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021964129 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020910228 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020879981 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020749248 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021513961 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020335498 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020509451 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019517585 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019174542 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021704832 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.02158054 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020875422 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023188163 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.02240851 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020520942 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021926574 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020602857 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022114975 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022902515 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023218539 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023624218 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022408493 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021081228 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021322764 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020833304 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.028176328 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.022105181 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020356342 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021033457 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021493234 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020812081 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021635105 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019422903 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.02212224 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008997834 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020820514 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021358945 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021039573 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023069487 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021952053 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020823458 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021948474 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020497786 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020126612 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020121941 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020652226 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020605777 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020046085 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025655705 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020465326 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.02052198 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.02566864 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022495979 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022002566 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021742555 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020322403 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020418186 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023337008 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026186134 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020927944 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021797432 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021367036 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022015425 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020514206 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022787918 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020234622 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022141217 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021597451 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020749495 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020423234 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019102773 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022093769 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020859752 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020997794 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020827339 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021984075 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019671373 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020389398 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021163804 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021918913 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020359444 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020790028 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021798347 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.021130699 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020245064 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020374921 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020682991 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020879291 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026460196 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.01976062 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021613415 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020486705 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020015888 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020263565 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020124551 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022409571 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019214295 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019504156 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026341142 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021557244 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020334422 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01918972 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021663005 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021365997 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020154097 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021594809 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.02265204 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020162427 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021123577 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019347698 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022859282 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019318283 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.021939167 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020067293 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020127495 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02114093 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021109584 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018943634 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019561745 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020384706 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02283471 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021666782 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020972197 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021674283 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020290909 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.02177004 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018919648 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021720873 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021930206 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026283064 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.02175215 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019771019 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019978776 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026281165 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02056647 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.02137234 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021883 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020374542 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020117902 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020492881 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003719362 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022737688 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020328508 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021713291 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020254404 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022938561 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022623154 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020469798 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018894806 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020579109 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020418122 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020413352 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022084393 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021840268 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020738557 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021195528 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003005049 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019235091 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020450706 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020406665 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020504362 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020566675 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021169174 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02123674 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020189005 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019131149 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019946264 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003162872 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020404703 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021527962 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020677888 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020467664 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021164265 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020359631 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021412769 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021078188 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021032113 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025967442 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003621073 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019548151 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.02172032 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022144944 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020537306 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02026243 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019913679 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020851211 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020358619 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.02002795 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019684187 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020236936 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020699131 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020314803 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026420169 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.02128271 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019301907 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.0202023 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020155163 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020419135 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021325883 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023004179 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020383065 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021268432 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020116605 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020128586 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021863626 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02614196 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022942745 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022689658 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020705786 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019469793 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022691021 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020387395 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020436284 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021345697 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027479491 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019215935 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020412325 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020442559 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020577142 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019968855 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021634984 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020049578 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020609847 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020133802 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.021858144 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020708651 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021067559 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019710711 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025553333 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021398979 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020413538 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019402032 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.020982525 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019928979 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.019692692 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021055112 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025636153 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021493197 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019014708 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022012052 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018652985 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.02109661 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008441365 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.021961098 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019205706 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.020754925 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025374905 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020301222 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019531969 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.020812594 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020295484 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019826277 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019936733 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021287013 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019897515 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.022072228 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020056779 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.01950622 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020384279 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026178421 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020059722 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018996021 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021910892 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023416065 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020128213 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022809187 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022883975 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019503208 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021107325 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022709799 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025398172 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.02623473 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021393023 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019862804 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019104042 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020341289 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.02175215 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003696111 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.020968839 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.008687158 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.018912018 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.018992727 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022135343 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020461401 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.003859229 seconds)
  done (took 13.641191464 seconds)
done (took 44.667342677 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.01898578 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018536044 seconds)
    (3/7) benchmarking "year"...
    done (took 0.018416609 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.019662962 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020324419 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020469455 seconds)
    (7/7) benchmarking "second"...
    done (took 0.020212631 seconds)
  done (took 1.266877094 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021147512 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.457387407 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021110504 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.025475275 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.271022759 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.187049061 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.182283613 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026504593 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.026293675 seconds)
  done (took 2.354875292 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020459269 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021102237 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021055187 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022525688 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039895765 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019826914 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022368794 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019784704 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.020954098 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026453584 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021615606 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020112226 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.02962028 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024829028 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023473537 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020823766 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.020720004 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021810226 seconds)
  done (took 1.567117762 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.040987266 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.0220314 seconds)
  done (took 1.203875167 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019668772 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020081601 seconds)
  done (took 1.180945783 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.019147723 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.147612481 seconds)
  done (took 1.307726701 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.036372192 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020415041 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020394832 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.020503774 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.030198034 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.033171398 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.032968087 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.020399826 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020400205 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.019830437 seconds)
  done (took 1.400285284 seconds)
done (took 11.308845559 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.05940461 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.09011333 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.030209299 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.052010873 seconds)
done (took 1.254910136 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040923548 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039820303 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040602335 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027945078 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053490655 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03751701 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039975501 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.4591e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040377231 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054609804 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.1787e-5 seconds)
  done (took 1.515376579 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040434793 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039881556 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039671773 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029656223 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.050258622 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.02711791 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039852642 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7908e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040224382 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052260581 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 3.0603e-5 seconds)
  done (took 1.50627095 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.085023088 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083692386 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08445187 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092220435 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087021882 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027558636 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.2342e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083394272 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083223069 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.8516e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.089442466 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.085031711 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019632078 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088076873 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.7818e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.1522e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1376e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 8.863e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.088127814 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083455683 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 3.7849e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.552e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.2965e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.37e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 7.364e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.262e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.501e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.3741e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 8.84e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083290456 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084154599 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.6397e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.6267e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.0499e-5 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.0107e-5 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 7.136e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.15e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1388e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.1795e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 9.525e-6 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0666e-5 seconds)
  done (took 2.394193861 seconds)
done (took 6.440397705 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.02324408 seconds)
    (2/2) benchmarking "read"...
    done (took 0.031901249 seconds)
  done (took 1.206739584 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.239304208 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.833071521 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.744620183 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.904346899 seconds)
  done (took 4.635190571 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.863255253 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.106677035 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.050740218 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.03391837 seconds)
  done (took 2.237342927 seconds)
done (took 9.355257662 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.069280446 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022407295 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020322044 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021433782 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021058028 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021509162 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021356257 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022325351 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021593791 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023316496 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022339751 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.02229009 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.021101404 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023158688 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023492067 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020762961 seconds)
  done (took 1.588414904 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.133283282 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.225067118 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.248971997 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038034466 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.080590895 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027509296 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.139707536 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022287676 seconds)
  done (took 4.075741001 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022536544 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021197833 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.02421612 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020468005 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022441618 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023642398 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022114538 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023477093 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020435911 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021802015 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.022227567 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022111248 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023492255 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022928936 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022254015 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02535773 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.022824195 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022932545 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.0268116 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.022766896 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023596495 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.023217511 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021901521 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026797865 seconds)
  done (took 1.721139265 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021080337 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044355396 seconds)
  done (took 1.231994792 seconds)
done (took 9.655894391 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023128648 seconds)
    (2/2) benchmarking "String"...
    done (took 0.02292151 seconds)
  done (took 1.208748571 seconds)
  (2/7) benchmarking "join"...
  done (took 0.246761971 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.040580942 seconds)
    (2/4) benchmarking "different"...
    done (took 7.594e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021215193 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.7751e-5 seconds)
  done (took 1.242821036 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020485207 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.133429281 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000206893 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.137e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000899812 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 7.967e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.435e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.0005518 seconds)
  done (took 1.301462931 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022640929 seconds)
    (2/3) benchmarking "different"...
    done (took 6.504e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.333e-6 seconds)
  done (took 1.189953678 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.03688114 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024452297 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020757828 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.020803477 seconds)
  done (took 1.267819492 seconds)
done (took 7.521206245 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02208854 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020588786 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030738198 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024733716 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021807753 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.024033623 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023838366 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020820689 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.03843045 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.060817541 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.2005e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.034458461 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.02099154 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.03321154 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022112244 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.023977763 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021187915 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.5678e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.020818293 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.1701e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023900127 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021190797 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.02240867 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.2047e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.23e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026328009 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.0263e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.1807e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.2939e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.0549e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.1797e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022608567 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.3635e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.1437e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.701e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.774e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 7.076e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 6.009e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.02403979 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.4865e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.7035e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.02429419 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 4.2578e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.2011e-5 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.5739e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.0654e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 9.561e-6 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 6.095e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.144e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.1334e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.4465e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.834e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.1021e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021090544 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.024187515 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.0127e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.123e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.7041e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.102e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 9.842e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025307558 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021319573 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.6575e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.9227e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.4476e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.378e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.592e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.5649e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.0291e-5 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035061767 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035306595 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.2658e-5 seconds)
  done (took 1.953876679 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.038260602 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.044082426 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024402045 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023917126 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.024323626 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019737639 seconds)
  done (took 1.344762648 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021787213 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.02107391 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024750687 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.033611604 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021997598 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.040907461 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021819455 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021465064 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.0248503 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026061791 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021185447 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021758548 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021028823 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.031752071 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025686483 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022364721 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022300493 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024673057 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.05171872 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024272963 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.02161693 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024373024 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033979628 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024497779 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022331046 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.039484685 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021453728 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024239341 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020809877 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029696483 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.035189738 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.02448715 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.02586869 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028682522 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023012186 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031644022 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037367931 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033647969 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.048176062 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.032107808 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021489921 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.050949506 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063639041 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039780219 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.03409256 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020775469 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020752419 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021780533 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024722739 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021892887 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020704679 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023876873 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033179873 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027718083 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.0198087 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030357629 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023204909 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030699283 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022914084 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021770768 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.02151707 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022232982 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022338716 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022473195 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.02554627 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029440271 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.034090385 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.023402091 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022504753 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024174392 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021308389 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031933698 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021130383 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024570967 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021825279 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.02348243 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.034513568 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021601648 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024659759 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022234642 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.03365099 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.04067768 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021401337 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024130205 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028801514 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019468336 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.028629914 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.0350416 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.022179061 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025233646 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021429366 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.020057768 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022221108 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048722253 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034121126 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033720231 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030071881 seconds)
  done (took 3.84164929 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.050388628 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034193533 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033623306 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031916362 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.020070441 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021321568 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021594568 seconds)
  done (took 1.398072089 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.038601988 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.0523412 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.036024229 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.051827715 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048002984 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.045781597 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.050835559 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.052224613 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.037188683 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 3.1921e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.041442879 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.040002536 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037301245 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025849806 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002406362 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.049022129 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035142389 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.039813001 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.2348e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.041295648 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.042987928 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048941634 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.025272849 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.046787071 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.025937769 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.040812933 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.9989e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.031345893 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.022908809 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.8661e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001060288 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.029052071 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.8077e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.9398e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.025917966 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035298205 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.025540311 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.8878e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.029550596 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025503431 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.023198087 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.035008877 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 4.0103e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.164e-5 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.8677e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035705184 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.6943e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 7.9152e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005527063 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.678e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.1386e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001050825 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 4.9506e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.2573e-5 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.7964e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 6.628e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.2741e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.023570072 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.0191e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001066237 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.2387e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.1259e-5 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.3471e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.025867262 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 7.9914e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.37e-5 seconds)
  done (took 2.51320682 seconds)
done (took 12.092305438 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.036793761 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.098782908 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059409313 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.124803752 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.140663187 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.36477967 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023440367 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.038564939 seconds)
done (took 1.943641434 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.044924001 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026067165 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.033498999 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.025937412 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.021129373 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029940473 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.101951493 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.024064665 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020935038 seconds)
  done (took 1.546319231 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.193543093 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.333307853 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.268537143 seconds)
  done (took 1.986544217 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.037684087 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.061599524 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.032039949 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.341e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.938e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.046659056 seconds)
  done (took 1.381666581 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.230755594 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071201511 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.113594508 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.09590331 seconds)
  done (took 1.710807114 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.168181414 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.145185844 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.284337545 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.105411387 seconds)
  done (took 1.906584556 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.06058844 seconds)
done (took 9.659009833 seconds)
(18/23) benchmarking "parallel"...
done (took 1.083031428 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.025132321 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.022816857 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.03996351 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.035473778 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.022239465 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.105903788 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.044078474 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.145365043 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.039813616 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.022622561 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.242493385 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.024523572 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.029409568 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.035401918 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.02318417 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.121026252 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.028100215 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.118407415 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.040805804 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.088723338 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.120611307 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.082980473 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.228001953 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.029760484 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.088443351 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.023190488 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.028680303 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.080099805 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.090817116 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.045543342 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.042340084 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.028242954 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.027375711 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.026937631 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.023722813 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.035973864 seconds)
  done (took 3.465613582 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.04850178 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249294132 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.088977836 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.150275485 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.05546986 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.03846422 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.183265738 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.146567848 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.250979867 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004233282 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.00021813 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.178343393 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003622028 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.125128182 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.139532508 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.280101233 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.168614826 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049022225 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.207185989 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039743053 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.464631911 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022205488 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.61351788 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.0615e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.00364874 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.9179e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.032435478 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.306137215 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227452226 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.00056359 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.24887737 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.277215464 seconds)
  done (took 13.814095262 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.561151197 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.178908157 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.093602477 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021245921 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.111884704 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.144693853 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020079831 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.091764859 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.084775801 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043592587 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.200037714 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.9747e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072144922 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.239335545 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033234041 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.106596565 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.214101643 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.057669898 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.128293884 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.052482763 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086073379 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.123173533 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.118858875 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.00782041 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.065853882 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059827326 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.033657075 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.063733742 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 8.3222e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.781967569 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.041528237 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.110428934 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.180750876 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051035328 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.113481948 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025613463 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.0193e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.066054191 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.02602842 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.041671589 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000641055 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9905e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.020489573 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019748979 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.3211e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030334916 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.128537471 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.101028338 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.1429e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.089680034 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.027061225 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019809806 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012062606 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022554228 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.5613e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067507842 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.792140916 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.087878785 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.02612639 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.048641422 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.201510727 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.848008875 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.2973e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.002639891 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.209536805 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.062998297 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.102430787 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.6391e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.050943107 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.054e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063271981 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.000147265 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019990245 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109693652 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053800264 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.5342e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001624118 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.094483225 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025681302 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001780133 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.3242e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.5676e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.0533e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.129236047 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.508900542 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.001477112 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.3439e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 7.4253e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001196424 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053224743 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000138909 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.1818e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021654928 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.6722e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.8007e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.108154289 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.2393e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.516e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000157891 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.8836e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001415091 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.012632194 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000763677 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.172675414 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 3.3646e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 7.9171e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.921847184 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.8175e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.006853081 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.7425e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.4253e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.9669e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.004899682 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001129082 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.482924751 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.006893777 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 3.4405e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007567287 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.5409e-5 seconds)
  done (took 24.940258145 seconds)
done (took 43.85531386 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.088243588 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.058353489 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027885482 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.049187316 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.038271751 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.147873746 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100902391 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.036547513 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020031382 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033023062 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.044738926 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037005337 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.021080135 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.054376263 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041395811 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028825088 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032910805 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031158011 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021218083 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.02588469 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026983758 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023195204 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020112866 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020637605 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032385488 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022940525 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027409029 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020275322 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026522585 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027378535 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030247986 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031283793 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019489165 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041098573 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.052283466 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020837565 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027478464 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.9915e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033407454 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.070584272 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.4683e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036483426 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019649354 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.101321629 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072274827 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.02132621 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075358951 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057018243 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039729173 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028340445 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.03865364 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039688638 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025987096 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026114814 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025821488 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030392816 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024605227 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.030371917 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.021050717 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.050269297 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.021193558 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.058598767 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.037304729 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026226623 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.761e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.02065594 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.038935215 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028996278 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.02613953 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02734716 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027438954 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020088859 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026676575 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031606017 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041549669 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030664271 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.053972274 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026025855 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033253226 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027206921 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.027045991 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039709663 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043430108 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032984991 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.058773425 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02123237 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033484706 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029868017 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.0727e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.037135774 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.4134e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.058691889 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034847926 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02937499 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.03200694 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029804855 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.029690159 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037550828 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019646765 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036591813 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020570516 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031750939 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027159106 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035106883 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.7285e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029853222 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024979438 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.8038e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.1264e-5 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.050869887 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027105176 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034601048 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031369645 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021116234 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.028459976 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020626328 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036172636 seconds)
  done (took 5.182432911 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.032220192 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.052053957 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.130938642 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023168643 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.091349493 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.064282758 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.039120895 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.102722813 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.039426347 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.15892338 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.03966599 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.139094048 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.145888928 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.042792196 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026650368 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041817951 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.022231711 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.091010621 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027515117 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.02376801 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028781016 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041489577 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022349003 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.02312652 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021691542 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022536637 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.044026638 seconds)
  done (took 2.807176646 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034502483 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.033486765 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026046909 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.039103846 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023123791 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033204795 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025609906 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.030668796 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036418447 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023547713 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036149647 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021222407 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018562046 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.062163013 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027487122 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027806471 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027933956 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019500081 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022941201 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021970538 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.027816106 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.0287868 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.05460066 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025609341 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.3251e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021662761 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036261028 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033402577 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021481537 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.8898e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021174657 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.01943215 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022398117 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028999571 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021461355 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024116507 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.021136903 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.5773e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019240726 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.021116354 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022611184 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038614442 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020350939 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028772649 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035542736 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.2483e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.035442364 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033115195 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024090358 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041712101 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030295601 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02095523 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.7171e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.48e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023348045 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020712758 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.4867e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.033356927 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024583172 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020144643 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.6892e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.037534781 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021511093 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.038974182 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.033522671 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022179891 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.6274e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000138118 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027612228 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.8525e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.1538e-5 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.6607e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.038633633 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026995198 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.039153516 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023917635 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025180328 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027231712 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.7829e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035571601 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.028866379 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.9952e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020733364 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.7752e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.9996e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027274892 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024055672 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.03323299 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.8637e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.4475e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.041105445 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.4091e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025381611 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.3873e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.02176383 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.1303e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.3581e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.03781295 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.5894e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.7161e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.2095e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03893272 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.8882e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.122e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.4136e-5 seconds)
  done (took 3.46808284 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033564725 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032017431 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056570348 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037530932 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048243828 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037950021 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021513092 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032502833 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021662718 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.025666788 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021545946 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021738957 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.044376157 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.0393169 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045284016 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034873053 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032322676 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.050854247 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021724865 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.044147057 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.046658546 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033561062 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.039921342 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.03667043 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031281 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.048284405 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.038006889 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040729466 seconds)
  done (took 2.298309565 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027404083 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027293326 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.023792538 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028655655 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030176838 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031000214 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031337469 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021848359 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026808182 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022082875 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.029650599 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.02840172 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026266305 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023882849 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032006539 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026958295 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.029738639 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022774006 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026514253 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027941898 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023153204 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027362869 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030480561 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029458136 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.03000909 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026415576 seconds)
  done (took 1.988573403 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023514096 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.0278495 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.029979361 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030587465 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.036381252 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066106603 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.039620449 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.032941281 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020827235 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.030975592 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005763467 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.021959786 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.035190318 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024480641 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022013218 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004895936 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.021202181 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.01213919 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027522601 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.02155215 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.02262295 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011959428 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.00555257 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013084641 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012368415 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 3.078e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.029327233 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.02673245 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026962515 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.00901552 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003322928 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011828044 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.021857223 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011685334 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005565121 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.010044602 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.7005e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003510485 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.01132784 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008339659 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008541595 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.7762e-5 seconds)
  done (took 2.063613439 seconds)
done (took 18.922461227 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.059319694 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.167413539 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.04604447 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.056045889 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.074111725 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.074600961 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.031666219 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.05933066 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.041828089 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.081995654 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.046078272 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.108104446 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.041493166 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.068921572 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.9509e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.054788337 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 6.4529e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.073390818 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.028030545 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.082125153 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.029338695 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.8271e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.078255141 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.094698686 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.065230233 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.046927672 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029377774 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.068472429 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.067372958 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.086918361 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.04861291 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.0551e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.061976972 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.067931987 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.065037568 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.039685172 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.076659419 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.9709e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.068664681 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.052972618 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.052515077 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.073743517 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.044831483 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.088357065 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.076587069 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.059245993 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 3.7174e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.092753083 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.059846645 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.7182e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.063823656 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.048612563 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.067213931 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.059087689 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.058793371 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.081121108 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.059027427 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.0141e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.090068786 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.032752502 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.074446987 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032241198 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.8326e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.048630516 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.061012349 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.032703313 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.047178054 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.5215e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.077239884 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.7864e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.2249e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.085432642 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.5797e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.04490077 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.064409922 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.048082097 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.08993041 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 3.1699e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.8081e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.059397343 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.064969976 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.067913487 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.040709329 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.7299e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.3288e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.072349258 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.313e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.055760522 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.6179e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.7874e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.044725727 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.058102273 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.057912927 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.066928226 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.062333702 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.067724133 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 3.1538e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.032734846 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.051291038 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.066421131 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.075607596 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.074292709 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.4495e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.063982189 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.623e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.068401516 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.070180105 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 3.8616e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.07030133 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.7702e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.7983e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.9131e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.033073747 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.7595e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.8186e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.066947612 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.065402794 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.051650436 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.058198058 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.853e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.029125843 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.0575e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.030508329 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.059311292 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.7761e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.071773473 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033963052 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.391e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.7475e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.9201e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.067184158 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.9044e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.069882 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032744929 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.8743e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.063579428 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.06852399 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.054759174 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.062558208 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.8701e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.080143854 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.078413965 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.051840043 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.070445168 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.4766e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.5644e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.032834812 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.069318919 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.057473494 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 3.3948e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.8732e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.9549e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.2382e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.061900239 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.6549e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.05216857 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.7529e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.885e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.8564e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.070823251 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.5011e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.8806e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.8122e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.7821e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.067822314 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.7391e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.8876e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.051775507 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.3526e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.037482278 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 9.8611e-5 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.6249e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7783e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.058720256 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.052185492 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.061659128 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.074973508 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.358e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.058653266 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.063136097 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.8967e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.9265e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.1955e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.1657e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.3237e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.1166e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.6562e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7609e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.7415e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.6699e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.051998435 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.2401e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.0294e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.0599e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.05193825 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.041659542 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.1401e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.2505e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.030066402 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.058061223 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.4542e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.9995e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.038357802 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 3.1714e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.064941562 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.2616e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 3.2608e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.040761888 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.7951e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.7019e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.029286436 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 3.3908e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.3315e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.036187715 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.232e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.033367619 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.061352857 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028662238 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.5089e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.3432e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.7589e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.039834162 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.6406e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.089e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.066467055 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.5407e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.7057e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.069984593 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.8696e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.904e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.060135368 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 3.4041e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.4315e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.2497e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032662418 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 3.9614e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.056261916 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.3488e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.3344e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.851e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.4335e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035480147 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 4.1792e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.0096e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.059746866 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 4.5867e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.025170033 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.073226081 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 3.4667e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.3803e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.9521e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.5877e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.8929e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.0617e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.061381895 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.3526e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.1766e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.493e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.045231378 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 3.8123e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.4362e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 6.0402e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.5705e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.4857e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.073e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.9011e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.1438e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.0345e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.3983e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.3707e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028812493 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.06531599 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.762e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 3.2622e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.040764957 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.9383e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.2305e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.6846e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033227751 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024936663 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 5.4634e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.5063e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.054341786 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.6571e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.0119e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.3369e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036934928 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 3.9188e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.9337e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.0774e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.9975e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.1013e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.9087e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.817e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.074982384 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.032056012 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.037746804 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.048842831 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.5762e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.0689e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.072026868 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.434e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 4.2858e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.1542e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.1867e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6326e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.6988e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.8063e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.055072229 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.5303e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.1578e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.8679e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.9293e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.6325e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.5071e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.7477e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.079580457 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.065119685 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.3873e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.045995923 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.9221e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.4979e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 3.0317e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.1179e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.8171e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.6107e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8518e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033154139 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 6.1701e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.5377e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.1138e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.2715e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.1619e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.3796e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.7302e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.3932e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.048952994 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 4.1415e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.1151e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.057573752 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.37e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.065045071 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 3.2629e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.194e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.0085e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.9586e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.060027723 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 3.216e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 3.0933e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.2592e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.3301e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.5629e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.1418e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.9391e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.4015e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.4287e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.4475e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.5783e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011150377 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.966e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.8369e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.3153e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.8471e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.133e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.3204e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.8638e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.2005e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.1959e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.1027e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.144e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.8258e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.6375e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.8543e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.8291e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.3004e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.0261e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6346e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.0539e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.7865e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.8571e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.01161692 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.866e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.2679e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.6705e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 7.1789e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.7132e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.2616e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.0789e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.5341e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.8377e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.1808e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.7089e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.8118e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.5151e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.9251e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.739e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3496e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.8024e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7034e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.2406e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.4824e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.7481e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.085675421 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.4362e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.4304e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.6794e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.6023e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.1521e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.9861e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.4298e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.5374e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.032710919 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 4.0494e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.0806e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.6109e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.0674e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.6968e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.4804e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.7384e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.9124e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.6787e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6582e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.0597e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.030736393 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.032016739 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.1958e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.3964e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.058268698 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 4.5524e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.2575e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.9504e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.4671e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.0991e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.1676e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.8763e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.4088e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.5724e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.3794e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.3643e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.1744e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.8518e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.1435e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.0986e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.5726e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.7041e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.6701e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.1393e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.7043e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.6698e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.3673e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.5641e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.2682e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.9456e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.9425e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.5545e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.0493e-5 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.5777e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.752e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.3045e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.068448346 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 3.0118e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.5488e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.1839e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.3734e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.9973e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.086186327 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.076264112 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.7242e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.6077e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.0408e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.4354e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.9704e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.1045e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.2392e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.6322e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.7298e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.0797e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.5759e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4751e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.9977e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.7343e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.1172e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.3022e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.066539814 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 3.0646e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.4327e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.8894e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.194e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.701e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.4998e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.2036e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.2628e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.5651e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.3019e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.060719047 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.6813e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.060436699 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.1766e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 4.0305e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.2027e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.9391e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.473e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.0386e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.030590123 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 3.9958e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.6334e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.1269e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.5989e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.1117e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.1349e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.3196e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.508e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.0184e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.9417e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.5716e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.299e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.0745e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.16e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.7485e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.035e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.3381e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.406e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.0595e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.1235e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.2975e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.4006e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.6649e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.4787e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058829935 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.0309e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.6517e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.028732708 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 4.1219e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.7268e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.3302e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.4685e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.7977e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.8731e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.0888e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.1884e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.3895e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.7797e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.9967e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.4454e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.9669e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.552e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.3577e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.4649e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.5348e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.321e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.0018e-5 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011342452 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.032419792 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.6493e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.5348e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.3439e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.5613e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 3.5975e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.073e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.1326e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.057177965 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.8378e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.040507588 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.8532e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.8619e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 3.1281e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.3314e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.2228e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.947e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.5368e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.4044e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.9158e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.255e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.8487e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 4.865e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.4516e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4878e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.0045e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.9307e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.8531e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.5518e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.3585e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.568e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.1063e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.2603e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.2601e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 3.1852e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.2388e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.3424e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.8733e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.737e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011335476 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 4.3024e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.2349e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.3365e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.293e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.6322e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.328e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.7179e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.1511e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.0727e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.415e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.2102e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.4376e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.4561e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0216e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.6665e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.3574e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.4971e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.8308e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.7238e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.8186e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.4454e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.6296e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.6863e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6132e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.5102e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.1336e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.7806e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.9415e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.3779e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.4545e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.836e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.1421e-5 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.0818e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.7161e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.7927e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.121e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.5019e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.5529e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.4003e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7482e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.5978e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.4436e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.6363e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.9748e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.2257e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.6269e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.6767e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.3217e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.0946e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.6815e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 9.904e-6 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.7607e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1084e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.2594e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 6.1829e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.4299e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.0859e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.8215e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.7454e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6215e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.8244e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.553e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.7996e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.4818e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.6381e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.5261e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.4637e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4844e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.5171e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.4458e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.4888e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5571e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1007e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.6467e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.9306e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.8319e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.6654e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.1289e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.2261e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.5022e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.5914e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.207e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.7413e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.1921e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.3561e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.5424e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.9653e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.672e-5 seconds)
done (took 11.825450794 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.041219059 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.244973887 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.380054229 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.174559256 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.278182383 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 1.346766989 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.046822804 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.399813288 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.404689863 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.106564316 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.5962255 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.08021687 seconds)
  done (took 39.393235685 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 8.759525585 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.406831185 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.362137099 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.107749144 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.278019793 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.689193627 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 7.919303273 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.391038644 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.39038285 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.10786531 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.589021805 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.083954179 seconds)
  done (took 22.946231818 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.644380922 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.093749883 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.140931928 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.087836228 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.122951206 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.143576186 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.852343694 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.055933613 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.37719033 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.039855354 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.380100668 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.044271466 seconds)
  done (took 10.0530887 seconds)
done (took 73.575125794 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028069182 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030410336 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.119821011 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077526302 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.062720521 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.038352185 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.039371652 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.03590461 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.116149604 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.145060769 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.4448e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.0465789 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030399458 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.119628128 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032195496 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031198105 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026091994 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.033406922 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.060427362 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.042000124 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038397744 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.23619331 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.031112297 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030902964 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.025030602 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038100187 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033597732 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.113422116 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.175310638 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.037993169 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.029758316 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.000108767 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.030352531 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.098005802 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.058737023 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030943908 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.031729738 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.217026236 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.181604789 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.032801645 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.03883965 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.099857744 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.038605906 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.199100782 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.03084904 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.163866801 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.123260637 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.031207482 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.030933618 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.046889943 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025276245 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.030932914 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.114128859 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.118368746 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 4.1355e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.6676e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.19944122 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000238828 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.399e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.036501678 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068065296 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031451602 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021331456 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.027563771 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.035089411 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.042510111 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.030242148 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.030511766 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.184946905 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.094731607 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.117096563 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037700056 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030527901 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.053281337 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.038579931 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068794206 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035112711 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.00013116 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.030385733 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045897098 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.028161256 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.092037528 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.107957103 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 8.5189e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029385972 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.034746681 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027306753 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.133023011 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 9.5522e-5 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028389717 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 4.5982e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.027845842 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.141016374 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029393125 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028862999 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.027648895 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029934425 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000279669 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.8533e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.144300631 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.195993274 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.091697855 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032051045 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.031335983 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.03323687 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.159270546 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030619666 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.077884662 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.00010225 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027395433 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.032963206 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001832599 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.030624309 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.000104072 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.03141596 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028699364 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.113766684 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.03061701 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.037755737 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030399848 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.146810932 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.095824286 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032063061 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.039636854 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.028429824 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.16489073 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.028273927 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038589327 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.096040287 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020207204 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.00011325 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.029053859 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029833006 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031725453 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.038026067 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029765232 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030132775 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027518277 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.087952603 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.114216164 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001266883 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.090204679 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048994885 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030118728 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.110070772 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.033161472 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.054875129 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028604896 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.091340595 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.0167e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.224796648 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.02724609 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029720208 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 7.2601e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.167995901 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.176955535 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037049315 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.7426e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 8.0277e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.00259442 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.249698908 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.00014557 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.03184104 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045456449 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029605526 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.150317124 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.135802525 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.090652029 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002584313 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027671419 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.034104282 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000949537 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.1922e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.048636927 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.233668258 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001231473 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.028995502 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.141715967 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.035804441 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 7.0538e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.088567829 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.02818601 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033079271 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026496982 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.159079282 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029874116 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.13434976 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032130925 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.03216345 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.02985879 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.110914652 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 9.9459e-5 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.027776197 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.176021558 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026213735 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000103914 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.023877119 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.030265059 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.0039e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.087850086 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029324581 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.036566355 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.095382227 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033418212 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000148406 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.0291603 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000108096 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.024861678 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027849309 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.019720826 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.036492164 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 7.5671e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.085306474 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029248231 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.107565759 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.266795558 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.153180139 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.6123e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.3777e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029946246 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.289880224 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 7.6159e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030236745 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032062467 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033906931 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000119512 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.0531e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.03145304 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001791079 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034461842 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 8.4836e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.030196391 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.000110637 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.112307213 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 7.5833e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.5643e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036986136 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.034304552 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.042627898 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.088745763 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.091917264 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.6343e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025991271 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001169085 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 6.1588e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.034636916 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.028042756 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.0417e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.03566268 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037396016 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.4613e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.141022111 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 8.2395e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031394125 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042855379 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.127e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.7227e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028943502 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024663892 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065047329 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044946463 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 6.0259e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 9.197e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.4816e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031078918 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029223856 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.0556e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.5077e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.2485e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.032509879 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.8289e-5 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002303737 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.087267428 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.029187807 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.028598255 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033615561 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001626232 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.107143334 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.4677e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.028748626 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.062050414 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.7693e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.8684e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033197104 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027481857 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025935885 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.035841891 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.248194469 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.110914185 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.9083e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.2829e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029268243 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.033141732 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028305498 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031769727 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.000112488 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.882696629 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036516092 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.175060021 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001923708 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044583406 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001827616 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.171328979 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 7.5353e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036343386 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 4.4291e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029684981 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028650239 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029162648 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035562934 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.035933862 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.9005e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026584123 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026158601 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 4.717e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.7147e-5 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.597e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033065397 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002383153 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.6609e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000131897 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.032840367 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.035232139 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.214244628 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033768725 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.057399268 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.043941543 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 9.8266e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.001039606 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.6511e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031348082 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.7899e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 6.7284e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.0567e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 9.2111e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.09404963 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.8152e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001810645 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.1676e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 3.0499e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.6833e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.2881e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.506e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000794614 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033292726 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.2829e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033935863 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000136669 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.069994249 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.224829596 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037574825 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043630039 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029673892 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045730922 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000107501 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001086722 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.134402461 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000106906 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.991303198 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.032675667 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.5289e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 6.7439e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.6791e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.145e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029784552 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.3193e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028866052 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.3847e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000135976 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.116531837 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025640012 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.033841385 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001874012 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.028163159 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029551184 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.5149e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.00085198 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.5687e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037851583 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042834404 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001920983 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.2753e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002878531 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.027045053 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033171995 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000121392 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.3925e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.7832e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.9791e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.991e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.6605e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031156525 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.5549e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.00184467 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028368703 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 7.814e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 4.3754e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.9112e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031700984 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.4417e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06627211 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 7.7277e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 6.7268e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031550867 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.033330283 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000122114 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.6175e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 4.9467e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.0615e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026051103 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001006049 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.2673e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.8821e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.0001174 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.385e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073366682 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.032317075 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 8.3924e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.02860557 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 6.9134e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.476399274 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.2933e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 4.0483e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.7444e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001896753 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.8415e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031689761 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.0513e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.04321033 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.6543e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.036376428 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.311032514 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033726774 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035925716 seconds)
  done (took 22.892294519 seconds)
done (took 25.23927903 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.816666656 seconds)
  done (took 10.150200699 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.346333041 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.370165406 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.387723496 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.343459913 seconds)
  done (took 31.784702691 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.565578454 seconds)
  done (took 9.903950013 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.735454869 seconds)
  done (took 10.072698822 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.527787952 seconds)
  done (took 9.861696084 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.393920224 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.371693967 seconds)
  done (took 17.099988275 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.442717002 seconds)
  done (took 11.776171278 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.681867288 seconds)
  done (took 10.015617946 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.336864847 seconds)
  done (took 9.668743748 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.335763468 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.33516639 seconds)
  done (took 17.006095484 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.355807087 seconds)
  done (took 9.688856179 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.333041031 seconds)
  done (took 9.667561286 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.415931635 seconds)
  done (took 9.756647764 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.694427107 seconds)
  done (took 10.026717686 seconds)
done (took 178.895507408 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.368611424 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410075189 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.399235843 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.868735543 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.733116215 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.340972582 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.336978366 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.340594547 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346349157 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.334154906 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.335162166 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.335563795 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.332873632 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.332873168 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.340234742 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.3378357 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.336870278 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.338257772 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.338522329 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.339800236 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.60349829 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.342145087 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.3436691 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34622416 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.343785215 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.345214501 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.349606829 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350263486 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34819914 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.351969357 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.349599361 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.344275814 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.35601993 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.348895701 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34892539 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.351286811 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350943491 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349936383 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.344532716 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.346892225 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.345987363 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.348844098 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.905588912 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.614871559 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.357207377 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.349820377 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.358696869 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350043756 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.365221898 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.35775357 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350952187 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.361270437 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.351653577 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 3.087777969 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.354241777 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.354467265 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.361653567 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.355690194 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.355125082 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.354284556 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.355974104 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.358136046 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.362263821 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.642005749 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.365197492 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.356091779 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.364498155 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.363553234 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.36162327 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.354820008 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.367573525 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.362270238 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.356687747 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.356836074 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.201470306 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.403943237 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.355420257 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.359015097 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.362866919 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.369791347 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.363225592 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.356442716 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.358449997 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.376785259 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.366489638 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.361554792 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.369029561 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.362723384 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.39722843 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.36685432 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.36432014 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.358693804 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.355037502 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.367941205 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.759159393 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.362382077 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.363344144 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.362101812 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.359055023 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.560390897 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.358267002 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.360873577 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.360881156 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.359340645 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.359868968 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.703186674 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.362584953 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.35878657 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.390242823 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.370096863 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.774005022 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.576872851 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.371215937 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.366095473 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.796832089 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.367082759 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.368672216 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.363015706 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.361656558 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.361409162 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.361599831 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.374328471 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.360422028 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.824749832 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.365420889 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.36358682 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.359044079 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.429037071 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.36154971 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.361194696 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.365241393 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.363799529 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.963175984 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.370091543 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.374388496 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.358701279 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.363856138 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.210842075 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.386688282 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.362955877 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.497062992 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.36215033 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.376417793 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.365592254 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.361888415 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.360721004 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.367074181 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.370304068 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.359026263 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.458725945 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.365205431 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.496510627 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.057605705 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.373313613 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.363094319 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.360536615 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.391796968 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.364071202 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.361112909 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.536349183 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.362685284 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.373493868 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.362090451 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.372730751 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.362388721 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.359237784 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.36367685 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.36152646 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.37488876 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.499031676 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.363589589 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.364183726 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.361761373 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.739103019 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.361929532 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.745440797 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.374775644 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.361199528 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.366478712 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.363207413 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.367045596 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.496855239 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.368631626 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.362747224 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.364630186 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.531288414 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.371489883 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.366800042 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.366660252 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.363633491 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.760090911 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.373019868 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.365305152 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.373470132 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.363722812 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.363324504 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.364545723 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.627950002 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.365376112 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.368757809 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.26760828 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.368170326 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.371928671 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.382379387 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.535668319 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.377795663 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.366161069 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.366283902 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.36288051 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.364390478 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.37672993 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.370243969 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.366435921 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.898796935 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.36562851 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.365419221 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.366620632 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.477231285 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.478959833 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.376927325 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.366973488 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.362410243 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.366121301 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.364281842 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.367278513 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.514354586 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38238114 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.365802162 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.365102271 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.366355297 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.384071852 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.366188851 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.364884866 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.36842717 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.364436828 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.366128686 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.365371537 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.364757956 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.369298553 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.364808789 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.375404271 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.367063705 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.62502372 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.376953102 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.365162747 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.371562573 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.366562174 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.365360296 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.363085625 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.829041102 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.825335373 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.405362839 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.370703178 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.775589122 seconds)
    (255/608) benchmarking "3d"...
    done (took 3.921285199 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.365049465 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.374918487 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.362861928 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.369219967 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.311832739 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368239391 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.36631523 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.855614229 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.370408317 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.363974856 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.15044096 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.486955903 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.385126723 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.369899566 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.961922785 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.526941539 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.881028358 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.471358949 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.36394232 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.377051695 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.377189804 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.371597185 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.370224665 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.367597317 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.372087394 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.915112457 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.373935603 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.371273218 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.366241581 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.365539072 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.375912398 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.372006737 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.364761955 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.306383627 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.669062054 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.360802558 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.36356042 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.464715767 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.477097444 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.372558016 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.36718202 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.777543423 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.371873431 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.371571035 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.375136469 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.472973003 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.370668044 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.518050598 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.819805858 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.369542427 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.366637562 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.365235458 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.371630113 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.365882528 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.364814699 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.364339352 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.370646477 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.366048738 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.368764522 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.366853459 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.465485449 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.373647869 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.023309829 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.36953341 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.36810209 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.362797244 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.367374178 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.36594901 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.363062389 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.368850154 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.37892882 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.362142522 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.949340262 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.373619203 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.367324153 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.367349545 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.36544947 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.368054051 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.5264385 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.616188528 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.627579403 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.369392654 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.366271452 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.367392835 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.21364144 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.789363775 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.367930401 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.305410979 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.369905978 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.620257571 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.397353764 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.709416564 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.368535125 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.370130281 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.369782334 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.367492322 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368676068 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.381206042 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.516945099 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.37293733 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.368833929 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.373983115 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.372233962 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.375645216 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.675469587 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.40116394 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.376747114 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.368992016 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.285614013 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.395910435 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.714748693 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.490301471 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.377438066 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.374216485 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.370345177 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.581614437 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.368982355 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.368951697 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.567452022 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.369879649 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.368658629 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38049446 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368506188 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.371316442 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.369148588 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.373293411 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.374024363 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.378241339 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.390766472 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.370342134 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.369857938 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.378958153 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.379612378 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.373591113 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.372856853 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.374707625 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.376910085 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.367493877 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.369916136 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.372166391 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.378200173 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.379791351 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.734187014 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.716633734 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.369490676 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368694238 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.707316086 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.366219594 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.36532596 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.384800289 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.367640369 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.365279966 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.368071288 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.365531988 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.3678072 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.620948146 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.378588101 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.288756584 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.950243402 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.378461258 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.493169799 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.915761712 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.378652725 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.36543513 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.733837143 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.654032848 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.364976361 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.377042765 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.369106206 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.378415731 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.371120609 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.396273706 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.370728838 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.727004571 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.370884297 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368274388 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.367010768 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.366266452 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.364963992 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.65033885 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.367281147 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.367613667 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.378752092 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.365467174 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.495787122 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.808890782 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.421247759 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.504169693 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.479546481 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.374499432 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.371013355 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.367428726 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.395617428 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.367487194 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.36808661 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.37023226 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.364639373 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.369803862 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.365199327 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.385502154 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.39494592 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.365269597 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.370803927 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.377883983 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.366608661 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.37068398 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.371746863 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.860674614 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.815680949 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416076906 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.499642685 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.365602814 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.374703946 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.364088213 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.365391048 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.363416853 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.375994128 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.365150821 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.367034466 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.370989516 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.366283299 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.366808773 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.373072812 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.373836981 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.369282863 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.371450874 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.365663719 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.364965317 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.36706668 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.372522987 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.368798049 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.368452104 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.372064129 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.371090786 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.374514862 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.378356255 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.369799148 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.366259542 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.370582224 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.009899705 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.380822757 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.097507101 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.373343597 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.371631356 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.296520321 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.378705105 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.376815147 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.370085009 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.374797826 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.372296681 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.372445717 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.540594211 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.371190184 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.366640115 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.370167308 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.372091493 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.365430539 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.473936166 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.405250866 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.368204563 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.844008956 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.374074901 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.374543164 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.372187607 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.373780252 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.382552246 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.373791505 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.370615485 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.371837312 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.373258144 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.379797936 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.374434657 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.375023195 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.371545713 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.99087551 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.429071389 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.300242204 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.113369556 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.368843074 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490663061 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.373740368 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.953637575 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.379899928 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.377813334 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.369454857 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.709536785 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.371172856 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.015438717 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.552165542 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.477661765 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.620733748 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.375613085 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.4433462 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.587055209 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.474838443 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.513776541 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.430836607 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.628177422 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.371839551 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.371232543 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.367504263 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.371512495 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.667273837 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.369255743 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368834446 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.285580657 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.383893809 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.381185079 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.369965254 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.166864126 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.823233095 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.433577902 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389024768 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.377822036 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.383920691 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.368918392 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.380907653 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.368201562 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.372314474 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.378290521 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.371741032 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.371436333 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.476184386 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.373119117 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.37177348 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.369819363 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.3691686 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.368212487 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.380154207 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.656751994 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.95252225 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.384685659 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.370503426 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.369158669 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.390877405 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.202698908 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.372378944 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.372120034 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.368071532 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.368387895 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.370854537 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.371904907 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.371536463 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.378618991 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.368840941 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.382568264 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.054490011 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.372480715 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.380058401 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.768067652 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.83361802 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.372765062 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.371022313 seconds)
  done (took 3990.016423731 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.59740074 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.451929671 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.268242419 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.347550771 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.783036523 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.935253586 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.301088404 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.803543214 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.181749042 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.238669835 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.255544158 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.281020039 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.104864299 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.190908806 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.244442466 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.546153334 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.24943956 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.475729738 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.47837636 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.900167861 seconds)
  done (took 64.005104811 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.387580504 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.54545347 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.402936365 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.370932974 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.371595052 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.371088234 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.370753823 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.416923131 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.859334661 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.12519428 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.293793824 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.377132241 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.211595636 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.371484864 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.82589954 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.377449114 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.296280751 seconds)
  done (took 95.347119566 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.416703968 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.576825254 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.408886447 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.403547746 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.405230495 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.519876583 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.614080371 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.458404353 seconds)
  done (took 62.178197659 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.832261048 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 2.889722681 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.377495737 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.074718769 seconds)
  done (took 14.547444123 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.374997551 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.451365187 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.369139715 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.745917658 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.37681998 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.451111549 seconds)
  done (took 34.142814446 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.262069287 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.536805132 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.374645753 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.371814588 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.370982992 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.218124408 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.556248427 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 2.979088973 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 2.994414599 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.384249114 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.537380912 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.498568081 seconds)
  done (took 55.453778697 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.724615224 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.785227573 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.597198579 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.572018401 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.7862853 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.831274569 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.468455891 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.577997332 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.371246473 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.40807795 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.586777845 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.425006433 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.61790222 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.433965859 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.618746319 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.690074444 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.788714209 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.407103794 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.601395887 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.774230256 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.596917853 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.598926669 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.687044796 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.001990431 seconds)
  done (took 70.324164612 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.604534921 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.59535264 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.625553904 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.633379324 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.629378705 seconds)
  done (took 15.459938601 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.425287913 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.473860916 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.529406928 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.490043115 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.373932445 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.372671847 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.371379807 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.93365353 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.808333862 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.875146307 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.962461237 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.421722652 seconds)
  done (took 106.406805472 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.384433415 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.382934277 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.377184117 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.378949194 seconds)
  done (took 31.892918709 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.426686003 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.454823437 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.76118643 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.559620757 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.436536453 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.612010881 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.598439468 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.651264554 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.472843972 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.477162387 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.450813328 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.923249201 seconds)
  done (took 36.19477072 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.727060448 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.689549116 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.732343001 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.729710407 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.689736524 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.672007562 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.673701979 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.73609262 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.733217301 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.734270168 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.61098453 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.687499698 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.731650612 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.053579915 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.735456057 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.611548728 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.727408909 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.730282239 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.053161524 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.730009685 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.608900985 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.687313337 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.733352052 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.609287363 seconds)
  done (took 67.797222803 seconds)
done (took 4646.292845662 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.987291786 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.145469986 seconds)
  done (took 8.501244484 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.736832596 seconds)
  (3/15) benchmarking "20517"...
  done (took 2.929322056 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.212889072 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.227679355 seconds)
  done (took 8.81055859 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.434516672 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.986648054 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.036042168 seconds)
  done (took 10.82722707 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.537109248 seconds)
  done (took 4.905082107 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.877235981 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.711172145 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.558240671 seconds)
  done (took 10.515482037 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.404449979 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.132205069 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.521163121 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.659885469 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.853434314 seconds)
  done (took 15.537576602 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.369622266 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.368213558 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.505613704 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.759912646 seconds)
  done (took 24.372357524 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.380279557 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.395954802 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.37872445 seconds)
  done (took 24.527800116 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.613980565 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.403965551 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.408979305 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.408913606 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.409215087 seconds)
  done (took 12.000656251 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.932363141 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.805558464 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.837140234 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.916071127 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.227188853 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.606130145 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.829826436 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.742575193 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.534106481 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.694212742 seconds)
  done (took 30.493947577 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.912682041 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.7701385 seconds)
  done (took 8.053531303 seconds)
done (took 176.597789308 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.382722472 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.390601037 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.383480184 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.387458876 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.386817142 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.378271086 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.380404326 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.383733781 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.388318073 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.383483398 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.383622173 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.384548677 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.529972659 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.382791728 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.391041347 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.386664296 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.392070243 seconds)
  done (took 43.066196495 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.405352241 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.77773981 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.183835777 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.660519427 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.226489529 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.403742748 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.584707039 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.112662311 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.24709336 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.185572041 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.120161686 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.006239471 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.383625224 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.992231325 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.302398123 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.095786412 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.309620234 seconds)
  done (took 83.367679811 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.382900921 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.380138566 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.379575491 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.380515713 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.378454505 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.378007005 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.376292472 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.37645325 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.374926876 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.37550635 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.37806129 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.37926277 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.404571247 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.382409618 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.386911879 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.378862152 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.387052698 seconds)
  done (took 42.85195362 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.380347454 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.424087241 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.392651424 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.415327314 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.410082078 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.378694119 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.381832385 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.39329319 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.407725131 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.389516391 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.388876343 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.399588123 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.268182706 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.400023504 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.400348367 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.408573918 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.402733598 seconds)
  done (took 44.013675818 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.378933982 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.383912521 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 8.073474257 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.41838775 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.438046486 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.376212269 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.794887928 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.379910266 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.775986432 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.545276886 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.547572755 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.882072911 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.804640139 seconds)
  done (took 84.17087008 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.374095499 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.371957582 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.376242536 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.374060685 seconds)
  done (took 31.874553074 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.37343221 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.372026009 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.374173636 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.374116106 seconds)
  done (took 31.864737505 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.403119985 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.395783382 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.411738462 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.392829472 seconds)
  done (took 11.97385856 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.617840677 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.112953638 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.109827238 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.093922053 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.926858359 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.31961545 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.088967016 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.528614869 seconds)
  done (took 28.169462805 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.383286358 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.722609922 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.556267433 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.700090675 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.583766501 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.390313797 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.405050725 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.605633783 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.76060459 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.617724236 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.598264226 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.606395812 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.376870552 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.536247649 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.576561736 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.570118379 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.630924891 seconds)
  done (took 50.992857089 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.381515001 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.385017212 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.384876775 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.385565634 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.383125 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.380157553 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.37991993 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.384816547 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.38357334 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.3835784 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.384898088 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.381560432 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.466686919 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.38140475 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.3920175 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.383386981 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.393116173 seconds)
  done (took 42.989675986 seconds)
done (took 497.716919157 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.376424882 seconds)
done (took 9.746426063 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.395754671 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.496553342 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.376122307 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.734576246 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.377553615 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.403935064 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.398451893 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.412924052 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.401747693 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.384867147 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.208342402 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.276509281 seconds)
done (took 75.238335599 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.72169313 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.4808165 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.529739162 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.238409242 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.041829095 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.537870943 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.228491056 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.418292808 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.800481297 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.539887597 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.370271115 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.317324097 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.013956394 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.554439203 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.139992419 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.532701047 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.154912987 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.800591441 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.684125235 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.733038192 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.029834885 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.101660517 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.368824372 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.557820372 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.3710113 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.448753377 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.209498706 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.172921755 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.576777649 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.456172919 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.884122315 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.130322429 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.584635501 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.649875567 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.475840678 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.377955159 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.729640114 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.065833168 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.662725909 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.092128806 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.377351784 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.641827909 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.343286566 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.119326058 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.032701603 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.374391976 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.285204291 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.511316867 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.54256504 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.150608555 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.523489048 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.328214818 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.611305489 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.994558068 seconds)
  done (took 234.083481836 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.571053776 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.599664354 seconds)
  done (took 17.606884151 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.645673556 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.408898416 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.682060991 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.327388881 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.480614432 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.804090906 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.835882498 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 2.98713218 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.81823552 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.533717324 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.90521191 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.605554031 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.006666431 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.88750224 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.899060117 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 2.966791445 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.640177411 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.005914741 seconds)
  done (took 61.814406102 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.824648456 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.97970904 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.375547358 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.813912878 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.379274591 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.366568889 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.373878985 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.103404304 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.651993755 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.790709684 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.858784747 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.373837643 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.375590976 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.912833094 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.891967668 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.156980849 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.404488293 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.369911925 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.386946205 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.375034655 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.79239505 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.378438779 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.678186776 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.401920306 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.568633185 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.387663966 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.946116401 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.814253822 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.382527078 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.631095961 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.379585792 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.369767463 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.363983531 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.37646627 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.357021483 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.887639362 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.372331251 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.629260394 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.38066577 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.095219627 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.37367787 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.379461303 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.734292917 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.378173991 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.811172014 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.382028115 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.201184127 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.903362272 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.379951836 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.134148382 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.725315473 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.388660419 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.895953898 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.951622661 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.548072022 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.602571268 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.931475187 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.384872255 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.932644171 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.840314754 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.376904083 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.370478916 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.870760979 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.380366268 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.844769846 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.816750039 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.324847307 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.375468937 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.887167077 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.381623855 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.766644091 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.387355519 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.370017179 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.96445433 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.392747087 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.296040592 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.370876826 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.320655175 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.025942876 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.37547926 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.393469678 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.10860483 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.886510964 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.376306774 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.373898144 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.73983508 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.801563356 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.405070038 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.333275876 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.380535857 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.379425785 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.220857377 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.379658301 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.372515739 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.202007454 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.86762861 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.303344658 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.379469335 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.86665015 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.388107593 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.372004085 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.767460958 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.175665174 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.377050233 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.599046209 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.221370426 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.672821802 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.8556705 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.375253587 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.862920301 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.904315096 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.374602937 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.648798939 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.981219922 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.931703031 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.352295503 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.375127274 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.379395254 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.371895327 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.862010735 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.388981058 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.3704589 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.377623071 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.834815193 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.382945069 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.897610368 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.898905503 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.154650002 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.384740376 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.380083484 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.374745709 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.999101176 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.312354104 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.388128734 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.375726056 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.848794533 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.381825605 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.856477067 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.387141417 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.393217512 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.397662368 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.062268589 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.73626611 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.379988002 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.386278436 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.38814563 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.864166211 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.609418076 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.546010303 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.375793214 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.601649043 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.644621915 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.838854173 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.372390977 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.591597628 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.058188679 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.377380343 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.755190968 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.82002592 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.65358115 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.389001516 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.745708147 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.388725037 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.663169478 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.864652886 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.372674534 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.373013563 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.795210993 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.770482067 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.559208363 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.130710095 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.93459545 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.161543694 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.93862589 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.373308516 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.372930618 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.061325269 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.378455314 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.374345692 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.381675242 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.107370958 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.853399455 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.373130785 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.800986695 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.336702239 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.862203475 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.380383026 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.89898099 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.689528812 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.395526074 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.378970089 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.385950011 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.733307148 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.846722477 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.382282121 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.37318549 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.862235895 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.094554041 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.902384843 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.376223309 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.134776416 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.37259661 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.36919758 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.867288998 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.374902204 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.380489691 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.548264777 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.903029333 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.377997863 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.374699904 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.922567535 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.051787079 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.645052809 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.862747926 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.316914837 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.387620152 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.881361182 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.381402595 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.373895774 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.920515975 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.750840748 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.383709835 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.880749625 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.371771341 seconds)
  done (took 1129.49261076 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.896819608 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.442709561 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.719670815 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.203134403 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.188227802 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.455948754 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.924856207 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.498353603 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.789212349 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.835364255 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.66738209 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.418607141 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.270188279 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.660218204 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.663049858 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.559889054 seconds)
  done (took 87.568105797 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.448238956 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.416296006 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.46446477 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.416642909 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.430602806 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.454084105 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.429504465 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.456211769 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.443039166 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.419049307 seconds)
  done (took 76.75051798 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.840860588 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.504945077 seconds)
  done (took 12.715923491 seconds)
done (took 1622.434323819 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.406476848 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.72877241 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.478947031 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.41645674 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 3.996967374 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.403466126 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.40410553 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.403980528 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.845257766 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.189941526 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.530684257 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.950923723 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.878795082 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.471774076 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.404660087 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.405355661 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.861532424 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.236333622 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.365312649 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.42419747 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.410826939 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.408962437 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.417300776 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.413729156 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.903208063 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.083521359 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.775341686 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.427169006 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.769303782 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.482125496 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.410138611 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.404662379 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.404447588 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.405670033 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.132136603 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.2260894 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.445677262 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.406478128 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.410505376 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.235101575 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.426308709 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.413870875 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.409475334 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.413621678 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.409350424 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.409305067 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.335229495 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.839547796 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.449941032 seconds)
  done (took 141.853792437 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.437013714 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.437980368 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.512489352 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.566824247 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.437430424 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.432610753 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.429644531 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.560767884 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.484559387 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.572767601 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.666616159 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.673373071 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.475770581 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.433855722 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.42962512 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.582445839 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.516869056 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.431259404 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.431104658 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.426313698 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.515106302 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.445280342 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.437703217 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.44402245 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.42875318 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.423348142 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.497585485 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.433473988 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.51172549 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.429560137 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.438157005 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.424633432 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.526703037 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.483939613 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.497575375 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.508709395 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.489257472 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.565989002 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.440573623 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.497192135 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.558755767 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.424574813 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.438223302 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.429130394 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.424884004 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.423616302 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.444745664 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.418504981 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.429890009 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.528751793 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.461227278 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.523951113 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.442958916 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.5600142 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.436425177 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.42676244 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.496594759 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.445727478 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.564545819 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.513735849 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.424401245 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.506572712 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.43532534 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.555194871 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.466065567 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.424650906 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.418128683 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.436195641 seconds)
  done (took 170.814690079 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.457134281 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.457418409 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.456692427 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.457335161 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.665756903 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.457489357 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.655395032 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.516197834 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.455383783 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.454480338 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.659457785 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.454861833 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.512995586 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.454739035 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.458041537 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.508662169 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.669446622 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.453239186 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.512020089 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.453925679 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.456602621 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.444082088 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.457689851 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.655596366 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.455880778 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.456647662 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.434765604 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.456817347 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.456624684 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.43642152 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.511256472 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.454264272 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.454338641 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.44670377 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.446536495 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.650823361 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.658478774 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.427679595 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.443170165 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.426519879 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.510840921 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.45638978 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.452625915 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.435189286 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.512765112 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.511974396 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.456515673 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.514641209 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.457726308 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.458380146 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.513100153 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.454508359 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.473879513 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.453737388 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.445687592 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.649861804 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.509848614 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.457180988 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.436132822 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.510524409 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.45410361 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.509962947 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.517235263 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.456753427 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.457686292 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.475397563 seconds)
  done (took 166.718731933 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.390549099 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.386966066 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.39868006 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.397254629 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.382055347 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.399945047 seconds)
  done (took 16.728489372 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.450704411 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.514079593 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.588118504 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.50891843 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.517210447 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.223530035 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.508868767 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.236648677 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.224487093 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.556238572 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.587414842 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.55516421 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.437878343 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.439762056 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.43703998 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.235782242 seconds)
  done (took 45.404992906 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.459095334 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.427125556 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.429378817 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.267933398 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.429465021 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.42902442 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.458424485 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.271311648 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.496721345 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.4464965 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.435722301 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.427354616 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.433386693 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.431918925 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.427171788 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.429575282 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.426138743 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.426326759 seconds)
  done (took 47.924408705 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.514309308 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.423850534 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.557893422 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.609506455 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.449914523 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.514107397 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.424316374 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.601897839 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.609896081 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.601909527 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.551822948 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.558625829 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.423455799 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.553552518 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.494400037 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.423476858 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.494226532 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.501595163 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.424299359 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.501498612 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.423543934 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.45045949 seconds)
  done (took 57.481077212 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.429558285 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.444405641 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.662926179 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.445644874 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.656308645 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.444505938 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.649001 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.50960908 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.442672653 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.446771602 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.660171426 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.452958137 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.461231846 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.445511781 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.445780151 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.445911268 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.458106235 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.659719238 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.441634683 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.510988505 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.442082401 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.510463986 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.445084301 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.458352902 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.662167615 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.452647784 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.47590913 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.648403436 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.426584524 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.428934259 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.448007149 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.444888543 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.442981182 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.455680763 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.460734282 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.442747679 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.460372183 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.508194095 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.445783228 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.445914947 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.444964667 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.445196918 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.476284956 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.445886204 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.513480544 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.515190556 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.460471617 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.429100522 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.457259494 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.436243431 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.462073078 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.445990664 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.662407867 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.442276193 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.467110882 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.450457456 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.513610815 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.458183742 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.458835804 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.448727256 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.445235925 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.510743571 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.437610282 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.460832687 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.445721716 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.457878496 seconds)
  done (took 166.18749128 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.466564958 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.453671941 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.446782678 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.44730748 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.447171621 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.432423938 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.447165859 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.432165298 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.906897872 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.446551149 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.429151409 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.370467305 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.418594217 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.447587061 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.908039846 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.467323326 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.448126216 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.422285981 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.447551647 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.423060455 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.448081688 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.419496957 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.447856515 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.447844097 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.371031971 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.448624074 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.431837196 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.447843659 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.41858782 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.44718003 seconds)
  done (took 92.410661818 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.428265022 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.475509904 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.476397422 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.476471979 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.476503584 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.4234373 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.425172208 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.477541851 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.429721998 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.475557158 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.476489573 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.427815637 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.476514192 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.42881713 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.461686092 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.4648882 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.422743468 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.436941349 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.423155039 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.423852154 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.437691964 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.42898673 seconds)
  done (took 56.246045403 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.426195202 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.522815245 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.522166983 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.307467742 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.523001978 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.589122095 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.421002616 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.511115727 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.306960762 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.51054719 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.496144225 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.421925864 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.416271822 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.494948799 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.49517821 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.510480878 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.589029894 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.495973058 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.523207505 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.496003581 seconds)
  done (took 55.951368899 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.460789823 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.49355574 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.49098197 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.479267206 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.477683467 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.820747584 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.42934932 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.490364139 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.429906387 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.478912944 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.982506113 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.490586056 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.468438988 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.46908586 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.821744856 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.478799807 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.461899544 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.448799739 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.429602119 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.448731962 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.982384785 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.460851924 seconds)
  done (took 58.367988177 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.430088108 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.430499048 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.441987833 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.634008718 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.438587203 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.430187281 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.441083458 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.435876083 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.432958252 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.430597368 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.484565062 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.471332686 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.45628475 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.450752641 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.444496278 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.633877175 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.454142431 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.429842945 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.459000682 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.435298618 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.435787044 seconds)
  done (took 54.074696452 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.406877329 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.40627667 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.456167442 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.419118448 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.393224214 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.40667816 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.393279176 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.471313776 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.393423625 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.4096273 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.406573319 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.406879344 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.410157738 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.494164342 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.394192073 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.407984046 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.416960733 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.455504224 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.410474771 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.408822375 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.409660683 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.394080213 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.410315962 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.404747884 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.409323334 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.438037887 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.412334171 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.395279269 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.396340373 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.406695071 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.405089723 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.407190529 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.409430761 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.409831104 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.409102255 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.568984834 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.439724597 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.393480365 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.394656268 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.409635039 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.412343149 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.422427255 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.404803144 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.394229833 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.41057828 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.410070974 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.408183276 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.394748729 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.394570348 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.409492427 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.395471844 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.410032773 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.394683901 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.407542935 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.406789074 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.394159252 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.395607175 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.409382653 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.393519909 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.407416883 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.394620762 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.393981736 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.409627581 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.393995519 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.410962237 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.395017958 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.407258341 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.407837885 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.407333617 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.409833124 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.490801398 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.413064894 seconds)
  done (took 176.077773153 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.508615096 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.476676835 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.569019899 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.714634213 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.566493627 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.507720572 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.507387842 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.477563382 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.506459922 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.565744018 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.566165635 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.507992966 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.567616522 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.504577352 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.506418676 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.506107191 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.506594096 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.505897297 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.566219652 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.504951935 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.472433628 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.506770685 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.714977258 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.506914062 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.479954693 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.565841293 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.525393816 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.463461612 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.507330333 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.515547183 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.572020098 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.463688778 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.488065357 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.51031242 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.511411275 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.474033261 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.508652472 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.506827443 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.517971021 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.513071309 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.48167782 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.504861548 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.481014103 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.563885637 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.715626056 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.56805622 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.563683177 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.507662462 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.507313448 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.524605209 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.507359096 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.481365629 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.507614807 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.507327426 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.569046702 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.563680543 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.564011107 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.713464352 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.50511957 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.505759841 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.506940634 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.508931629 seconds)
  done (took 159.201022839 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.429196415 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.263421538 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.240945408 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.430546378 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.272685185 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.429355098 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.243289164 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.430088873 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.428302493 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.428905668 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.283082485 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.428966669 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.258442904 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.296062375 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.4288904 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.428944419 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.255258906 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.429337047 seconds)
  done (took 52.78047551 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.439302169 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.441613758 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.439613545 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.257660122 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.442840471 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.421369216 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.761405919 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.440182953 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.257009256 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.438644841 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.442094073 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.442907002 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.442159805 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.382612491 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.382681396 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.38293865 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.439741078 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.38213199 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.758663374 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.442177203 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.439991619 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.44263585 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.426892826 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.439975402 seconds)
  done (took 70.961683498 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.431948982 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.429499332 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.434057368 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.433954997 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.429947036 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.460360514 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.434180145 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.457659573 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.622659903 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.431673261 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.458167142 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.434268429 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.460351414 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.459903596 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.45751706 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.459387873 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.618691238 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.435009692 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.431092847 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.429072516 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.434188293 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.431040507 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.429118296 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.457056817 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.431089144 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.429297464 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.431652841 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.432113369 seconds)
  done (took 71.060043804 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.475805251 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.43334855 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.482021904 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.503547575 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.50405873 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.481078812 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.426829348 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.450783441 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.438090597 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.450400816 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.509608508 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.509081065 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.506713726 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.478115617 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.43022155 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.433420463 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.463332362 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.427706312 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.428025964 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.423978361 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.463541949 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.424102951 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.424798899 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.508589538 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.424870717 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.438302479 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.496281162 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.482132935 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.505698408 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.48213956 seconds)
  done (took 76.281572421 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.413716669 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.451181397 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.420146717 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.42501458 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.451755469 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.428891999 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.427270259 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.439925671 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.42497319 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.419943329 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.793216076 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.421248079 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.440954827 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.447799019 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.421883132 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.41586678 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.440349913 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.416820586 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.41549369 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.89502286 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.427689685 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.443584977 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.440688446 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.418030051 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.427384064 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.420333712 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.441265373 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.441189262 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.443184626 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.788130383 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.450244433 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.427373455 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.418795149 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.415382055 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.424737042 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.450711146 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.779358993 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.896007921 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.439835609 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.423338528 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.414223792 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.45091363 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.414756467 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.441375226 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.414710115 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.415028076 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.411882645 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.41236633 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.441136845 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.440949624 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.415062242 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.44928324 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.448782861 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.421587403 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.782855932 seconds)
  done (took 138.379802232 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.45226411 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.434350964 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.433954623 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.427845636 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.430253657 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.453119337 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.448144862 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.494514669 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.481517574 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.430495989 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.433554393 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.481428065 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.433529515 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.263702907 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.433564545 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.42840444 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.43469825 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.263031458 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.428418782 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.428108876 seconds)
  done (took 52.891362918 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.4475123 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.446415495 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.433391206 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.448341766 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.483198522 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.432467538 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.840011387 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.483135984 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.486696361 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.488015075 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.903540682 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.428465216 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.428463937 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.856394993 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.500959019 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.567344426 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.640253534 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.646093473 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.434208446 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.452826837 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.033023747 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.557115105 seconds)
  done (took 58.815032327 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.502852886 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.680147348 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.682126886 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.689999515 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.433976334 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.492959561 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.492093775 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.562361738 seconds)
  done (took 23.011336423 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.407563764 seconds)
    (2/2) benchmarking "in"...
    done (took 2.415581596 seconds)
  done (took 7.199866172 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.667922143 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.540033713 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.410335334 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.537239516 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.340706892 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.049485737 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.438180697 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.989483606 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.415771166 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.415618129 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.415745068 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.003967816 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.53804088 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 3.968376415 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.426602396 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.42347096 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.333108545 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.477030725 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.641192496 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.757918657 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.812183824 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.54730404 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.413853924 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.833816164 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.029313138 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.486749214 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.630880077 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.411101856 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.481866467 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 3.963731512 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.247084514 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.301495432 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.802110848 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.760082093 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.483389563 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.847420955 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.472475818 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.427741104 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.454646482 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.242798332 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.727474915 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.246498156 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.573564003 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.532594663 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.417338406 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.2987833 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 4.026795624 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.414087484 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.415834618 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.420230178 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.366072693 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.988102666 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.653959765 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.461604645 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.871077463 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.244134382 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.415514611 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.948568627 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.664087539 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.266531771 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.066548246 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.230948168 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.312741146 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.240410077 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.968830564 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.591725257 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.41523524 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.416086985 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.413341851 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.414488014 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.309289488 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.269526174 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.347318664 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.23565925 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.178793582 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.638693763 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.490010498 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.464407332 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.085532367 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.557797761 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.304910241 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.932303561 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.476940889 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.103881196 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.333198496 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.701694792 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.610927585 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.528381136 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.4157421 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.417170099 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.090405454 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.544796305 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.154875985 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.080297243 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.769610702 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.816736049 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.586727339 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.411008808 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.410500461 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.837384709 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.245798258 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.081077415 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.640803371 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.525395156 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.416332257 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.572835148 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.021531135 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.559825406 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.589832852 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.931281606 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.844391754 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.55586699 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.494678408 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.327501824 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.976115866 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.077440611 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.941959602 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.579759243 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.415497924 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.799838457 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.491381103 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.415450493 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.416234698 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.415726274 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.283494757 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.476062041 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.269223556 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.438877586 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.371513296 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.640084088 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.61298945 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.497712903 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.532082306 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.41241334 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.412450859 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.41260506 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.139248105 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.311612213 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.454833117 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.410505806 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.825110423 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.960874285 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.556182631 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.925262887 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.987639306 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.972035931 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.413504748 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.113746296 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.205146605 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.539274545 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.438833339 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.78641169 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.533452796 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.411749472 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.414870265 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.825554944 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.516730158 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.477664387 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.405742322 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.289476736 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.472440727 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.412050869 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.695837038 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.067022192 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.492822184 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.26469349 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.861958723 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.530754343 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.44466357 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.413072521 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.65412324 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.548133788 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.413543987 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.429018623 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.449269541 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.448018604 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.571944947 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.57041775 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.416061885 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.219745136 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.540128403 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.136703775 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.232905494 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.133967826 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.24109099 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.102754361 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.335156132 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.300274625 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.625361484 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.55541437 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.95149854 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.417357821 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.412409619 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.974945101 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.55185819 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.75248039 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.475826246 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.162800374 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.318619412 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.433181378 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.655043376 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.243424968 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.878879435 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.942120239 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.478958533 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.272908441 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.449132601 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.208320805 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.550968661 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.055565918 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.592024969 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.719363377 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.193157777 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.246975292 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.412838647 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.416030158 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.326065374 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.480624805 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.273906111 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.784832355 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.490007013 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.802892549 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.780314787 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.787741604 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.565156201 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.415167434 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.155023583 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.746472372 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.359676309 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.001580515 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.861676945 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.520788113 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.462398879 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.425421615 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.672163577 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.056475644 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.34295403 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.550142238 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.439727298 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.424760611 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.240028798 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.464638694 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.409908836 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.268362804 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.04566087 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.901675327 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.656767781 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.703265963 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.871013372 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.68674463 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.534679609 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.523158846 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.977197536 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.550294051 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.829918484 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.774915979 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 4.029999382 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.414173479 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.254835504 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.766874491 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.660129979 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.420867104 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.413382771 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.106100927 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.282304427 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.18107416 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.901549339 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.836848363 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.667137654 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.346098367 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.851538647 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.419432259 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 3.999963486 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.462212266 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.409989971 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.92705845 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.249174271 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.409844879 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.410542726 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.67308299 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.236357174 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.741882524 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.615879383 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.275470101 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.474252036 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.603426641 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.776008441 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.848155859 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.228155913 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.001157176 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.671835341 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.630440891 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.547765712 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.414429396 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.208544871 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.713634153 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.951655678 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.163350014 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.973384069 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.549182558 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.865870731 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.703654546 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.411410908 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.410950142 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.272586836 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 4.017811252 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.675436458 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.734448904 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.863607328 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 4.007303236 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.793281136 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.983898471 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.178383203 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.155134563 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.551494738 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.854696048 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.246579321 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.415251071 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.411179314 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.412050249 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.485458123 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.725588422 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.487227368 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.579352981 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.824013651 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.679260582 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.308399664 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 4.012949629 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.379094975 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.124076293 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.986397119 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.606175883 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.6632023 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.870264316 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.833688541 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.862112537 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.510010984 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.392528725 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.535490264 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.236816584 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.273168247 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.237045013 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.860652487 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.474872658 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.100391175 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.661121048 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.76018865 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.483415052 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.555790272 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.557226664 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.237628964 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.544611275 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.70774784 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.843348248 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.526245881 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.413389606 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.418431685 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.41821983 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.783100119 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.429694406 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.505506079 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.491430243 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.592507336 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.00611891 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.947053523 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.947311066 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.547156314 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.417029038 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.701819005 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.086660259 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.748537051 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.830630827 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.737638908 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.193820024 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.824588794 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.085269738 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.666098284 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.837422365 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.438850335 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.487784576 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.414201762 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.409329543 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.103909184 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.553658951 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.418622542 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.348709295 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.459009042 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.549674153 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.41372249 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.355007186 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.073402658 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 3.967936747 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.331923191 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.211949806 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.557134071 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.414253865 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.416440512 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.278774114 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.403661075 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.375312864 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.664629775 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.292718848 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.466641671 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.139932128 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.23559084 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.078554237 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.202938383 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.236496916 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.411615301 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.768161769 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.743942617 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.766617294 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.475015043 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.54213576 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.52738134 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.411711245 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.103538164 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.032339265 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.678807077 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.416903563 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.411741108 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.847972884 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.540638152 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.773689127 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.537032738 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.414807728 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.485788242 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.863927305 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.606938371 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.415443243 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.414587065 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.842359212 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.696536516 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.31245511 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.492155038 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.555865639 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.71967999 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.606911288 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.099621981 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.996806815 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.574006677 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.908808811 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.682170957 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.417040834 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.389005939 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.882593634 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.35585556 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.01000569 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.174273615 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.47830615 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.008219148 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.694018825 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.731978628 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.572754797 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.26560411 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.53816091 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.943183909 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.993705433 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.51636886 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.412148734 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.727719165 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.478404176 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.744306861 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.456040533 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.498272936 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.555921171 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.425969362 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.667191376 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.41236737 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.422013351 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.707292164 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.485159671 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.249679018 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.815541262 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.420656691 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.415128502 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.411930187 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.41415889 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.546312611 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.420204567 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.544280303 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.310763609 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.770135202 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.231138908 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.555958463 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.466431895 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.705019281 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.33478856 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.304499265 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.837775208 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.415930444 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.578403938 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.786774144 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.393901391 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.950992825 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.941214925 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.488306767 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.41432796 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.414329406 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.13312662 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.367227499 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.42104594 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.414683514 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.77204913 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.94503108 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.544766105 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.412641858 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.412501796 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.416573082 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.569871093 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 3.975723191 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.418190287 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.174937325 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.551442958 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.414050516 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.2415198 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.805154652 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.694827469 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 4.049188018 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.413390964 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.411668563 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.879535753 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.673623494 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.038692984 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.619401159 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.260244821 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.608599994 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.39257016 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.435332274 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.422195701 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.412600543 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.974539784 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.540216454 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.418102143 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.416286489 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.876277429 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.68731066 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.493313978 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.443775566 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.407474722 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.586722822 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.45112712 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.746183571 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.745950152 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.450202135 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.869072255 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.778853872 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.831256739 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.517162057 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.562905394 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.749562883 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.57150789 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.454120784 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.654889819 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.539528677 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.462120153 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.455477616 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.429757953 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.591666641 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.415796936 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.50519085 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.97353753 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.414686492 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.415081587 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.887951255 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.590113308 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.127031968 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.555038771 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.420892058 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.42148274 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.327913343 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.496745875 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.41324904 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.559504701 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.84609842 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.568139013 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.768512952 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.856272891 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.567566743 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.423039066 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.930935771 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.003581675 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.711519978 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.471839857 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.419031916 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.414045298 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.38664883 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.673797721 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.510481452 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.558261477 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.193664925 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.103021378 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.965375526 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.574478594 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.038523754 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.156447475 seconds)
  done (took 1930.07451265 seconds)
done (took 3949.269781279 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.611246292 seconds)
    (2/7) benchmarking "month"...
    done (took 2.517450407 seconds)
    (3/7) benchmarking "year"...
    done (took 2.505228103 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.418661305 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.432948814 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.431190323 seconds)
    (7/7) benchmarking "second"...
    done (took 2.430406868 seconds)
  done (took 19.726745763 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.080933358 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.882581098 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.87228936 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.07499456 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.439178178 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.234938845 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.415759372 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.13624764 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.228185181 seconds)
  done (took 28.748091528 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.509364157 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.427386703 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.43633197 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.442226652 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.636435795 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.555689511 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.443473405 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.550135062 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.593433537 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.621534049 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.576555697 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.422231014 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.597559326 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.616413222 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.54878723 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.582834907 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.430370201 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.578066674 seconds)
  done (took 47.949913429 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.401441745 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.400391609 seconds)
  done (took 7.181684134 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.413672743 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.418256235 seconds)
  done (took 7.211079441 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.547391739 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.521783736 seconds)
  done (took 9.448321984 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.909604598 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.415142319 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.416184289 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.414520732 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.684067429 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.840202483 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.732957139 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.413460445 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.423290448 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.416890782 seconds)
  done (took 28.111055274 seconds)
done (took 151.520106427 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.381421212 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.48093981 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.947408956 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.616070969 seconds)
done (took 32.811613566 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.552929943 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.556188487 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.641934802 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.67151591 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.642881681 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.941768245 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.645116962 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.524281541 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.64181793 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.556117903 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.538233287 seconds)
  done (took 31.292924231 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.546247929 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.558726596 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.635971398 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.120714406 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.641801932 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.279772324 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.637965636 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.596582537 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.642006743 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.559619522 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.667295457 seconds)
  done (took 32.267019429 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.452898037 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.481347914 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.482691037 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.557405931 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.488453823 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.512972535 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.484358017 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.51349314 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.518855054 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.446647829 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.489390911 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.427259185 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.669958252 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.50679774 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.446164893 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.7655101 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.120078911 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.507314385 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.509911546 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.649495046 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.448833213 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.487138214 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.440330831 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.536303996 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.428371727 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.429160517 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.418216821 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.539954622 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.496739597 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.474079207 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.51006422 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.444485375 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.55047107 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.427279536 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.488396762 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.426639606 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.487339655 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.972948732 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.467128185 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.444749477 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.528588176 seconds)
  done (took 109.859392403 seconds)
done (took 175.800341909 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.837448667 seconds)
    (2/2) benchmarking "read"...
    done (took 2.901715103 seconds)
  done (took 8.118651745 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.486389113 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.802505524 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.605070498 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.570283894 seconds)
  done (took 25.361412356 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.387887591 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.659182252 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.562943099 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.502418141 seconds)
  done (took 27.499734583 seconds)
done (took 70.846940447 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.402501593 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.400527368 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.393077995 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.395067263 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.397748774 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.396915143 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.394763915 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.393192364 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.392292526 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.393025232 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.393065084 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.391995051 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.395099503 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.391898617 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.399032016 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.392760917 seconds)
  done (took 40.709162371 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.390576753 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.392782068 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.40374704 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.393669375 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.392691159 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.391920763 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.393348409 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.392601398 seconds)
  done (took 21.53541367 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.390917701 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.391105062 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.391871279 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.391304298 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.392956011 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.391071992 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.390591853 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.389971389 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.390718231 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.390445631 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.391668824 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.391657592 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.392242951 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.390728368 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.391106365 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.393781198 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.391023263 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.392101408 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.39707062 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.391261049 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.391192039 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.389988967 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.39214708 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.394160641 seconds)
  done (took 59.785018961 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.41734826 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.802296254 seconds)
  done (took 7.602492235 seconds)
done (took 132.018074318 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.5039061 seconds)
    (2/2) benchmarking "String"...
    done (took 2.584243167 seconds)
  done (took 7.470945079 seconds)
  (2/7) benchmarking "join"...
  done (took 7.436020683 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.550363046 seconds)
    (2/4) benchmarking "different"...
    done (took 2.483195995 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.688113977 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.551312279 seconds)
  done (took 12.65721601 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.368235225 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.172059237 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.378611323 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 2.994114388 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.860366945 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.584818706 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.022666034 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.176570441 seconds)
  done (took 33.573245926 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.696101726 seconds)
    (2/3) benchmarking "different"...
    done (took 2.443788795 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.426238679 seconds)
  done (took 9.955330697 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.584734511 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.534459344 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.197862944 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.61058642 seconds)
  done (took 16.309133761 seconds)
done (took 93.169328899 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.435891513 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.418038661 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.432001701 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.957764287 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.192090459 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.431920027 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.476280876 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.415353788 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.509623683 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.657392976 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.62175671 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.276361255 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.414759149 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.379979998 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.659824074 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.432418453 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.417583809 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.482771643 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.416795438 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.552540688 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.430284308 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.416969723 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.437844985 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.43237065 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.498607551 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.441756811 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.42011179 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.43590652 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.419053302 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.417458506 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.504711009 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.427892708 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.960838844 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.210753846 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.738322417 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.207603087 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.173714745 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.435212311 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.447266549 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.44154935 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.396716398 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 3.003260564 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.548631792 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.483362298 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.437873041 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.435540163 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.417639198 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.438182777 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.797441767 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.016102564 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.355596257 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.196724874 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.425380272 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.66571195 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.433163417 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.445480615 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.499716846 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.955508874 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.223825369 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.416302475 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.447620108 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.421360157 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.438611215 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.48426117 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.955250762 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.202311773 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.728504173 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.150269059 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.483509007 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.409725594 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.128322971 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.957806208 seconds)
  done (took 210.26218789 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.795177981 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.472330517 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.047759939 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.809821464 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.049595349 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.562871157 seconds)
  done (took 20.904226583 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.43944147 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.426475733 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.423578049 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.722244143 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.512995036 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.45367973 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.427763185 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.429931036 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.476053031 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.460578196 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.444727023 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.428770443 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.427894619 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.381791895 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.687604529 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.44665828 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.427220702 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.443719586 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.718981099 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.437708165 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.427325395 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.442139935 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.676041862 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.440904407 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.43950292 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.484395164 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.512472086 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.475494914 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.453354405 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.708253919 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.435425006 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.566225493 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.46188501 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.430502902 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.442495888 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.720681388 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.605125309 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.678877848 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.381249191 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.381074425 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.612551983 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.266576595 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.295224753 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.839028601 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.676710737 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.492149547 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.446451828 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.607201197 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.38500452 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.283018584 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.421030536 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.438758679 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.573076985 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.381902596 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.582035254 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.546807439 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.440600848 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.381494776 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.435833401 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.428083431 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.42781252 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.452369356 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.608804435 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.447603758 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.420835515 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.64088515 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.674361734 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.381435836 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.141783707 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.438773094 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.42792482 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.587753719 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.583125897 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.438271123 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.573594104 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.439084877 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.480499055 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.380186813 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.55020125 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.33669384 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.675749656 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.38069208 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.426750217 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.442427145 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.381203589 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.444473895 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.706997276 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.435371292 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.292688611 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.453645659 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.379910218 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.495429716 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.116012898 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.437997466 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.721118365 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.675967606 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.73737528 seconds)
  done (took 308.402035303 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.638844561 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.730864775 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.968239431 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.732143138 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.526692572 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.728334247 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.033599118 seconds)
  done (took 21.740240326 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.585236909 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.780891938 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.380074097 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.382627181 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.380236847 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.583195055 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.38015666 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.693975632 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.607964633 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.779904767 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.652218363 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.758936226 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.380268367 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.38033144 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.38266411 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.600125986 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.480528469 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.606691516 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.380898636 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.381446132 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.589284661 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.55948795 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.636843682 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.382516297 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.444513399 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.385496764 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.379224259 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.662509436 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.571659788 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.644516443 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.384933246 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.75047369 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.696824553 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.615553244 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.386088905 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.541782342 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.702941376 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.694686372 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.622256389 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.429599106 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.561130036 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.469520977 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.617769257 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.542310713 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.669220451 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.554482401 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.542081915 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.712645821 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.38479352 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.432939025 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.568260476 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.380490798 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.574073268 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.44534876 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.61181065 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.74550594 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.585157469 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.379121407 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.554011345 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.382090784 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.671800379 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.380173779 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.37965315 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.381373701 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.662648388 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.381136255 seconds)
  done (took 279.627444286 seconds)
done (took 843.743828034 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.294327079 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.810353966 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.413979283 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.456575723 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.38552574 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.727493355 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.797128976 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.368787838 seconds)
done (took 47.635849128 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.437397233 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.426855533 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.433567698 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.427309072 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.427008613 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.428553033 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.387992243 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.930374927 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.484789775 seconds)
  done (took 29.769936968 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.386710514 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.870104262 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.387104729 seconds)
  done (took 24.030441012 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.515547016 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.680098826 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.594549183 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.639954559 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.86041641 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.777939662 seconds)
  done (took 18.45336486 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.654861122 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.512947785 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.476198578 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.397478784 seconds)
  done (took 32.609086995 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.800540662 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.466229993 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.510597547 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.779589646 seconds)
  done (took 12.944992224 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.515978136 seconds)
done (took 123.721890175 seconds)
(18/23) benchmarking "parallel"...
done (took 2.774409309 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.573200421 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.254579955 seconds)
    (3/36) benchmarking "trsv"...
    done (took 3.941540225 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.974932307 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.146570654 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.43040414 seconds)
    (7/36) benchmarking "symv!"...
    done (took 3.942676343 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.438083489 seconds)
    (9/36) benchmarking "trmv"...
    done (took 3.903330723 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.369242518 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.565799191 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.402270669 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.513072323 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.843095997 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.404306176 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.448762382 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.54182252 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.454615347 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.386687548 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.423464513 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.475349213 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.430583225 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.510940978 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.311788105 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.431671103 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.607545957 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.958139819 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.42323942 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.445338176 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.391541699 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.387653047 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.774885436 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 3.885851601 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.874273623 seconds)
    (35/36) benchmarking "symv"...
    done (took 4.014916372 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.599274773 seconds)
  done (took 197.870189578 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.458827372 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.468709771 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.39302519 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.493714002 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.414333591 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.387030526 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.546151964 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.396011739 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.396137032 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.393945016 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.418748777 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.47461403 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.389677709 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.407645669 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.404499593 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.377129669 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.459530077 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.415386418 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.468940366 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.42259268 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.641821274 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.240612354 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.852287859 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.405696441 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.391366397 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.445384226 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.417248002 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.389927805 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.504244631 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.092948276 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.376279803 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.612276279 seconds)
  done (took 219.34399472 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.491125096 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.382868841 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.381712602 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.381631735 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.381345251 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.385923335 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.38261762 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.520637702 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.382451494 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.38075165 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.882591561 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.382341057 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.381833408 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.381464402 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.380736432 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.381508674 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.385771619 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.382452835 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.761981457 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.39547194 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.380620331 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.385659242 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.456487883 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.7688188 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.756670637 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.424198396 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.382774019 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.382239076 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.38403565 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.989728571 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.439739486 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.38388926 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.386875945 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.397606985 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.383576638 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.382080312 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.382071166 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.381434227 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.459971606 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.439694121 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.395995793 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.381253557 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.384542115 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.382294204 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.382218877 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.442366072 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.600490497 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.989869011 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.383787908 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.4401385 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.58615844 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.38691505 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.979914116 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.507895241 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.38147749 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.381108181 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 23.036637224 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.382574229 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.390233648 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.381842513 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.418788866 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.21922571 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.385825042 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.507043622 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.169729917 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.382458532 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.216483509 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.381277171 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.989216604 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.385228394 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.111154856 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.38264217 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.383942628 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.441718567 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.080913607 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.380798821 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.4571416 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.068477439 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.383317222 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.466196682 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.381385017 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.381495394 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.38082133 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.419769344 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.880280408 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.449308889 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.382073097 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.384734229 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.434759935 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.072554845 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.388833512 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.383324222 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.380506052 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.381350125 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.381590249 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.385794253 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.382160417 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.381721636 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.386594783 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.381712796 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.443428345 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.419609223 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.397479603 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.987676025 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.381638506 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.382141523 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.181845655 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.385733253 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.44104232 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.390546194 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.383732521 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.391977778 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.621647131 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.415357139 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.165083128 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.443993462 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.379755387 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.758386469 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.390920147 seconds)
  done (took 481.802266978 seconds)
done (took 903.894499619 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.577247752 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.663367403 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.541532115 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.494332971 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.569989524 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.944081788 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.986151302 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.301798065 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.617119966 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.561062787 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.679611871 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.790592543 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.54159798 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.51381524 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.426963866 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.52574616 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.577937081 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.535649172 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.489687805 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.495087057 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.026277609 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.65898455 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.167561426 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.804627999 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.473345566 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.484454962 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.531176201 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.547402498 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.054736612 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.307303274 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.044099575 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.502920701 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.461456603 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.588354087 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.469821188 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.525620621 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.571274658 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.452734586 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.497186446 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.504826941 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.428377155 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.916264403 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.62130474 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.346677387 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.376583628 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.833769822 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.423035361 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.400987786 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.382900357 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.489499353 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.444776327 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.894949055 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.97643988 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.641769254 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.664691973 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.595121312 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.765696731 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.577422913 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.57563848 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.584640472 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.539803432 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.246520042 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.719713583 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.670047804 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.550376988 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.541274968 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.50291654 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.892054027 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.43496127 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.554280952 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.561416138 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.419765105 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.102261961 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.792170198 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.473827238 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.631924587 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.652919979 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.664871539 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.21811348 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.792985742 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.876264134 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.827753814 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.644420884 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.555618806 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.836121471 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.533019918 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.580594216 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.541498702 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.453798386 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.537126635 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.447255907 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.966354804 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.715968981 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.705970411 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.698269708 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.648364316 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.672533722 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.795044019 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.624168582 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.578707188 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.304937446 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.719258567 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.662460662 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.490656406 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.525992029 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.482010115 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.568297766 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.468291241 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.449335715 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.912038944 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.492946872 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.345360468 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.772598496 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.717190477 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.889361642 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.668440334 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.359368213 seconds)
  done (took 342.862714911 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.712643738 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.412537851 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.541985027 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.3850603 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.386682352 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.389631668 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.400012081 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.363997456 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.48300707 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.385155974 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.389355365 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.387568589 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.387964818 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.385499534 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.612702449 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.397972652 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.385519184 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.386673731 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.387057899 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.388316606 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.389904642 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.386943147 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.046345227 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.475801462 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.387982784 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.386657951 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.093665794 seconds)
  done (took 183.261856106 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.471036771 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.901618098 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.649384913 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.730173452 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.805700792 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.725987155 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.455239837 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.457334721 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.522253904 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.676659776 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.396590753 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.845921876 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.431114114 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.784635837 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.445639151 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.452138639 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.468624494 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.423369117 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.493799849 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.633303963 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.514360187 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.454708427 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.69836747 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.464042 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.452485841 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.616905312 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.622673447 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.617225246 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.550034571 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.639668572 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.805514167 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.442764279 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.421962093 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.468931027 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.52202934 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.592928663 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.508961553 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.813293168 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.437734832 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.625842502 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.433571439 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.797161494 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.427400485 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.469770973 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.603218292 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.523005033 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.856155074 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.968795925 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.685117212 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.45590098 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.453736288 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.527340769 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.802396917 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.654249351 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.813185639 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.421655717 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.854163399 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.701790095 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.678650743 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.421224298 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.666933667 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.447378912 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.447438688 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.51991126 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.895014779 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.606489346 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.807774968 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.725997461 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.453901096 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.906615775 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.465160598 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.662772029 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.134882858 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.558241493 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.190229521 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.581189784 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.424723141 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.469726752 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.463179089 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.732458494 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.451739342 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.526576735 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.484317384 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.547141893 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.599293958 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.558439521 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.763591809 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.899315161 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.496122531 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.79685172 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.043020527 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.726457126 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.438668073 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.516141745 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.425262907 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.522295371 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.598927354 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.761939951 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.853686971 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.718831815 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.242713726 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.922871526 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.428964209 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.506800833 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.449480395 seconds)
  done (took 286.41840544 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.556267463 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.638483308 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.986942464 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.741278371 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 3.03257557 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.566648774 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.516601005 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.480758844 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.66143036 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.657552971 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.704776196 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.502312488 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.699685832 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 3.015316976 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.807514785 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.160257913 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.528190392 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.96349673 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.578591383 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.536991975 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.994135016 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.463732622 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.71859175 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.621173084 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.409025626 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.706302125 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.72784793 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.598662439 seconds)
  done (took 84.961134003 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.467300187 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.502967181 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.429860169 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.552743425 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.531140208 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.52159428 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.486270977 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.895982016 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.49572412 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.4775808 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.515614044 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.430450534 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.946739559 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.428930357 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.472630394 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.518559526 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.514295612 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.913166892 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.522999079 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.924145756 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.478396653 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.548030133 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.483478808 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.442504477 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.475618892 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.438209095 seconds)
  done (took 68.815338406 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.518012333 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.426864444 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.611323907 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.665925317 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.923388564 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.58158283 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.816053601 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.42085712 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.601236144 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.495080595 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.15907569 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.954945989 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.578238346 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.940431695 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.540260359 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.442132801 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.900301885 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.520093764 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.800739151 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.572051733 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.045309409 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.537272009 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.649649392 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.646551189 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.539135141 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.592363693 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.511918134 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.957099932 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.530128334 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.56414728 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.661520054 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.51847663 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.051910938 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.507710845 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.522510707 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.819943081 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.599665877 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.930166739 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.545965439 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.369484583 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.527266982 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.599024666 seconds)
  done (took 122.08324364 seconds)
done (took 1090.786230045 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.564800602 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.431922972 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.406886773 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.418122301 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.445518468 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.421209749 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.407614323 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.615005211 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.422371611 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.421192043 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.424894417 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.423271155 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.419153043 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.419596023 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.442795695 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.418150037 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.569266536 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.45072532 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.402999373 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.414615174 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.4160686 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.411983145 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.422783485 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.412868384 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.447708115 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.414043717 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.408889891 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.437435327 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.417118786 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.444431463 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.416804244 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.430787936 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.420863335 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.421379207 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.427564938 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.419316648 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.409915936 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.420443744 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.412954952 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.419033429 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.409928502 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.42609716 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.427551914 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.467441221 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.437755952 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.42309762 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.423225567 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.432768525 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.535794718 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.425042453 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.4247917 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.416426647 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.417890362 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.415579524 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.41291677 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.431676331 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.412591021 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.414110547 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.442274557 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.413413455 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.44057145 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.400019784 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.445012262 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.409975886 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.409073354 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.41241079 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.42228444 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.412636104 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.411450854 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.400429708 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.412267813 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.447952218 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.416116509 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.410089336 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.417133811 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.41491616 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.439984643 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.43765588 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.411473144 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.417125243 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.416072029 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.429183069 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.435530425 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.523329376 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.433831553 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.411644379 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.444677202 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.413814968 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.442315633 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.44253351 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.420220639 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.416339755 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.414104928 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.41634834 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.40679005 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.41917492 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.43853618 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.434113782 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.427735481 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.419514609 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.435252977 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.424121977 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.448206789 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.416654627 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.397853511 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.433482203 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.424881776 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.433954953 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.422752177 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.522537813 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.425209655 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.438957587 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.41033407 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.407592987 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.404118543 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.406979594 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.412329179 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.406110724 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.613149959 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.411571481 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.40539347 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.414631075 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.399869052 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.412930514 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.40769795 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.407758842 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.404220001 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.415787424 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.472382278 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.458039445 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.418959508 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.419719186 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.430349744 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.413626317 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.407851761 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.41420551 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.434787671 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.405126812 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.412619018 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.41863842 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.418428042 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.411552201 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.432701847 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.442427971 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.403718262 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.416052681 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.40107006 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.409699494 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.429645622 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.413176079 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.411160495 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.423429951 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.407834228 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.409388567 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.431404373 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.40220409 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.409983087 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.404814702 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.406466353 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.410822523 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.437471694 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.441583001 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.411356904 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.402137466 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.40225858 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.409482241 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.405951731 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.413187317 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.413452028 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.403475547 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.434957724 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.42736643 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.405367919 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.437694287 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.404216801 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.410525074 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.435069145 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.430365045 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.439823727 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.412961454 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.442491725 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.441349886 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.409240312 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.436188949 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.421878293 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.43346226 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.401982758 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.407656637 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.404129883 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.409108808 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.406023515 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.43360884 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.412109264 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.413331813 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.422655317 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.416889945 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.420036536 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.422285699 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.415802162 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.407832846 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.415389639 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.439597771 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.406433837 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.415719559 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.406867625 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.405664548 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.425087074 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.413247665 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.421168634 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.426520964 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.401275993 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.423486626 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.426305258 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.411023297 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.425241234 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.416137776 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.420275711 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.398170174 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.444162866 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.417938581 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.41303867 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.410983405 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.405780909 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.412089944 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.414334301 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.410002484 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.436621004 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.425850947 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.422937149 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.417207783 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.561976124 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.415597415 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.420696027 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.410208185 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.412836391 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.416576305 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.415361973 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.409591866 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.424700675 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.416048688 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.404077303 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.403870987 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.421056273 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.405492905 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.431496398 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.437188687 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.405953908 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.413725123 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.411677623 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.41752676 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.417221379 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.424601772 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.412814797 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.413816678 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.414250049 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.434313434 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.413500876 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.406864604 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.40985913 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.423759763 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.422401589 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.563609501 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.455524669 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.399770282 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.42348445 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.405318323 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.41401208 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.414814349 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.404080109 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.42920257 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.400928488 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.406299127 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.413014869 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.43204318 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.408357598 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.410965746 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.430535679 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.40556124 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.419500995 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.399588099 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.455517143 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.413687396 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.431262659 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.413247891 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.407258098 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.420042349 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.406110084 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.4176137 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.414880318 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.425904706 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.409711901 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.405769117 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.413425227 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.414646674 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.422017121 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.414263487 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.400239314 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.415505412 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.410182424 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.410941399 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.41214802 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.4118498 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.460577346 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.414046963 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.4121024 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.443198995 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.458559354 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.410814736 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.410760186 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.409774094 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.458571187 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.408347239 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.403488089 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.425456025 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.444028246 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.412660732 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.419568518 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.413317137 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.42641842 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.414594476 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.421338597 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.421712118 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.398567823 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.423710417 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.425607301 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.436559367 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.414147263 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.404514551 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.533119265 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.420273358 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.426348515 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.420269657 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.438898302 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.410856954 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.408301821 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.405714872 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.410262162 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.446520696 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.411958831 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.411099731 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.414499149 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.441416652 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.428954073 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.400652953 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.41070029 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.417425791 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.40900964 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.427853029 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.422858916 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.403439268 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.417371874 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.408338548 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.400121023 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.425016026 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.445633882 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.409730526 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.417138264 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.423208425 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.411420625 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.417143009 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.411655932 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.526367988 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.411428367 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.416512394 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.428557137 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.46349579 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.417517599 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.420533956 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.419823903 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.406550669 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.408157607 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.418222442 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.411618393 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.521894137 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.426320494 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.424186743 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.410706836 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.414592691 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.427974412 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.415527511 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.414827551 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.416068594 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.416716196 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.410700607 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.615757177 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.419386576 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.430402251 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.530186229 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.409515042 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.417617626 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.407210039 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.418199397 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.415777895 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.409152435 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.424232575 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.419765509 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.440591348 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.418182216 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.442549552 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.448799605 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.420046897 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.4071032 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.456225492 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.420540604 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.417975947 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.441139157 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.408101598 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.435855892 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.422193323 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.41235677 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.432248902 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.413130954 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.416574686 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.404226925 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.412116799 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.420089906 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.432556597 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.412007797 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.425121125 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.415369815 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.437917297 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.411750848 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.418677849 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.400320599 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.412916716 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.42087131 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.419516988 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.418874363 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.421943888 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.410362678 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.415294652 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.4131859 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.410787327 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.413826276 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.424335902 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.408630603 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.4175457 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.413686134 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.415800629 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.407079007 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.412698744 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.405347103 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.430180271 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.410881429 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.412672593 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.41003131 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.43090441 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.412686654 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.406857257 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.453538126 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.412421992 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.433716428 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.464741852 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.423778793 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.408483226 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.40216678 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.416998129 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.41437082 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.484233064 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.438536134 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.431173186 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.432482458 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.425352266 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.449372479 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.436569105 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.449627377 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.447657267 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.424632909 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.437517927 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.41967055 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.410674377 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.421128131 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.427638619 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.431765098 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.404410777 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.41309264 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.427590399 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.411316161 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.447625848 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.445974704 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.423650467 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.43997832 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.440851261 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.457723574 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.423022764 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.428165483 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.441313717 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.400237348 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.406459732 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.422395656 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.415091384 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.436671211 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.408042503 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.425540021 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.538339353 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.416570295 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.567212765 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.408295875 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.430242886 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.424403127 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.420924011 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.411158523 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.431335281 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.401785826 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.413055608 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.460212946 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.426868812 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.408788009 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.420348333 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.411627205 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.539231244 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.478553536 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.424117296 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.406830144 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.413950629 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.40396901 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.420328475 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.425248746 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.41975915 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.425903341 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.435524166 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.414466341 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.437501927 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.403758743 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.408661211 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.414955461 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.41798578 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.488848363 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.564937697 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.406834516 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.405840031 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.401097473 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.415823199 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.415530716 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.415770596 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.418664263 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.498480912 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.405210114 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.418056726 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.430974623 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.49158911 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.409249004 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.422408851 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.462574581 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.409075889 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.411745695 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.416289358 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.408666324 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.415020393 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.404376357 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.406136206 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.407536016 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.405280984 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.439383229 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.420024794 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.454715683 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.413744561 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.451115046 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.414337695 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.407671244 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.415993762 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.425157911 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.453951348 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.415159013 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.431589709 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.43155158 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.422108911 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.408689105 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.454320402 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.413246486 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.413363972 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.427191991 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.407772678 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.419158591 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.475403501 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.440870898 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.411976242 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.415007613 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.417377068 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.527466772 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.446581628 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.409030536 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.42258683 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.425656161 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.425107189 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.429773725 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.443268701 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.407984065 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.410868817 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.418441828 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.429754405 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.408458031 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.418754943 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.426171834 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.424620395 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.410810424 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.411993131 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.427638015 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.41669984 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.421039451 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.419157719 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.409550896 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.419238438 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.412703945 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.406233295 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.426125441 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.415071842 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.414461503 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.438271126 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.418730237 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.410140174 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.422788803 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.417170556 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.419170658 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.421765421 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.455204141 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.440084276 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.404918261 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.40804668 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.416028957 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.418477712 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.437413872 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.417805176 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.405639561 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.429815104 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.419638568 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.417387416 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.426014443 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.460357257 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.421249203 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.40738241 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.431328157 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.420556347 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.410374723 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.430452557 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.419990704 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.454579074 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.423825863 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.481694754 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.586538202 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.639600604 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.641999138 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.406905853 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.47438375 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.503857549 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.497223238 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.744004258 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.498992803 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.506543625 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.452208411 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.42218636 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.433442088 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.412012079 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.4253575 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.438337075 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.44583667 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.455684333 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.418644867 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.474768265 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.4179918 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.492168829 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.416421254 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.424716147 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.469135755 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.411144499 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.42775291 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.569083165 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.447130316 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.423559182 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.412357492 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.567413359 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.419918817 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.421563555 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.411394363 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.420224957 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.412219877 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.419645213 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.41781892 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.433706287 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.467473621 seconds)
done (took 1653.080101535 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.01729051 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.499989421 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.702966945 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.207114653 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.58452074 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.205184786 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.487722485 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.239146949 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.082317916 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.398127448 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.378210894 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.209028107 seconds)
  done (took 435.40377053 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.861350574 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.322535939 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 38.263749242 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 36.993342792 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.844899964 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.67261599 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 44.139495099 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 38.10809669 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.128309113 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.592478355 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 39.723339728 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.475671092 seconds)
  done (took 467.722594014 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.40508547 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 39.581235729 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 39.851140547 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.543628537 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.125952192 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.133913745 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.831739645 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.886657943 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.463659044 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.086427474 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.583389736 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.119132175 seconds)
  done (took 460.273681894 seconds)
done (took 1365.791650414 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.363111517 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.472334823 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.365188161 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.353739347 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.693601409 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.509075848 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.635727295 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.304358238 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.553361477 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.871595862 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 9.428612257 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.582016741 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.302655058 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 12.366760267 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.892727065 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.328017753 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 13.383535535 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.35338565 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.796882032 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.299136863 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.649255482 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.791571504 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.293281281 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.312782548 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.413707506 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.649583408 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.298451151 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.464454067 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.802354978 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.483065958 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.305771583 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.429576947 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.533537754 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.304508535 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.705856177 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.320007092 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.718205845 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.530150769 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.816944401 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.541937841 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.630517048 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.576261289 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.549187966 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.293548719 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.309254645 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.540483645 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.577734672 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 6.114261615 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.481814394 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 6.225235305 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.472523705 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.547680375 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.51854247 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.481742917 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.355107626 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.313029532 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.525003112 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.283206017 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.53332641 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.426747937 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.381454326 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.542557577 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.824307121 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.384403797 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.300723574 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 12.819013643 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.310845358 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.533637802 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.300245556 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.764482073 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.494656897 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.651372879 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.378359019 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.93653104 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.507202668 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.381576181 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.357496961 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.632426694 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.29596317 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 16.866412026 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 11.982449185 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.517947913 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.378546715 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.522783975 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.536677007 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.514048295 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.372219512 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.296231238 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 10.074426896 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.304639672 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.35195209 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.467428604 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 9.966567743 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.570420304 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.313260783 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.538296859 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.304125099 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.333725966 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.369901339 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.702221121 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.648531755 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.381769972 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.545297171 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.393119839 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.080158815 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.814087072 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.317456482 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.291210758 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.439767771 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.352150322 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.428540167 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.290447535 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.751803558 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.489121827 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.320445399 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.532520285 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.480921662 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.536578489 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.29722951 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.317381417 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.619296167 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.323220584 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.291090788 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.413105085 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.925491224 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.662351353 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.395180703 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.574228395 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.820293581 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 11.9398442 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.561722622 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.298641406 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 12.846507304 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.800624916 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.302494057 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 9.695661619 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.553414628 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.386739183 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.365728126 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.43335186 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.298407098 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 12.934670331 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.338476924 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.539650475 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.404834805 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.468255372 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.321383178 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.572402249 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.37518016 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.351799622 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.292222206 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.377889956 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.537410124 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.408312553 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.890502031 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.322864047 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 10.120549298 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.515049369 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.485627902 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.301707656 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 18.099967647 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.779153999 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.802911283 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.61256729 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.543563833 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.539119079 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.660754719 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.365051575 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.298394679 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 9.962688188 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.946285607 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 9.837323989 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 6.083654098 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.894368713 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.297534464 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.291748556 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 13.056857164 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.636239832 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.57215359 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.527118255 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.57663918 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.724062245 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.430962139 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.309290017 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.72244522 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.55261777 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.704399768 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.486687933 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.845216997 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.542187554 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.602467219 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.655705931 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.438394237 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.511330001 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.301888241 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.671660272 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.346174343 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.542788385 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.482358394 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.504331763 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.328560972 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.200452281 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 10.305721185 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 11.470421057 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 7.51118704 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.388158238 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.674448829 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.959985352 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.485223349 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.236301214 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.655460427 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.514443909 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.360187305 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.366689623 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.474000905 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.292397145 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.527168605 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.314511574 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.310269264 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.481605263 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.297838519 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.635045514 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.316349187 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.675659051 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.368497461 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.554993245 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.533222072 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.436007104 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.299056401 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.888341987 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.527383977 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.546169719 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.513784207 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.474320128 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.504336354 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.382279449 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.644280849 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 5.964393188 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.773550081 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.367393518 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.395645861 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.359013126 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.344581657 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.302239727 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 9.514511513 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.610070116 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.396259184 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.370274868 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.196855532 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.295573966 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.541515532 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.636590746 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.572036208 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.545957718 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.655056966 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.402457022 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.378316662 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.317168667 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.375932306 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.353987041 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.310236002 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.392669746 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.513278207 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.392285128 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.666568533 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.550987639 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.316774219 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.376857663 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.472941405 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.531711864 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.574148274 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.296590979 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 9.884062067 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.536332003 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.546599402 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 5.981295235 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.311127144 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.641896297 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.379359007 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.427279354 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.307753064 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 12.666637731 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.313949799 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.449027914 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.534562067 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.383675448 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.63886891 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 9.999844155 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.553867602 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.315578996 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.446797417 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.543952434 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.348294834 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.300309078 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.334622872 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.463294345 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 5.995053308 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.647981911 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.524807779 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.297797989 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.387686128 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 11.068785957 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.911084069 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.482441092 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.65067881 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.33213523 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.295296211 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.516808096 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.307484851 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.649207131 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.760303409 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.49239344 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.311768728 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.409754183 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.375382298 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.844628243 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.698301258 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.784133022 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.567996275 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.433752055 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.775538902 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.505311243 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.654072843 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.013286659 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.18012411 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.354331482 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.640295613 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.493280987 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 9.92353936 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.171426989 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.506785928 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.394739449 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.466792802 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.521219091 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.612122805 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.322917961 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.401199845 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.291954609 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 6.2888475 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.357395354 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.363343463 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.495680338 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.370795568 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 8.980194228 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.26437482 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.524016746 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.38427408 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.684146737 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.391412546 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.032836121 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.446504018 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.535176932 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.307526712 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.887376257 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.576217271 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.293173839 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 11.067543126 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.114322801 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.479663768 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.399893309 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.30970181 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.527086212 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.487604349 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.374379734 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.551478872 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.318328822 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.80764218 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.313949089 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.770803233 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.528323868 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.430559 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.656024195 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.299727429 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.973571387 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.544975755 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.318888782 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 8.952094393 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 6.189043385 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.634211802 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.316970093 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.293143399 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.923241425 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.296358951 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.364762549 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.644781712 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.696957842 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.636542018 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.596161699 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.674376792 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.473876226 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.320808105 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.439325601 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.317437332 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.283999021 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.763033146 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.543697315 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.36930168 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.482432383 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.885253721 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.372154963 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.264517527 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.286124646 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.528772715 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.545355763 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.513227753 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.670333312 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.380703515 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.418486179 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.486366768 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.378252083 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.240974599 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.46215859 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.311079084 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.809896074 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.524594928 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.299761214 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 16.817950594 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 11.798544001 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.541566871 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.646422186 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.660486294 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.340163057 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.411783051 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.369765098 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.289819051 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.761349815 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.334502689 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.516921883 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.591565323 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.317724427 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.811094177 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.37953784 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.011893891 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.660513178 seconds)
  done (took 2897.003195877 seconds)
done (took 2902.301567033 seconds)
SAVING RESULT...
DONE!
