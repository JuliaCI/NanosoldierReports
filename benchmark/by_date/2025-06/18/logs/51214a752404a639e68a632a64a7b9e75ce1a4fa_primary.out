cset: moving following pidspec: 1886953
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.810531057 seconds)
loading group "array"... done (took 3.084046152 seconds)
loading group "misc"... done (took 0.403963681 seconds)
loading group "sort"... done (took 0.248516965 seconds)
loading group "frontend"... done (took 0.005057107 seconds)
loading group "shootout"... done (took 0.698826313 seconds)
loading group "sparse"... done (took 0.478071938 seconds)
loading group "scalar"... done (took 1.032361018 seconds)
loading group "dates"... done (took 0.136964573 seconds)
loading group "alloc"... done (took 0.016939348 seconds)
loading group "find"... done (took 1.192008387 seconds)
loading group "io"... done (took 1.132382162 seconds)
loading group "tuple"... done (took 0.737949143 seconds)
loading group "string"... done (took 0.202112193 seconds)
loading group "random"... done (took 2.138506603 seconds)
loading group "micro"... done (took 0.046658876 seconds)
loading group "broadcast"... done (took 0.551753249 seconds)
loading group "parallel"... done (took 0.020100792 seconds)
loading group "linalg"... done (took 2.698413312 seconds)
loading group "collection"... done (took 5.499154091 seconds)
loading group "simd"... done (took 1.049977134 seconds)
loading group "inference"... done (took 2.435867003 seconds)
loading group "union"... done (took 2.790235489 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.127748594 seconds)
  done (took 1.841056378 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.139920236 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.262039773 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.596497403 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.158088932 seconds)
  done (took 3.848903763 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.690061786 seconds)
  done (took 1.391162224 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.978608805 seconds)
  done (took 1.690667754 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.986352857 seconds)
  done (took 1.689544913 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.23224517 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.200255038 seconds)
  done (took 1.130437272 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.049102774 seconds)
  done (took 5.757135791 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.538794476 seconds)
  done (took 2.247321243 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.05180126 seconds)
  done (took 0.786164969 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.232596454 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.224974398 seconds)
  done (took 1.200455827 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233141293 seconds)
  done (took 0.953867244 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.432259241 seconds)
  done (took 1.149063355 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.325881255 seconds)
  done (took 1.045461477 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.352791147 seconds)
  done (took 2.07187053 seconds)
done (took 27.578992263 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.271095534 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12805245 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12239126 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.164440015 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000306298 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.167763505 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.094884773 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.325787114 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113033158 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.187614455 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.034893969 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.486175218 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026832675 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.255386742 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049004937 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029735745 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.167162924 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020857661 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.448214215 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021675625 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 7.0959e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015801164 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.19997237 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.322202266 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034514445 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120882251 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03970444 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04300168 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032787769 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065369983 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0229518 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.374309994 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060490837 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.604375702 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037378655 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062576448 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092445451 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.150543102 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024214851 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024598014 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031618247 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076418697 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.030663048 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3871e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.070359098 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068770589 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048909409 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033166423 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.020346991 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06281463 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035225661 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075524587 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020627222 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.084493598 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046337455 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.041095553 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.054706383 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087774583 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027081989 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02993155 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030662589 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049435307 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020625458 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058115864 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046661722 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.078061137 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.129044956 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06586494 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029144453 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024300848 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084261933 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043127311 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.030646595 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048208165 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042835879 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04399751 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080474605 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057699477 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064019151 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085553531 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067253984 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094562599 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054005364 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063670624 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05667113 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036612016 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031979441 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173903733 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.018893715 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030947483 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.036807919 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.02916761 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060240296 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.017452902 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000331383 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029840907 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019729356 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03204895 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049021608 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9228e-5 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041411031 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056609371 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051199347 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011206423 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047699091 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000499409 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.023295523 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012568063 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.7767e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05950747 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.013378728 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 7.2327e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024109395 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029670212 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.01285466 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067978558 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037049518 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053760594 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049807257 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016463299 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.019962336 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098931541 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058982298 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025965178 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021136545 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04863439 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.01461701 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 3.3446e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08164981 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.028337665 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022662903 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043006486 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.04464258 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015942804 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06595713 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.023392763 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020517936 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.4402e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030556286 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040244899 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.011014799 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069609611 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061236307 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.012021302 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086178052 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018038676 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036656222 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091237573 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050696979 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01469623 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.053783562 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.01183591 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.03198116 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033545825 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051548823 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034874602 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.503e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050764946 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02672979 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.067587027 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.067878452 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048609258 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051663233 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025795466 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057787281 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045241624 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072600537 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014652327 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052128072 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020652635 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022684496 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028831859 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020853685 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.214677631 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016100064 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.7364e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056895786 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014750867 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03906285 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01964829 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006760256 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000215961 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034700988 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011188894 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036265076 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6458e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015271848 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075021403 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029117707 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054597812 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000311093 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.077428515 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023775821 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094303715 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019590979 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037089713 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022837563 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 7.8968e-5 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048869366 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066169741 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050794145 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.548400028 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08501133 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064315215 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7945e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036757692 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016706252 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046188398 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027845735 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.00140199 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045537612 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048280853 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006784087 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.036361981 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038741247 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.015327978 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037060074 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 3.4926e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.5447e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.021080564 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03103586 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006737402 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.203830875 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075471873 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025154323 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.3776e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040746062 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075539262 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018890792 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.020275243 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089077418 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.018736425 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063635762 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.02870886 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050872854 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072918001 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018384786 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070706571 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015258023 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061673102 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075533607 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04814938 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 7.6602e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041008228 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036360342 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056361422 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019776773 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048246569 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053112597 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.00012609 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.8248e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.02945936 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04438778 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000109507 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.061896554 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077203731 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023080938 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029073385 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042463707 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.024790737 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048204222 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.023014665 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.067270656 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061811897 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022813115 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000221673 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.017483661 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07930627 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057578227 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000181078 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.034308839 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.02046278 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069235107 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08408796 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.035251791 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069572539 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.028489337 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.030951705 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03892243 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.040370066 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000130239 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03550718 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05307905 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050151109 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032329105 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.038091929 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021324685 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035668016 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.016988655 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000175978 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041921714 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.012215326 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014508911 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.016848606 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048085711 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.015250097 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000104817 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028603858 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.023749355 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049877519 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000442214 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.045184667 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.8783e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.6724e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043712645 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.054628949 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027501482 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.051475742 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051680266 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030582386 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05487813 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02168978 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01683614 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084078391 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064722783 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027252164 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067548485 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.067625335 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.016536704 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023784045 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021107355 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020322747 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05866006 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050143269 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.039011059 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058338668 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053389522 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000126767 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.019181378 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.017077927 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022673386 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074218229 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0762793 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.29878434 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.9361e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000159856 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014646674 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073172579 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012313987 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032798294 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000108139 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052801714 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000330248 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075691069 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.843e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10779513 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000488451 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047859625 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075672371 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030886844 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.018421392 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020472125 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027785446 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.2884e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063790767 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069985463 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033103955 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170429483 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054191108 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.4673e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054317739 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047192481 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011741852 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.0522e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024806902 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000491521 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.050102137 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030916875 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029971947 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042955647 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.256683675 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052715626 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051488226 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 7.087e-5 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.024138338 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018911535 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051376427 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019579335 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.063729317 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033493237 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017331981 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026078721 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0240737 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055738814 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056264821 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034735964 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06751237 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066332616 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078723871 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.036051168 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013559472 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017946988 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048192616 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172781975 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.018272849 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034905543 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076658993 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013964958 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021917973 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061162594 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042937184 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000488085 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040275401 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045302622 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063524402 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077564135 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08464974 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016671772 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023194602 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050857924 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 3.5047e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020772449 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000330649 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000135532 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026743366 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.3254e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000117287 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016666465 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0147836 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.013880288 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000169266 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029594702 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045877009 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016465596 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050684872 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017887118 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.5569e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020888561 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.016755021 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03012533 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025823811 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072724004 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036177751 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012776756 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034905839 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059103766 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083252888 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028022279 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014771896 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.028463202 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.6704e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.041364831 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010701432 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4206e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019846153 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03878164 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022396062 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.5934e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048855215 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051635763 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015333631 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057423922 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06867454 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058639657 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069725762 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.8394e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031076599 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06457104 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.014598495 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047620406 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026449676 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025461018 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022575669 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.7628e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071791228 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.012000455 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032035281 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042844426 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0338971 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042314492 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030441861 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062071008 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023957038 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.022950563 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042382993 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074259415 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023753394 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028248012 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052408769 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047935838 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028097013 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068676264 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.065227992 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.046817492 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03545701 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.016097538 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061619882 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064812116 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040563869 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015726694 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051335667 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066015851 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011632984 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04293114 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.3677e-5 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028959108 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000602453 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014951833 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072686799 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.060636496 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03482344 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030476818 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072564129 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049233877 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01746941 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085590786 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5119e-5 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022631791 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011411817 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.042030726 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048967248 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.457538535 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.5362e-5 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020667558 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028364925 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000328747 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066448726 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047052501 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040483411 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051391788 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013159631 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086125566 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013237571 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032300052 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029814173 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02184985 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031598006 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059817225 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059950865 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.5516e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055823786 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.040468516 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.027246133 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028058465 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02224747 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015653622 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.00012609 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07345778 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049631714 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048243218 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.048129571 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034136055 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 4.2612e-5 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022118895 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01465665 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 3.5983e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066084582 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.048560092 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072878038 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03381082 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.8343e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03015187 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.060668384 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023142302 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052941587 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029340651 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.064279784 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.8015e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018529037 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066366087 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.9468e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066266541 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047458331 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030633364 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.095733412 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 4.1654e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.6702e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072191618 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047879741 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072769726 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014273898 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054868373 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028071179 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070469695 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025561499 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024489592 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055323504 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033545913 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035569942 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.016102513 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066410445 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031730914 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014451212 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037128555 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.4153e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000111985 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042668579 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068703738 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02014302 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055771498 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043506969 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068763914 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049902933 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026651943 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045037313 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079594482 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028809123 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.014182407 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025871669 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064917695 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030230784 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000401533 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048719269 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170376702 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049674052 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000111644 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040919887 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064023835 seconds)
  done (took 29.187121508 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.063786 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.235899377 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.0399059 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.057714015 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.060234817 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.053279931 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.033891775 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.197479555 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.065427989 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.05342658 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.040217439 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.069022669 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040374792 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.053367873 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.049945418 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.035206296 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.040838639 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.052669327 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.101316234 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.068287583 seconds)
  done (took 2.236105124 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.202735503 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.02981699 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.095164122 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.07506623 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.075805617 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.532079332 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.057254118 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 4.9183e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.286497174 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.057616992 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.5906e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.006512293 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.43e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.006783336 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.2676e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.008290005 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.1341e-5 seconds)
  done (took 2.29654594 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.172711432 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.343202702 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.107897437 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.190372023 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.129517809 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.311376958 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.486494974 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.284803894 seconds)
  done (took 2.867224396 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.134840406 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.035203699 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.114191642 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.09968836 seconds)
  done (took 1.217213288 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.057202172 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025175383 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.034841503 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025257373 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044793459 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025049693 seconds)
  done (took 1.049354628 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.04626215 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.053827974 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.17962494 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.036193951 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.035934971 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.040410444 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.056763443 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.046940217 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037461369 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.040533998 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.032649554 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026793186 seconds)
  done (took 1.497277382 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.059526431 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.046401718 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.051906325 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.045033987 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.04034786 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.040129312 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.051739798 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.045504484 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.03964686 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025555724 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030987417 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.048821602 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.03217045 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.032328861 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031168996 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.035149466 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.036360376 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020465756 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.04680115 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.043096619 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.044518351 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.046303478 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.036119556 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.047331384 seconds)
  done (took 1.819076694 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.051590236 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014661129 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.010807273 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.014870697 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.015112243 seconds)
  done (took 0.947949387 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.151370798 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.521883564 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.40908517 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142269478 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.00927296 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.00563524 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.554738041 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.65147378 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.462490224 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.758250761 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.589633364 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.099925054 seconds)
  done (took 27.194695047 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052991247 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.04998923 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.053025196 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.047238171 seconds)
  done (took 1.041852841 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.032372538 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 3.2613e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.043110261 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.5879e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.2172e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.044114636 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038880047 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.6226e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 3.0361e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.6041e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.5419e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.2152e-5 seconds)
  done (took 1.006973222 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.036004179 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045798992 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.034169146 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040912365 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.047262439 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.028213999 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026862975 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040149853 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.04120271 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038839054 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02335609 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045629487 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040769513 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029668418 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038635118 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023109786 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.034442209 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.04157664 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027787875 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034373577 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023853129 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045360525 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.03885094 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023110042 seconds)
  done (took 1.697208467 seconds)
done (took 74.78449042 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.094587968 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.038017613 seconds)
  done (took 0.97220762 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.211559373 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.061076659 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.062368868 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.056184248 seconds)
  done (took 0.970059868 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.037371676 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.036575791 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.041063249 seconds)
  done (took 0.965498248 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.04741714 seconds)
  done (took 0.908807836 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.150169205 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.240494291 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.094639613 seconds)
  done (took 1.336538498 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.168441937 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.058574413 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.055978597 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022989052 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.032867058 seconds)
  done (took 1.027110756 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.045935924 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.030925039 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.020459906 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019792412 seconds)
  done (took 0.983650514 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.062833342 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.060062124 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.05938181 seconds)
  done (took 1.041236754 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.062545288 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022990187 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.022265573 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022486548 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022978566 seconds)
  done (took 0.948725277 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.182957655 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.084524571 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.036954819 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.092545843 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.097308423 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.4475e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.3188e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.1248e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.3782e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.073661815 seconds)
  done (took 1.423347871 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.129380687 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 4.032e-5 seconds)
  done (took 0.991539272 seconds)
done (took 12.921019902 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.108613051 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.126188963 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.665462065 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.595192196 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.037106518 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025276736 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.030758644 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.9297e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024692746 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.6658e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.947916893 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028997327 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.585945697 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027390986 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.08352058 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.03094245 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.6869e-5 seconds)
  done (took 12.178971642 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.0522e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000924162 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000375057 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000934827 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000579011 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.2368e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.8033e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000350976 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000978315 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000374733 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000368552 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000579304 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.024190987 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000533831 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000410653 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000555385 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000379233 seconds)
  done (took 0.967826946 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5201e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.0472e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.086e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.308e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.725e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.352e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.536e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.286e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.0065e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.28e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.785e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.394e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 1.9461e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.0849e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2895e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.86e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.886e-6 seconds)
  done (took 0.90475901 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5418e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.5044e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.1748e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.5269e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.6416e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.365e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.966e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 8.323e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.8155e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.208e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.833e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.2999e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000215004 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2431e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.563e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.2378e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.45e-6 seconds)
  done (took 0.90434245 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.039848651 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.035119077 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.722226168 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.979796757 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 8.95780479 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.036770422 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.190661906 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.4018e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.401107941 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.035606076 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.674208436 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.285725293 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.234864431 seconds)
  done (took 21.498514701 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.24858301 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.214818056 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.13349351 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.063539831 seconds)
  done (took 1.583291675 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.151733607 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.109927202 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.074158613 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.061972126 seconds)
  done (took 1.332007159 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.106549497 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.050661052 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.067747772 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.056065406 seconds)
  done (took 1.216772108 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.039228813 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.05717229 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.037851288 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.02908452 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.035297378 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.055511181 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025407406 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.02510489 seconds)
  done (took 1.236109167 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.918e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000176314 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.8391e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.3042e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.5898e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.621e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.6169e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.2083e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.9695e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.3298e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.6678e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.5751e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001919699 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.5574e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.6451e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.8882e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.086e-5 seconds)
  done (took 0.936671497 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.3378e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.2044e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.053e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.543e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.836e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.077e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.208e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.192e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.294e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.467e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.042e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.915e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.0099e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.776e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4684e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.032e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 7.16e-6 seconds)
  done (took 0.925287125 seconds)
done (took 44.545492167 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.028431236 seconds)
done (took 0.954138293 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.092796044 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.076887317 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.052245596 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.119762109 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.067073735 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.10766016 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.090219312 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.495408036 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.072253632 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.07176805 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.392916232 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.828162741 seconds)
done (took 5.401135111 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.112304679 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.215556742 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.04762325 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.082844745 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.3772e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.041978507 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.083643711 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.039089854 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.109731016 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.055757109 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.091232538 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.053552782 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.4908e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.3947e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.055052189 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.084388781 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000733866 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.107197103 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.036326807 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 6.3045e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.9313e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000701201 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000697082 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.4992e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.033318445 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000864184 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.0085e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000826628 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060851919 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 6.0494e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.0001409 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.4335e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.6521e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.3502e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.5745e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001108608 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.8697e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.067657534 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 6.4653e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000831261 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012730261 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.9599e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.001019957 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.2237e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000141439 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001010282 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.3882e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.6557e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.9514e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000719245 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.9393e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.6559e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.1262e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.0373e-5 seconds)
  done (took 2.4133484 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.550113413 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.440076993 seconds)
  done (took 1.939984227 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.061287726 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.112954648 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.160289738 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.130530594 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.112287462 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 5.3585e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 1.1079e-5 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 1.268e-5 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.214109458 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 3.7495e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.1116e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.574e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.0997e-5 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.1061e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.7325e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 1.1082e-5 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.7761e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.1829e-5 seconds)
  done (took 1.74860429 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.472761 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.170357943 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080771627 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.311904909 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079181699 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076590613 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.130102164 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000161831 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074244968 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 9.0672e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.079335591 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031818101 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.075218326 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.000106452 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.034801799 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 7.0658e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.028935728 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002871229 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.094099144 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.003094584 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.13110681 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.003056671 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.09281884 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002809908 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 7.2811e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035643412 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033637592 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.034030068 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.070177628 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.2774e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.003136643 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002838203 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.00060171 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002720749 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.035559855 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000121993 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001623538 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.035356744 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002783808 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001482618 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.031887888 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002314443 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035459998 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.003158551 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000105517 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.00559266 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000222109 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000133041 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004640476 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000169846 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.1029e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018209076 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.8123e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035137199 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.8856e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.0247e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.4105e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002791871 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000125342 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.6706e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003790814 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003816651 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000116557 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002297109 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.03310055 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.3062e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000210378 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004599691 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.4153e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.04621302 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000114331 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006051982 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001611491 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.025e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002994319 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000560147 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002386581 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000210555 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000201315 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002427181 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012251552 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000174184 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000105818 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002894151 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032047651 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000100598 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.3726e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.013120233 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.0002173 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012377384 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002211637 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000210542 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006299555 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009085403 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000200635 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000103438 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00019038 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007830117 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000107526 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.044601753 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001498826 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 7.8967e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000216565 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.00115534 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 7.1956e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000772561 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000687746 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.54e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001419298 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000146872 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000126795 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001464822 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.4878e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000126057 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.2119e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000209404 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008117836 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008024012 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.00139641 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000142107 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008254568 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002045359 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01097338 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.00012478 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001423101 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.7764e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000131828 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000178471 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001530857 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007525402 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004989462 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000163901 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000225953 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013346702 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002336237 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000485909 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008121432 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000122576 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012591643 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008975855 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000254744 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000753225 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000133361 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001622382 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.00251958 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006247119 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 7.9298e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.1751e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000186848 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011527321 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.5462e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.968e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.1517e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002408073 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.9091e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000151482 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.016117458 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000113287 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9444e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.4817e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002472513 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.6454e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002239664 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.1098e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.0608e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001150849 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004774834 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000712249 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000137963 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.1928e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000237827 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.4435e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000548619 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.6214e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001729746 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004957221 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000172519 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008825072 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003400609 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002122412 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000789199 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.7769e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.00175519 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.2191e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000219967 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000130915 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002591086 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000131707 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.9953e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001669136 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006918738 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014256686 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.00014515 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.9754e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002577943 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001429376 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000122436 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000179684 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000125237 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.0020009 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.00047126 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.00360235 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000754928 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.6789e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002155568 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009083996 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 7.2049e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000116196 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002867042 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.008063367 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000130494 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000167332 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.5656e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000107542 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000223694 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000908245 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.35e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007263872 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001219341 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000137978 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000149235 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005112656 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.3809e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001467555 seconds)
  done (took 3.84897593 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.060802788 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.1437976 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.240711188 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032048537 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.00019448 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.147455534 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.00016437 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.257963604 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000117527 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.999682488 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000100092 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.054496385 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000234163 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.469631354 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.26072515 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.220881769 seconds)
  done (took 3.841141892 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.861272388 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.895508017 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.264977192 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.420573491 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.134614818 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.449866624 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130856762 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.109860202 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.110423592 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.101083465 seconds)
  done (took 5.450074312 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.06174329 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.175635003 seconds)
  done (took 1.204242371 seconds)
done (took 21.384614955 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.021568104 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.021199697 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.020215864 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022596546 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.020034187 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.037271294 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020473151 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.01982805 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.049775265 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020723098 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.027471572 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033401842 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.020764406 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.019801969 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019816942 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.019395006 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.020380969 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019821074 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.022083284 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.020096023 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020652449 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.021788228 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020678221 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.021357845 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.020602822 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026182816 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020936214 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019907524 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02641027 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021756614 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.021276466 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.021089988 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019870573 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.020008131 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.020193512 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.019316659 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.027769443 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.021007514 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020972832 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.0220066 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.020557834 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021397075 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020851481 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021593335 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.019762974 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.019705151 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021880422 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.021791243 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.019796863 seconds)
  done (took 2.059327114 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.036152259 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.6487e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.035576866 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.9282e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.5542e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.5146e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.4876e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 9.072e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 8.4e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 7.62e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.6968e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 7.989e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.428e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.958e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.872e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.518e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009191579 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 3.2562e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.8775e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 9.367e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 9.815e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 8.571e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 7.401e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 7.928e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 7.783e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 7.141e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 7.291e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 7.123e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 7.161e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 6.754e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 7.116e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.603e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.0677e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.7791e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 7.545e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.567e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 6.16e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.1465e-5 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 7.592e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 7.232e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.684e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 8.266e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.8097e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 8.33e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.766e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 7.244e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 7.027e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 6.649e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.663e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.669e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.7e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 6.549e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.936e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 6.32e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 9.599e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 8.555e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 8.65e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 6.075e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 6.438e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.2268e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.838e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 6.39e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.418e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.596e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.78e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.422e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 6.295e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 6.523e-6 seconds)
  done (took 1.143770719 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020439577 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.5802e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 8.832e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 7.302e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 7.693e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 7.248e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 7.161e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.565e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.334e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.475e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 9.627e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.982e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.476e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.012e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.776e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.676e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.646e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.9e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.624e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.723e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.822e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.01937719 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.8317e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 9.081e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.771e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 7.633e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 7.026e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.558e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.941e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 6.856e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.805e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.364e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.472e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.848e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.111e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.39e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.432e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.3034e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.307e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.07e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.312e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.432e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.4479e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 7.007e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.528e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.958e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.191e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.23e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.869e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.808e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.986e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.932e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.692e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.797e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.369e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.991e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.559e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.414e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.508e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.578e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.596e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.859e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.425e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.495e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.652e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.728e-6 seconds)
  done (took 1.010083789 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.045318397 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.027661983 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.048008955 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042989782 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.038282689 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.050839761 seconds)
  done (took 1.227728413 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.022319452 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.1323e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021458818 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.7402e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.2374e-5 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 8.87e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 7.917e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.446e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 8.108e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 7.485e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.3978e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 7.829e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.0487e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 6.451e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 6.252e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.067e-6 seconds)
  done (took 1.013688226 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020222625 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.871e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 9.695e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017717068 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019300016 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.6838e-5 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.2298e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000157071 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 8.759e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 7.824e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.1279e-5 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.987e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.365e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.117e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.1455e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.996e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.555e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.203e-6 seconds)
  done (took 1.027162623 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020406 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.7802e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.019437977 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.5797e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.0107e-5 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 8.043e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.272e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 7.133e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.767e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.828e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.0638e-5 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.359e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.493e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.567e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.458e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.766e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.521e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.409e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.0131e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.565e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.146e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.362e-6 seconds)
  done (took 1.009405162 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019787203 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.7161e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019773994 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0503e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1443e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 9.613e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 8.548e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 8.437e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.736e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.631e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.0086e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 7.366e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.952e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.247e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.884e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.238e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.68e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.482e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.123e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.67e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.301e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.459e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.362e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 7.112e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.338e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.065e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.451e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.988e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2011e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.379e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 7.051e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.713e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.564e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 7.239e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.382e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.166e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.713e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.55e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.525e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.427e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.601e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.399e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.8692e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.508e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.669e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.28e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.229e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 6.443e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.024e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 6.119e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.107e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.084e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 6.512e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.037e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.469e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.899e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.986e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.091e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.892e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.988e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.319e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.219e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 6.304e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.415e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.262e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.283e-6 seconds)
  done (took 1.009981022 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.020230126 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.01917135 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.7578e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 9.249e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 8.279e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.553e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 6.561e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 6.8e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.195e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.72e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.449e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.213e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.302e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.151e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.3e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.913e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.0769e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.882e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 6.253e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.875e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.741e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.895e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 1.1295e-5 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 6.122e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.326e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.441e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.417e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.344e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.173e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.619e-6 seconds)
  done (took 1.008836034 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.020230558 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.0023e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021162086 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.6706e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 9.921e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 9.947e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 8.208e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 7.587e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 7.391e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 7.313e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.0838e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.209e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.745e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 6.325e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.584e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.156e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.908e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.507e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.965e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.0993e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.583e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.071e-6 seconds)
  done (took 1.010967043 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.02041653 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.9044e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 7.971e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019231024 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.5457e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.75e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 8.982e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.878e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.716e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.002e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.5083e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.217e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.866e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.134e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.156e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.83e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.837e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.386e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.363e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.538e-6 seconds)
  done (took 1.00986686 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.022168202 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019662846 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.466e-5 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.2375e-5 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 7.243e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 8.02e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 6.625e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.67e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.74e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.521e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0415e-5 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.54e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.295e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.081e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.517e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.595e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.47e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.708e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.0721e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.654e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.121e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.51e-6 seconds)
  done (took 1.010697918 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.020425391 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.4642e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 8.195e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 7.573e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.895e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 7.094e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 6.445e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 6.235e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.985e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.222e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 8.74e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.274e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.269e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.969e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.428e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.707e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.836e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.773e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.068e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.286e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.371e-6 seconds)
  done (took 0.990314462 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.020198607 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019644925 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021361109 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020759291 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016075888 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.020287311 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.01616612 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024606907 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015875688 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019714112 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.019572928 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019364597 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.020221429 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023840216 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016405336 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020492607 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020395788 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.022318753 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.0205213 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020710439 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020795721 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.016041946 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019900444 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.020114305 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.021189827 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020901414 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.021235024 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.01610843 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016332046 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.020354365 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019785216 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019788101 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021324811 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.02003334 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.020201477 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029531318 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.02070666 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016145034 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015983239 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.021160345 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020593311 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020646912 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019575277 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015917475 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020642391 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019504613 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019782116 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016136973 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016068321 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020285112 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015949417 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020066048 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015957842 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019924112 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.01964153 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016259803 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01620536 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.01977551 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015905739 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019844085 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016056705 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016266376 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020310565 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015963465 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.01965974 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015943831 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.020012038 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019708485 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019559552 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019768771 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023338591 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.021096963 seconds)
  done (took 2.367635331 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020988983 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.020107017 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.9237e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.0073e-5 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 9.849e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 7.996e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 7.981e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 7.727e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 7.339e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 6.933e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.903e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 6.658e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.713e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.041e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.34e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.537e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.407e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.206e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.925e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 6.129e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 6.063e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 6.0e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 6.315e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.917e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 6.074e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.041e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.304e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 6.505e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.764e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 7.536e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.866e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.947e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.681e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.082e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 6.149e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.921e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.742e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.945e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.419e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.84e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.543e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.825e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.8649e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 7.503e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.89e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.888e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.703e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.708e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.628e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.03e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.387e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 6.276e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.708e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.936e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.222e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.653e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.61e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.87e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.745e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 6.131e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.937e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.1e-6 seconds)
  done (took 1.015418202 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.020243789 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017711318 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017877964 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01918104 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017834346 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.551e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 7.7924e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 8.937e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 8.02e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.997e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017688178 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.7978e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 7.416e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 6.1238e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0179e-5 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.96e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.6324e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.618e-6 seconds)
  done (took 1.083302972 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.020051664 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.019103585 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.8747e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.1262e-5 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 9.227e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 7.68e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.697e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.387e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.87e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.831e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.4626e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 6.269e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.918e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 6.119e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 6.354e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.82e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 6.085e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.893e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.082e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.459e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 5.322e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.488e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 5.783e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.48e-6 seconds)
  done (took 1.011244902 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.053032875 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.4654e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 7.589e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 7.053e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.901e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.928e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.95e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.125e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.886e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.746e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 8.351e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.767e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.379e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.899e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.474e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.711e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.07e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.1013e-5 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.56e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.422e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.272e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.257e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.428e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.448e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.411e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.61e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.271e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.583e-6 seconds)
  done (took 1.029843463 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019883234 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019859807 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.3207e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 9.897e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 7.978e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 8.441e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 7.278e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 7.126e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.645e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 7.515e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.0685e-5 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 6.321e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 6.914e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 6.793e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 6.515e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.185e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 6.823e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.499e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.121e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.213e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 6.386e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.495e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 8.092e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 6.413e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.681e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.686e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 6.322e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.988e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.757e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 6.242e-6 seconds)
  done (took 1.012262177 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.02169096 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.019121463 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023999862 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.7144e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 9.103e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019153517 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.535e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.01932855 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022726226 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022727298 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.024201004 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.7758e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.01958959 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.0346e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.4328e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.021419184 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.772e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.227e-5 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.3711e-5 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.0849e-5 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.0639e-5 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 7.706e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 7.105e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.0599e-5 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 7.363e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 6.494e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.783e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 6.368e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.38e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.106e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 9.143e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 6.667e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.912e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 6.868e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 6.431e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.942e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 6.004e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.258e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 6.285e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 6.077e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021221085 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.7691e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 3.0844e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.1848e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 8.49e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 8.632e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.02106943 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.5437e-5 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.316e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 8.423e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.122e-5 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.1148e-5 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 7.747e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 9.353e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 6.531e-6 seconds)
  done (took 1.229599846 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02024858 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.1106e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 9.679e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019283751 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.5377e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.0692e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 7.525e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 7.498e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.75e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 6.725e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.863e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 6.392e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.345e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017750507 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.5496e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.4444e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 8.091e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 7.683e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.83e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.84e-6 seconds)
  done (took 1.030620067 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020436125 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.9199e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021521467 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.6091e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 9.407e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 9.479e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 8.119e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 7.602e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 7.74e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 7.468e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.127e-5 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.719e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.292e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.92e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.733e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.879e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.0637e-5 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 6.925e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 6.216e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.336e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.2e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 6.533e-6 seconds)
  done (took 1.017116836 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.019735408 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019536521 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.8226e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 8.086e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.3154e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 7.362e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 7.036e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 7.149e-6 seconds)
  done (took 1.012013389 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.02114668 seconds)
    (2/2) benchmarking "in"...
    done (took 0.020606229 seconds)
  done (took 1.014373663 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.033115686 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.021852533 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019559695 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.024242375 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025069296 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025176347 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020703785 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028835459 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021757976 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.022782315 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021656939 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021059883 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024997704 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.021232869 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022893728 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02263238 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021335209 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.02184883 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.023691792 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021961629 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021725401 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023166264 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.021514179 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.02078375 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.027905808 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021629658 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022166833 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020653956 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022970352 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020787666 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021412922 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02682054 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021133861 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020528309 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020415974 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.02249977 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021921364 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021957574 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.022426892 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020270878 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020026688 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.021709344 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024217259 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020692448 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004512306 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024439551 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020556113 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019978394 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020423445 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.023389861 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027389009 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022546491 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.02305659 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021624178 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021860018 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020445452 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.021509471 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022309808 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021115596 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022808802 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.027195037 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027802904 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021808977 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020964169 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021837607 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.026978172 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022767799 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020713111 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019943092 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021947496 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024995281 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.022854323 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.023161306 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022874498 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021051991 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.02237258 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027702505 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.021011608 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023204873 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021072022 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.02150466 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021766294 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020601068 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024400197 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021799651 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027727428 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021479596 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023127508 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021379039 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022184954 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021629203 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027663448 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022775795 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023697909 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022643065 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022834354 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020279964 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019459438 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.02055447 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020052154 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019503359 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021731392 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027707929 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021549504 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020750291 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021619549 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028793156 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.023237606 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003169231 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021953715 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022942567 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021970085 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021867302 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02744049 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021588321 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026925277 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024110399 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020846266 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020167258 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.021236888 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.00349669 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019970554 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020490225 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.021138625 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021995803 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023241614 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021743334 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.01977927 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.02167779 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02226359 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019978014 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021022025 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02130884 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020827963 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020686784 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020600629 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02267832 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021781355 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.021098932 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.021566034 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023598274 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023401496 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020830559 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021187859 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022196748 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023932967 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021478899 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022173966 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022419627 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019591403 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022005502 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022700755 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019948818 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020791584 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021270876 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022213558 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022674567 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.022142429 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020084845 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021854044 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.02027739 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019824303 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028249765 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.02021636 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022245688 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022811822 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021710643 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003151013 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002815128 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.021345398 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023185894 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.021429755 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021421395 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020906614 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020954087 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021844652 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022768835 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020701697 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021690583 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023016912 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021449628 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019823488 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020523368 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023140592 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019604647 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02130864 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022474998 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022851806 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004267519 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022797974 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019260964 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.02191763 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020655183 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022803809 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.021099192 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021145022 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019897806 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022548308 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026692311 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020912834 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022350002 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.022224736 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020504636 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021206788 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.021284551 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021907291 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021898813 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.02158518 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019909439 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023404794 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019400273 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022530023 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020317764 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021165527 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.021102389 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020703397 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020442052 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021964323 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020900247 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.029172774 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.022037279 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020706712 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027309534 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026725117 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019654693 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.02078094 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026654403 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021397679 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021557559 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022024759 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026975917 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.022453016 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021308932 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021054164 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.024133179 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023443968 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.02202223 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019264656 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.02151103 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021687352 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022638106 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020474345 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019545342 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.022178159 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022800862 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023884193 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022052395 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.022304335 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021078801 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022301865 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021080234 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02336908 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022214061 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019879897 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022238055 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02439724 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022468369 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.021140265 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022702765 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026454027 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020379201 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020912813 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020665261 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021546096 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021964279 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022132374 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.02181468 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022808565 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021859245 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023280315 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020655324 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027921935 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020781509 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.02087027 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019782894 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.027826892 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021104951 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019281315 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020635147 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022306293 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021617494 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.022938988 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019577703 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021831495 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019495418 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.02211912 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026921876 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.024058788 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.022217963 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022371954 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020799075 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021240118 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020823889 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021396097 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.02182814 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021459414 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021752286 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02040918 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021221832 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020750518 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026111242 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019624418 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021386012 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019629719 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022415956 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019787704 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022062253 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022139205 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021692356 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020507129 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022448299 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022182157 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021032559 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021215034 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020691349 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021479551 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020521992 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020414763 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019894499 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019326418 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.022003416 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021761815 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.021171211 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023461976 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022543543 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020596212 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022009202 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020831368 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024797767 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.023411477 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023401041 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023742906 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022407384 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.02116085 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021536894 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020934674 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025794181 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021830806 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020252969 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021123399 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021331289 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020940433 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021667429 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019659871 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022519929 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.00894826 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020732197 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021382789 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021367368 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.02337698 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022233809 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020996014 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021728233 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020695194 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020067674 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.02004508 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020736492 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.021098771 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020222273 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025865718 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020566947 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020912695 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025777108 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022953798 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022112243 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021814816 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020467444 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020558575 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02376839 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026915404 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021413868 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.022054832 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021470372 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022023761 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020771517 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022887564 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020172393 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022376513 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021621852 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020986419 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020623514 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019493466 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022302855 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021037277 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021249657 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021045812 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022188777 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019528653 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.02032388 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021425519 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022110282 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.02058605 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020964562 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021739498 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.021195089 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020725808 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.02075017 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020831685 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021409086 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026479211 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.020065544 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021781969 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020628893 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019775939 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020158711 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020390601 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022659927 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.019527721 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01960834 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026332941 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021810391 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020614392 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019407337 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021679142 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.02112225 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020292856 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021933291 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022694996 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020206098 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021120993 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019162245 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.023278867 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019706302 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022510929 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020470493 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.02020488 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021342066 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021306574 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019297832 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019592273 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020759544 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023014329 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021736415 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021048158 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021376418 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020487908 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021988229 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019485813 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022120565 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021995441 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026235509 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022618694 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.02019429 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020605145 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026442384 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021030631 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021667667 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022124718 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020675483 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020314197 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020706507 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003968037 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022797046 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020508116 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021782533 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020615137 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022593078 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022785496 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.02065561 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019089833 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020471605 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020417813 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020543106 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022411937 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022242183 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020707425 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021298416 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003093504 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019256089 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020707476 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020603787 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020706445 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020847016 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021349895 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021393428 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020370841 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019310181 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020240136 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003256651 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020487345 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021704567 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020921305 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020888913 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021177429 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020598564 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021545782 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021130625 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021322817 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02601952 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003723446 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019651662 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.022071769 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022496163 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020785663 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020458281 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020150206 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020959757 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020299258 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.02046535 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019852196 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020500714 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020720653 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020479005 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026162444 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021544275 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019273899 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020448212 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020270183 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020313868 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021548066 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023008323 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020651755 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021183532 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020345865 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020270796 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022063751 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026193487 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022696067 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023048151 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020884381 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019447187 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022529433 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020254578 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020544174 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021339569 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027685734 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019174053 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020454362 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020642563 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020539377 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020049952 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021798528 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020444965 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.02058752 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020431484 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.022126238 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020872205 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021206025 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020101846 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025130345 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021383993 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020550037 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020180873 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021544374 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020364309 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020589199 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021989819 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026351661 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021990455 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019464955 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02297855 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019063423 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021719273 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008631867 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022606673 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019893986 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021717418 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026502472 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021076215 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020253644 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.02112516 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020716591 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020051691 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020341818 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021161575 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02012631 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021979017 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020275276 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019536055 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020483523 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.02589581 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.022321269 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019765253 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022400669 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023609908 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020528051 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.023084631 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023010348 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019306459 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021507062 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022714885 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025499375 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023270154 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.02111683 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019789164 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019092837 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020425915 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022379182 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003893104 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021856371 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.009205747 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019833678 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019751211 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022810414 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021039608 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.004087447 seconds)
  done (took 13.733817661 seconds)
done (took 42.070486325 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020249272 seconds)
    (2/7) benchmarking "month"...
    done (took 0.019277161 seconds)
    (3/7) benchmarking "year"...
    done (took 0.019191225 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020516317 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.021204101 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021085016 seconds)
    (7/7) benchmarking "second"...
    done (took 0.021185209 seconds)
  done (took 1.142669294 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.022151298 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.478049722 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021973586 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026532978 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.283619279 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.192484667 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.185289846 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.02652296 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.026327241 seconds)
  done (took 2.271498019 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021424981 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021998947 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.02183146 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023445028 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.041490935 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.02037696 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.023217156 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020455969 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021545067 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027565567 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022534893 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020552242 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.030783861 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025308668 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.02445499 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021704135 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021551687 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022989578 seconds)
  done (took 1.45435885 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.04285312 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.0226918 seconds)
  done (took 1.079226167 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020444276 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.021087438 seconds)
  done (took 1.052469462 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.020199084 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.152048792 seconds)
  done (took 1.182807614 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.037932001 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021913367 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021409617 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.021270883 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.031924657 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.034365961 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.034062956 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.021342692 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021638909 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020917879 seconds)
  done (took 1.282502104 seconds)
done (took 10.487816055 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.062779865 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.093261073 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.031367092 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.053785477 seconds)
done (took 1.255606243 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.042624534 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.041753646 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.042021268 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029275172 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.056039377 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038482231 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041727416 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.013e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041825259 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.05611862 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.769e-5 seconds)
  done (took 1.39364087 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.042111484 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.04137312 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041608004 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030730631 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052458453 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027918432 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041634255 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.0557e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041538219 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052573212 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.9053e-5 seconds)
  done (took 1.393141883 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.088020137 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08610255 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084562529 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091197265 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.086381784 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.026924152 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.227e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082083705 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083449864 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.0029e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.089514614 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.085084873 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019783163 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088345865 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.0225e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.3857e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.4197e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 9.634e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.088247607 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083623559 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 3.058e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.4765e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.2174e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4941e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 7.224e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 7.179e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 7.501e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.3875e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 9.826e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.083993062 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085233676 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 3.0041e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.7783e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.2109e-5 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.0436e-5 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 8.247e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.345e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1486e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.1682e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.1028e-5 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0877e-5 seconds)
  done (took 2.271876877 seconds)
done (took 6.072200466 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024379203 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032482665 seconds)
  done (took 1.071013979 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.240529084 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.840791941 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.731723377 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.888731547 seconds)
  done (took 4.486398278 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.896109356 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.10817957 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.051518504 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.043156088 seconds)
  done (took 2.154899917 seconds)
done (took 8.978784366 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.071999174 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.023616127 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021305086 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.022171532 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02101602 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021692781 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021505326 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022743433 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021264605 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023574704 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022420406 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022206093 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.021176103 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022943498 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023490447 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020901783 seconds)
  done (took 1.457430381 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.138925072 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.232986717 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.294794399 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.039056765 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.082774508 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027918772 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.14208322 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022453946 seconds)
  done (took 4.008500209 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.024106665 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.022247929 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.025406699 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020732508 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022725688 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.024103161 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022322076 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.02395816 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020466997 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021794378 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.022295082 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022370198 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023787487 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023056399 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022557593 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025266909 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.023083011 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023031018 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027053913 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.023237935 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023833768 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.023483385 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022281109 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026854403 seconds)
  done (took 1.589766372 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.022094477 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.04595314 seconds)
  done (took 1.098035021 seconds)
done (took 9.181193293 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.024199955 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023774183 seconds)
  done (took 1.075677445 seconds)
  (2/7) benchmarking "join"...
  done (took 0.273491662 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.04206583 seconds)
    (2/4) benchmarking "different"...
    done (took 1.0408e-5 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021961816 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.2282e-5 seconds)
  done (took 1.117394992 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021519275 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.136298125 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000211017 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.25e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.00090278 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 7.93e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.843e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000566491 seconds)
  done (took 1.169796867 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023730233 seconds)
    (2/3) benchmarking "different"...
    done (took 9.198e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.698e-6 seconds)
  done (took 1.060268825 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.038765656 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.025270711 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021506694 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021858615 seconds)
  done (took 1.141201903 seconds)
done (took 6.895252986 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.023108963 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021204855 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031980497 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024729477 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021707486 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.024270831 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.024136017 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.0207448 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.039066903 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.061525511 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.4825e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.034317733 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.020905099 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.034405556 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022394633 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.02450729 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021233768 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.5278e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.020743374 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.5017e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.02394617 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021429551 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.022594906 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.5314e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.3405e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026512848 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.3195e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.4593e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.4628e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.1897e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.4659e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022758743 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.6056e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.2568e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.9477e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.0693e-5 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 8.264e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 7.212e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024353853 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.6732e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.8698e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.024070626 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 4.4449e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.1666e-5 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.5876e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.0715e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.1564e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 7.474e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.3478e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.1856e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.3348e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 7.664e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.313e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021265048 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.026790513 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.8203e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.4512e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.9505e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.2255e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.2653e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025782873 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021613659 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.7469e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.7954e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.6574e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.0782e-5 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.6283e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.0725e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.2347e-5 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035422216 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035872118 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.5798e-5 seconds)
  done (took 1.828473654 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.039937143 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.045542838 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024887283 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.02423399 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.024176154 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019854936 seconds)
  done (took 1.214337455 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022871239 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022034327 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025315374 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.035336974 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.022164586 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.04094858 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021882613 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021731377 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025048162 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026232354 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021347729 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021742656 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021376303 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.032290207 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025585009 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022413727 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022559344 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024823668 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.052225194 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024641182 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021826644 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024754333 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034441395 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024761185 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022315408 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.039482768 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021919623 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024531913 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021162037 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029680731 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.035880217 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024604802 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025765425 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.029015589 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023586951 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031814437 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037646359 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033699274 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.048381271 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.032392988 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021723543 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.050944039 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064271801 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.040109057 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034275104 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020879484 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020848917 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021782288 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024975433 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.022163022 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020750804 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.0241797 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033325882 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027797554 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019672678 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030845283 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023399903 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.03110815 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023074509 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.02180982 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021451372 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022427289 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022445071 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022445035 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025386978 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029993491 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.033907683 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.02347002 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022412971 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.02447903 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021357866 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.03216997 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021267787 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.02499248 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.022055559 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024015523 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.034805682 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021670938 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.02479739 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022311323 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033780224 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.040930424 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.02184771 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024207416 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.029207209 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019276388 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.028326135 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035114178 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.022055153 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025384256 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021371869 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.020198216 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022455369 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048918054 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034859799 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033841552 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030726938 seconds)
  done (took 3.726819914 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.052519101 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035522931 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.03430894 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.032061299 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.020247726 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021493529 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021498736 seconds)
  done (took 1.262764801 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.040115442 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.053559212 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.036151026 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.052295565 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.047774134 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.046198523 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.051946833 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.052253149 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.03727167 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 3.243e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.041786108 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.04010723 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038028632 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025783118 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002556003 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.049117093 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035630992 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.040243332 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.297e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.041312131 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.043279687 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.049050172 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.025669313 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.047200354 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.026478959 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.041378475 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.0096e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.0314086 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.023060676 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.7364e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001088398 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.029358578 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.9242e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.9304e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.026605771 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035150995 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.025815769 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.8503e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.02970182 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025606638 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.023610808 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.034990381 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 4.0469e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.1983e-5 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.8177e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.036188328 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.7464e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 8.2411e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.00559905 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.0327e-5 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.0923e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001073699 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.276e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 8.741e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.8488e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 8.927e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.3578e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.023845191 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.9327e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001093057 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.4029e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.2856e-5 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.6088e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.026111347 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 8.5894e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.4447e-5 seconds)
  done (took 2.392742084 seconds)
done (took 11.457730629 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038191192 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.103608841 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059434587 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.124769664 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.140525906 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.368364371 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.024126166 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.039371761 seconds)
done (took 1.950257637 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.046531229 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026586734 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.033165338 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.025325977 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.020738672 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029620979 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.101267831 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.024005612 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.021007412 seconds)
  done (took 1.406511856 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.194261822 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.339479053 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.271084509 seconds)
  done (took 1.862171518 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.038880163 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.063201926 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.033027036 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.9785e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 9.76e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.047853752 seconds)
  done (took 1.246848029 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.234044589 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.072498883 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.114880468 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.096013145 seconds)
  done (took 1.580146116 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.173531266 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.149170103 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.284287566 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.107660501 seconds)
  done (took 1.780914449 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.061417363 seconds)
done (took 8.994413136 seconds)
(18/23) benchmarking "parallel"...
done (took 1.068317341 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.026525549 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.024119564 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.040900334 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.03713134 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.023190925 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.108139431 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.04591942 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.149458669 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.041606198 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.023590768 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.250114238 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.02620104 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.030413898 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.036655465 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.023706854 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.123257972 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.029155663 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.121768448 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.042669117 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.091272563 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.120598775 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.083207151 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.234583683 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.031522191 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.093583308 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024534411 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.029699134 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.086425667 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.095106352 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.047311429 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.044493684 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.029227413 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.028747278 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.027780955 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.024683393 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.03758608 seconds)
  done (took 3.392250057 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.060976017 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.253913947 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.092124661 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.149477585 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.056975523 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.039973786 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.187848495 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.147358967 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.251933923 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.004155428 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000234858 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.177528236 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003676593 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.127868309 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.143196242 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.267196523 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172579021 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048419505 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.209381955 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039845362 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.420068912 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.023439873 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.592995734 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.5126e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003724222 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.0593e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.051874896 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.288565117 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227547567 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000584047 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.237275229 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.288098058 seconds)
  done (took 13.637341813 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.554055972 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.182905803 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.093538925 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021458321 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.113661657 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.149369869 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02109403 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.092301323 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.084761256 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043943688 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.204113573 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.4822e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075830317 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.242842194 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033831369 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.106921538 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.214367659 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.057895938 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.14834642 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.052407548 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087399069 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.12453219 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.052222949 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.078580184 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.06661469 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.060656846 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.035046426 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06578834 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 9.1891e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.78995424 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.043776037 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.114843745 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.185530526 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.054026847 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.11538964 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025667981 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.1407e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.066266234 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.026497252 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.04185883 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000605285 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.2489e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.021124802 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020001587 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.3297e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.03048753 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.129588416 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.101179505 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.3247e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.089777205 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.02719966 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019896324 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012163991 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.02237428 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.6776e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068054615 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.755961091 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.090399077 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.027118983 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.050637745 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.20884144 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.838828275 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.2012e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.002611011 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.216473815 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.062801729 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.044022339 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.6308e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.050671489 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.1023e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066493523 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 8.9692e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.021023382 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111113759 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053921321 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.3927e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001644603 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093130194 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027048995 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001900481 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.3305e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.8218e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.5298e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.132860058 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.516857672 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.001653526 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.8531e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 6.7351e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001268936 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053125419 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000134893 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.9883e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.020824634 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.3351e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.5793e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.105932279 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.1105e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 3.386e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000136133 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5009e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001413901 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.0007462 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000673687 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.184523709 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 3.5638e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 7.6786e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.722184957 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.7974e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001520481 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.1591e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.3255e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.5911e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.004889842 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001073432 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.728049618 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001561255 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.272e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007555217 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.6182e-5 seconds)
  done (took 24.850880163 seconds)
done (took 43.492433227 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.091727969 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.058561686 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.028099969 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.049565485 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.038250511 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.149334029 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10064155 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.036604315 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020080715 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033051296 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.044779607 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037288874 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020994658 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.054721402 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041535514 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.029188985 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032789596 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031409691 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.0214783 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026248864 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.027010013 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023253549 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020205203 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020582751 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032484496 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023178503 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027538301 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020589027 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026935866 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027824625 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.031142809 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031712013 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019990995 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041307516 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.052479265 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020610373 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027591903 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.1349e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03371224 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.070749974 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.1251e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037399822 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019808667 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.101691153 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072019079 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021349406 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.0762142 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057463235 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039797725 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028681134 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039052774 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.040104634 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026583067 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026596053 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025638578 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030226334 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024634877 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.030638442 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.021277473 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.050343691 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.021243175 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.058746929 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.037382569 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026063805 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.1296e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020770184 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.03926806 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028974966 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.02607195 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027474664 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027998279 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020096292 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026631932 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.03185524 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042021682 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030838363 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054689079 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.0261427 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033416822 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027012996 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.027311092 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039855728 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.044090483 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032906816 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.059647732 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021347498 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033585514 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029865295 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.8956e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.037507464 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.4365e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.059109593 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.035137778 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029765063 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032542229 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030036286 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.030052601 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038065126 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019754948 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037028538 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.02098195 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.03231223 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.02706391 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035412222 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.3154e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029728041 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.025021912 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.0365e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.2823e-5 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.050608079 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027288579 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.035076041 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031662612 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021506408 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.028602134 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020619929 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036560478 seconds)
  done (took 5.06348504 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.034841262 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.055387 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.133507685 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023338519 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.093703 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.066155091 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.043988737 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.104059385 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.041032342 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.164129766 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.041488554 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.144198448 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148771884 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.042582497 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026720823 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042686896 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021907523 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.091921096 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027925844 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.024233668 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028957246 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.042196309 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02275944 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023362541 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021697583 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022690094 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.04420193 seconds)
  done (took 2.69730646 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.035921439 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.03469519 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027574137 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.041079293 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.024412898 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033960705 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025896673 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031133317 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.03652119 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023639028 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036346126 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021715044 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018888617 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.061501783 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026459624 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026367546 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027336766 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018802977 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022508962 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021228282 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.027693521 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.027788877 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.053534513 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.024943784 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.2867e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020865559 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.035841607 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033253744 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.020952569 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.4228e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020828871 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018955128 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021500461 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028134305 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020567201 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023599684 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.020388572 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.0082e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018600348 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.020491311 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.02185177 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.037290958 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020173984 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.027840393 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.03484951 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.6067e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.034465697 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033477937 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024468719 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042729193 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030708302 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02099182 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 6.2156e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.8857e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023936031 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020839012 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.4749e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.033559844 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024628782 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020189479 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.5096e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038150879 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021530046 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.03927625 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.033696245 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022441925 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 5.0158e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000147903 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027485244 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.9085e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.3257e-5 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.5085e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.038734964 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.027012941 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.039652744 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024093369 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024908826 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027195284 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.8297e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035701957 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.02889542 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.8601e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020815413 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.9619e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 3.1207e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027728903 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024498886 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.033330022 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.0468e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.7351e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.041356707 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.3563e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025441539 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.6093e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022067628 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.5469e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.3674e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037977435 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.5002e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.4791e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.403e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.039222785 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.0681e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 3.3569e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.3782e-5 seconds)
  done (took 3.318860611 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.035311292 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.033411036 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.058146407 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037836567 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048719272 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037924368 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021367802 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032378857 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022003761 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.025438527 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021757635 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021741773 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.044383489 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.039062748 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045172623 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.0352723 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032422298 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.050701827 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021911737 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.04404427 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.046973924 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033570153 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.039803409 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.037166501 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031358198 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.048596273 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037645744 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.041038558 seconds)
  done (took 2.15498977 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028791028 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028672869 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.02462281 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028720262 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.03025586 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.031460221 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031728713 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021835805 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026872791 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022379565 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030128776 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028762772 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026613499 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023814438 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032573726 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026777216 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030053954 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022749595 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026526432 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028101702 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023061604 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027832879 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030472838 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029667645 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030165171 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026432156 seconds)
  done (took 1.846053394 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024843332 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.028752418 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031434282 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032422797 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.038444352 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066738539 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.039396198 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.033091608 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020849795 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.031040939 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005907916 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.022039256 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.035635983 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024848965 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022340826 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.00495792 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.021219308 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012185849 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027679664 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021551047 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022551746 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011926485 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005500252 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013056502 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.0123788 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.9876e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.029538887 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.027041469 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.027082049 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008991035 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003346999 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011953133 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.022117794 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011681702 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005546003 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.010106683 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.7829e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003535508 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.01137156 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.00839073 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008475167 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.9629e-5 seconds)
  done (took 1.924802156 seconds)
done (took 18.106897844 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.061112672 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.174303662 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.048004693 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.058018496 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.073896686 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.074665957 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.032109861 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.059520883 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.042178938 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.082397736 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.047570496 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.112126133 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.04262096 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.071326272 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.889e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.056546881 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 7.579e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.075653229 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.028624749 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.082762022 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.029491182 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 4.0815e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.080586807 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.096437213 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.066806214 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.048695261 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.030353676 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.070490592 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.0691928 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.089310931 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.050684874 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 3.0001e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.063963226 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.069126979 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.067780713 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040953778 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.079792488 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.5937e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.071283827 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.054847542 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.05421161 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.075288355 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.045115749 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.088917518 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.078710511 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.061257717 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 3.2629e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.093623583 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.061758928 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 3.4234e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.065403183 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.049582725 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.066545891 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.059421843 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.058597371 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.082413891 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.060239075 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.1686e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.089763121 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.032632283 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.075332984 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032706875 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 5.1788e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.049072415 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.061490876 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.032989012 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.047967695 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.8282e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.077608772 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 4.1191e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.4753e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.087194497 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.7383e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.04535725 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.064306934 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.048098745 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.090751843 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 3.3412e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 3.0313e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.059431672 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.064879646 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.068061808 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.041313837 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 5.1141e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.6541e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.073047467 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.8558e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.05539405 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 4.0298e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 3.0287e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.044500858 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.057914437 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.058202854 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.068007204 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.062427401 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.068229094 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 3.4613e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.032745081 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.051666305 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.067388214 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.074982936 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.0741151 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 4.0775e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.060992868 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.8182e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.065865845 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.070534961 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 4.3363e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.070117532 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.7937e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.7679e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.9229e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032701523 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 4.0596e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.9503e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.067202281 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.065523649 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.051967465 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.058060189 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 3.1129e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.029189468 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.5614e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.030786904 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.059539096 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.6746e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.07099324 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.034642962 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.6892e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 5.3202e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.2469e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.06727429 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 3.1564e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.070690017 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.03280419 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 3.1415e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.064084781 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.069429718 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.054843332 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.063061742 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.8977e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.079459345 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.078431817 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.051605913 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.070644001 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.6517e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.5078e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.033027937 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.068978765 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.057661434 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 3.6025e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.0581e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.1629e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.2695e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.063145172 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.9714e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.05314404 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.8583e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.0432e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.8269e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.070595254 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 4.2656e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.95e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.1077e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.7158e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.06813769 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 4.0286e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.1103e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.052400638 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.5703e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.038195499 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.00010523 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.6546e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7852e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.059004959 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.052064051 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.062883255 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.076418147 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.6499e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.058734154 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.063734842 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.7473e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.0816e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.0988e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.2617e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.5643e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.2015e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.568e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.8743e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.5315e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.1628e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.052756104 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.3594e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.0808e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.2978e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.052040253 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.041846853 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.7404e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.2741e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.030051875 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.058103241 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.6924e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 3.0787e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.038676608 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 3.6595e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.065214594 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.5392e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.4766e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.041055586 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 3.2053e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.9346e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.029513733 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 3.466e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.6862e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.036570231 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.3914e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.033576032 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.060906931 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028871631 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.7749e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.6279e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.912e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.040492022 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.5172e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.1384e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.067604527 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.7671e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 3.0351e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.070204685 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.94e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.0522e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.060289188 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 3.5355e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.7815e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.337e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032889311 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 4.2029e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.057142708 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.5007e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.3645e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.9266e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.5898e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035927308 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 4.5876e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.0194e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.06004149 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 4.1221e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.025463404 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.072598445 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 3.6848e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.2999e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.0726e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.3448e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.9696e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.0349e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.063928656 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.5942e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.3994e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.7694e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.045870369 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 4.0868e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.4531e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 6.195e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.4551e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.6107e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 3.9379e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.1527e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.2809e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.8738e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.7676e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.4775e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.029049344 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.066357553 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.8052e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 3.1631e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.040772803 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.7686e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.2006e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.8531e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033477841 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.025262859 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 5.1538e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.5191e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.051546184 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.7604e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.9195e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.3789e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036836275 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 4.2352e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.0997e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.1749e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.4177e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.6696e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.1375e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.0329e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.074653967 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.032094083 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.038025611 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.048947985 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.592e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.0459e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.072500574 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.79e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 4.2518e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.3443e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.9302e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.9382e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.9845e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.9753e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.055885394 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.7974e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.4177e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.0079e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.4139e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.3233e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.7557e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.9534e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.080094213 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.064684426 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.6232e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.04637434 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 3.1207e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.2622e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 3.2875e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.644e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.8479e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.7109e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.9975e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033594994 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 6.3571e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.7576e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.2074e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.1877e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.4442e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.4944e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.6697e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.4514e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.049394338 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 4.4252e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.4322e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.058001286 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.5398e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.064425941 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 3.2518e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.4231e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.2765e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.01e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.059437412 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 3.0316e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 3.2014e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.3915e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.521e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.7365e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.2728e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.0122e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.4616e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.1364e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.1045e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.6363e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.01118147 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 3.3482e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.8388e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.3477e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.8804e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.3614e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.4217e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.0368e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.0347e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.1221e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 3.1879e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.7013e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.611e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.7886e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.8451e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 4.1543e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.2433e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.0412e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6241e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.1035e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.7672e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.2354e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011679818 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 4.1345e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.4225e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.0812e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 7.3374e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.9325e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.1762e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.191e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.4053e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.7395e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5609e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.6113e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.8942e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.681e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.9874e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.8433e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.4769e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.9188e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7614e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.4233e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.5849e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.2651e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.086121898 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.5801e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.0643e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.7276e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.6019e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.3605e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.1733e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.4515e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.299e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.032734824 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 4.5833e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.9142e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.8977e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.2217e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.6626e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.9712e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.8154e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.6776e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.5139e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.9467e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.9727e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.030659481 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.032527711 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.7324e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.8201e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.058976976 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 4.0813e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.88e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.9563e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.5603e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.2468e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.1312e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.0776e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.6405e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.86e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.5482e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.9028e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.1968e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.9302e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.198e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.2209e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.4663e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.6196e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5555e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.1796e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.7011e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.5711e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.2106e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.7729e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.3581e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.0004e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.9729e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.4361e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.0153e-5 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.6525e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.7761e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.1177e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.068536582 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 3.185e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 3.9076e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.3952e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.4643e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.0134e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.086704317 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.076110585 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.924e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.9011e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.1442e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.5609e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.9629e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.2662e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.2967e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.8879e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.8495e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.4003e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.53e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6117e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.9853e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.5223e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.4264e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.3534e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.065693687 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 3.1983e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.2268e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.862e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.2656e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.7248e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.2288e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.0101e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.6799e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.5345e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.2207e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.060841415 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 3.057e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.060732756 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.4239e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 4.3283e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.2473e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.0533e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.6849e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.6802e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.030648603 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 4.0719e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.2929e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.2432e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.5623e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.2027e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.8545e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.5463e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.8282e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.0515e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.5891e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.7417e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3959e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.1272e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.1612e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.072e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.9138e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.3005e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.8405e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.1169e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.2558e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.5039e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.5968e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.7596e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 4.4701e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058341784 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.1984e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.7963e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.028788051 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 4.4348e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.6882e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.2759e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.4325e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.9137e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.5148e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.1096e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.4034e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.5194e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.1376e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.2126e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.6284e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.7946e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.6419e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.0109e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.4336e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.9289e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.4828e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.0475e-5 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011229595 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.032319227 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.9905e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.5652e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.7447e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.9805e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 3.032e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.0377e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.0923e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.05804016 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.2888e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.040357708 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.8685e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.8506e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 3.2475e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.48e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.9303e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.9133e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.7561e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.5896e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.2186e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.3626e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.8511e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.2996e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.5225e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5851e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.9111e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.9641e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.9289e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.5787e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.7037e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.7002e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.0742e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.2219e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.0889e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.6343e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.3085e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5156e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.905e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.5961e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011504868 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 4.3688e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.7012e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.6019e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3192e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.7375e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.3136e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.786e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.8036e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.9613e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4435e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.1444e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.4787e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.3728e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.1617e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.7055e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.5032e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.9119e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.8679e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3075e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.0895e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.9814e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.5717e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.7952e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.7981e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.3386e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.2609e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.1406e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.8489e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.6108e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3713e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.7805e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.0254e-5 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8962e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.961e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.9278e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.0221e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.7334e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.5809e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.4673e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7697e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.8658e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.2291e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.6069e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.6796e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.2429e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.711e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.7119e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.4599e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.8689e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.6358e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.0708e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.6849e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1675e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.3784e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 6.0605e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.6363e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.2452e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.8627e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.6086e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6267e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.0525e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.5314e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.9147e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.5448e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.4535e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.3833e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.7595e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4181e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.3412e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.5424e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.5465e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5772e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1834e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.6362e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 5.0802e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.2206e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.6166e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2102e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.4693e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.5508e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.6306e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.2078e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.7786e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.1919e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.3997e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.625e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.8771e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.7283e-5 seconds)
done (took 11.913206427 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.472092457 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.257368319 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.388062033 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.17934286 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.295974596 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 1.059803237 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.702914296 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.408628064 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.445953146 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.113151465 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.640564232 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.084700235 seconds)
  done (took 40.186214146 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.033849887 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.416928275 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.376962253 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.116002756 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.301478958 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.703202156 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.209565458 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.5903466 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.261494324 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.111860774 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.623605577 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.084770122 seconds)
  done (took 23.516994017 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.766554558 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.092009464 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.150847272 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.127540754 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.141740337 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.148002938 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.979747894 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.060369993 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.40716798 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.043215474 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.407058576 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.048594606 seconds)
  done (took 10.415832898 seconds)
done (took 75.288252981 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028315696 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030893305 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.12302529 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.081382709 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065661016 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.040151311 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.041007812 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.038017681 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.120416486 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.149890461 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 7.1302e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048929299 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.03228084 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.124415401 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033480434 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032837139 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.027041582 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.034641753 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.062776434 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.043646235 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.039703965 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.241705352 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.031153377 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030917183 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.025185137 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038455036 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033714818 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.11399296 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.176161974 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.039542596 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.030411939 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.000106131 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.031410098 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.09581182 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.058955211 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030806075 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.031865539 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.218512075 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.182077955 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.03267314 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038754461 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.100660456 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.038653556 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.200257858 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.030808293 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.164476911 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.124356503 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.03141476 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.031098737 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.047135578 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025604148 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.03108899 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.115240253 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.11882149 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 4.0595e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.9328e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.199962468 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000236423 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.0545e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.03671143 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068344831 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031369271 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021086558 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.027662073 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.035993055 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.042700531 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.030609572 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.030668937 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.185272007 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.094801694 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.11760226 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037508411 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030515138 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.05395898 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.038371457 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070593038 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035398666 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000132608 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.031262418 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046843192 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027985568 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.094588755 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.111722895 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.000104081 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.030188373 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.035841956 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028628684 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.137681505 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.000102379 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.029331211 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.4269e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028781517 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.143081989 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.030284493 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.029305758 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.028377583 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.030187217 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000269156 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.9828e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.146714182 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.197596366 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.09130765 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032508436 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030877567 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033419089 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.160516767 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030593583 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.078251605 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 9.715e-5 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027525776 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.032854045 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001805961 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.030630841 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 9.4859e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031412933 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028784454 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.115104633 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030454707 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.037670572 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030604049 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.147191738 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.095724784 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032205827 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.040286384 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.029621057 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.168609078 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.029240375 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039248752 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.096207634 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020256421 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000118149 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.029057273 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.02976461 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031744015 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.039378529 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.02936736 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029884852 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027571088 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.088325815 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.115551338 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001201954 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.091579002 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049289506 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029971975 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.110017059 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.03317122 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.055106084 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028700959 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.091250878 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.3644e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.226372673 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027283752 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.030050924 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 6.2898e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.168678505 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.178385266 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037107028 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.000102178 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 7.4273e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002528773 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.249957769 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000141979 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031982882 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045459606 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029839632 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.15043781 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.136964975 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.090598561 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002979758 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027741402 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.034327921 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000897475 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.1955e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.049469232 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.236764554 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001202088 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030181198 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.146524515 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.036894849 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 8.6373e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.090680945 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029222526 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033917076 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027426785 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.162001973 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029686021 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.136314163 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032349644 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032317188 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.03014492 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.112145931 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000114503 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028521829 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.179323199 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.02706121 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000111141 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024827267 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.03148671 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 7.2485e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.090671095 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.03036044 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.037792046 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.098161652 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034437187 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000165907 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030101652 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000131912 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.025651108 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02857643 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.020380281 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.037708454 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.000101462 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.086964911 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.030036012 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110882686 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.271013065 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.153318293 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.6089e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.4544e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030329017 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.289963574 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 7.3084e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030435407 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032278003 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033815006 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000120897 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.4732e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031432236 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001796887 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.03494007 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 8.4622e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.030306368 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.000116326 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.111998882 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 7.3245e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.5402e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037304194 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.034829711 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.042925962 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.08966908 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.091881883 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.5641e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.026398414 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001135493 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 6.1145e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.034660076 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027928838 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.0716e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.035574227 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037909554 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.9587e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.142619782 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 8.3426e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031799429 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042691734 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.0372e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.8842e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.029012769 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024971492 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066256674 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046166152 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.7768e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 9.2604e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.4063e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031486414 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030189222 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.6493e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.9099e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.8158e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033716096 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.000138052 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002890026 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.089797912 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.030200791 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029690491 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.034594254 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002367763 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.109442752 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.1088e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.02943699 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.063524579 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 9.0121e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.1901e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033723311 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027618135 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.026038955 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.036239689 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.24930425 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.111116618 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 4.0905e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.6287e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.02971034 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.033651941 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028470366 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03192679 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.000111672 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.892755847 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.037552741 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.177167727 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001908706 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.04505719 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001786541 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.173091026 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 8.1564e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036524368 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 4.7802e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029970743 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028896066 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028885913 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035922118 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.036713308 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 7.0307e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026797893 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02639805 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 4.6742e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.8494e-5 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.8248e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.03358109 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002720819 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.717e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000133039 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.033266389 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.035898174 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.216320949 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034158316 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.057384544 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044240189 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 9.7673e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.000989395 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.3906e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031477781 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.2821e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 6.7644e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.3777e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 9.2189e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.095172083 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.6871e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001706232 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.1794e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.9346e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.7249e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.9038e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.6393e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.00079659 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033637875 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.8018e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034022004 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000143696 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.070006954 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.224128176 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.038127884 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044503385 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029749346 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045922065 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000110869 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001093197 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.135588131 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.00010041 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.997604176 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.032828501 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.5296e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 7.1767e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.4691e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.1475e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029712583 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.84e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028922367 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.7612e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000159664 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.117038843 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025976407 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.034175491 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001827731 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.028381572 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.02965844 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.6686e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000815499 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.7016e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037704908 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043273637 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001929383 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.1728e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.00311007 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.02743865 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033350939 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000125005 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.00010087 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.7132e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 7.1773e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.1679e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.8306e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031489626 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.792e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001828529 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028650437 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 7.924e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 4.4247e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 7.2909e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031549403 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.6668e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066209596 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.1349e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 6.5977e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031324596 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.033443141 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000126075 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.6288e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.2271e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 4.7347e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.025927147 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000976718 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.6593e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.3118e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000123913 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.912e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073493097 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.032305095 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 8.0252e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.028862867 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 7.1834e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.481733722 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.3898e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 4.3161e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.938e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001885085 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.0246e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031568408 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.1505e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043550238 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.7654e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.039304644 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.312153681 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033910104 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035867155 seconds)
  done (took 23.098997442 seconds)
done (took 25.413934386 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.806333609 seconds)
  done (took 10.111681596 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.320743703 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.36441166 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.341944123 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.319290267 seconds)
  done (took 31.657906095 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.543371454 seconds)
  done (took 9.851543806 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 8.101233848 seconds)
  done (took 10.416484146 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.703643024 seconds)
  done (took 10.016205569 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.3739403 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.340346301 seconds)
  done (took 17.024795019 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.771840083 seconds)
  done (took 12.083289916 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.627517901 seconds)
  done (took 9.935967277 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.318743833 seconds)
  done (took 9.630352062 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.316437128 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.311446622 seconds)
  done (took 16.939584159 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.332469616 seconds)
  done (took 9.643661371 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.310697884 seconds)
  done (took 9.622177287 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.452953652 seconds)
  done (took 9.763200122 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.764407914 seconds)
  done (took 10.070047449 seconds)
done (took 179.164780449 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.318194356 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314293713 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.559741397 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.871068309 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.837338711 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.443405255 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.316419728 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.310438444 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.344183659 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.322712286 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.31359684 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.316881888 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.319114961 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.315739186 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.310855982 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.321360586 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.317450104 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.313495544 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.319996114 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.315121386 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.583552933 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.321709127 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.323725386 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.31711919 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.322722015 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.324004183 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.32565393 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.316609616 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.322661514 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.322117471 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.327031474 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.319272058 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.32391566 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.326630046 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.325113309 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.319493131 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.326305551 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.322797727 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.320208073 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.328078338 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.334550646 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.319567748 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.851670198 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.589763373 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.335941507 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.332435977 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.331190219 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.327776731 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.353729782 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.327595639 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.331812378 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34190917 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.330433982 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 3.06603469 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.331797319 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.332895897 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.32899556 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.342569469 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.330069583 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.331970059 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.334100065 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.331541919 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.334514862 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.6099623 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.329529469 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.336848093 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.344725958 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.332837255 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.342682397 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.333003073 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.33806208 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.336892345 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.343433286 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.341274921 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.177868758 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.383347488 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.335655927 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.331670124 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.340679534 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.336413301 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.335742983 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.340282833 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.339208893 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.371270697 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.33908659 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.342025994 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.340230234 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.334716501 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.368191881 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.34027612 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.333018208 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.341164618 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.33445399 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.337873857 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.737973821 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.472849251 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.338104101 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.347813085 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.333184991 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.541814182 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.331978694 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.34087617 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.344486375 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.342508899 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352250622 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.676880372 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.338570417 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.347669542 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.363861255 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.355816211 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.779273641 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.5609985 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.334573743 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.333785597 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.785719895 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.346418579 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.351649508 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.336535688 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.337242059 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.33464158 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.337336041 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.347229416 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352665557 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.853444894 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.356354209 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.33743448 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.344584195 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.420253935 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.344401448 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.347889618 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.346092625 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349527578 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.934799181 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.336366938 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.337281193 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.34705651 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.346177109 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.172587771 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.364116461 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.336343665 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.476763656 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.342533977 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.369071501 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.347181659 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.34773907 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.341129232 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.33515013 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.342594855 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.338070432 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.43535765 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.339559738 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.473251645 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.030426828 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346057638 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346440555 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.345772462 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.369400306 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.342515619 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.339619875 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.516492732 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.337117 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.345618072 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.340537601 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.345802903 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.346083196 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.334104173 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.334671387 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.346051116 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.343092957 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.471403659 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.340066081 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.341318173 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.340482999 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.726217079 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.342139226 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.733972998 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.348246478 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.344545378 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.340468736 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.338383331 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.341193444 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.474503889 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.345780757 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.339661546 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.338224472 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.512222076 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.343755781 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.359147289 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.343039845 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350153637 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.737690353 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.352287633 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.342737252 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352153 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.339860087 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.345350017 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.347843032 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.605294668 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.355145902 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.342771516 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.241126529 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34546796 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.344737512 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.371817034 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.511826063 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.344802765 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.343748997 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.339265935 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.355314371 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.344081351 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.344849375 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.346375647 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.348506949 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.871227174 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.342233068 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.340941969 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.345837072 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.454411837 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.457028525 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.34698258 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.341016729 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.345411093 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.340792276 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.347150556 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.342507434 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.491878049 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.340679673 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.347811494 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.343718718 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.352111247 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.340764437 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.345704928 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.344469819 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.343279233 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351621686 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.343161238 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.340789245 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.340632174 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.347387374 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.341474884 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.361116801 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.342366222 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.601166108 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.343781245 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.341159418 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.349711037 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.349169325 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350418624 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.359498933 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.809921125 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.824468762 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.389237424 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.344869666 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.753229488 seconds)
    (255/608) benchmarking "3d"...
    done (took 3.900651227 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.343508591 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.342991177 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.344751722 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.343932625 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.292113971 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350766434 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.347408032 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.821784696 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.353999026 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.354894837 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.077095417 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.465288492 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.351489789 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.343963031 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.627773148 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.346128553 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.698745505 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.339531355 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.55256355 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.348506875 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.471129883 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.370565951 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.348739025 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.356186719 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.340226581 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.892007421 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.346702579 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351154152 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.347220585 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.355174077 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.348316936 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350304536 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350166453 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.278910511 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.65103281 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349542962 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.358734214 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.446644471 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.455415701 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.347665256 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.347933513 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.754762736 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.339647885 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349813722 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.350202482 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.447027339 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.353464237 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.495200644 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.80117967 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.348407395 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.3451486 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.352588318 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.345641777 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.345244852 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.345319075 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.341137873 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351465769 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.35077605 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.345777347 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.339450173 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.45125703 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350553775 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.002131707 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.345827268 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347741861 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346651009 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.356850206 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347573852 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.346027474 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.346892119 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.360762674 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.351081219 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.928954933 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.359247281 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.344056911 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.354972051 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348259947 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.348440779 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.507324457 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.598624832 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.617565991 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349604457 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.356867367 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.353915148 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.196963768 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.774826209 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351737894 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.271421922 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.348792243 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.603728138 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.386077117 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.693192273 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.349352839 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353433867 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353213146 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.359869008 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.357558451 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349430388 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.4971813 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.354989687 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.351553882 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.360531514 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.351552023 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.34527257 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.661594406 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.374039795 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.358296581 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.349857022 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.261790318 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.364855557 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.692275056 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.466238571 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352908743 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.343848715 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34860169 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.575174288 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.348592393 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.3565403 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.678103369 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.351967847 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.363369118 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351075784 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.343208476 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.361150904 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351300069 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353303388 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.3508905 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352177916 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.362421161 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34770202 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.344427509 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351063434 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.350309429 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.352311195 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.347295316 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.358673858 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.351248099 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.352087847 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352123194 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.345019392 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.351440536 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351334859 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.705688583 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.696220985 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.359035668 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.35198637 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.689466183 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.348968389 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.354983153 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.360802263 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348934391 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348377004 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.354231592 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347643896 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.34657215 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.603355246 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.353335559 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.269628486 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.951356952 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.35290952 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.474020282 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.896561905 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350471683 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.355239631 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.727346221 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.645671188 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352853656 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.3540318 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351393531 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.36015739 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347219141 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.376075631 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348539707 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.706489148 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.34816555 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349866749 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.35103444 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.349661057 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.345647266 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.629296328 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347547874 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.356833847 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.347114991 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.347236628 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.477535011 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.858477829 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.399438402 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.481536808 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.45977281 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352363751 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.359235173 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.358518425 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.381939724 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.361872276 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.346466369 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.34818498 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34571887 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.34813953 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351547171 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347541251 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.37762808 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.345688056 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.346504432 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.350494236 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.348700324 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.356094004 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.347779445 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.858453229 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.824081731 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389240543 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.485881567 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.354022176 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.355611936 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.351786588 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351886198 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.350917545 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350424781 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.362201575 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.348848046 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.348486099 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353001827 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.352111899 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.35312742 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.356856071 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.353046531 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.354013483 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.365518374 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.350963911 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.351031173 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.349621178 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.352992971 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.362294171 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352431622 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.354493443 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.352755229 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.356440036 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353642933 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.350163771 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.35134643 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.994690032 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.359953374 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.081671745 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.352273454 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348291631 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.271208109 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352131381 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.348752455 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.35839864 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.354606711 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.354455705 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.358401758 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.52366369 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.350934149 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.3493045 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.360852922 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.363975019 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.360701166 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.460235346 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.394454613 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353719355 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.861707394 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.364554258 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.351271691 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.369109526 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.369409125 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.354177002 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352627047 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.35104821 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353384243 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352700962 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.35403327 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.35498134 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352909132 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.356854604 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.975574676 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.411134227 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.301479533 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.079813249 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.358974646 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.467942309 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.358075026 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.933906023 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.360007776 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350982959 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.351216582 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.696937272 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.363961666 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.99648578 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.533908301 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.455627535 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.588585283 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353125085 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.352408764 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.351769975 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352499585 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.422349531 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.352287024 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.916927323 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.614752562 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.521618423 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.460599841 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.349311845 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.654130981 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352901063 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.363558927 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.266622666 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.366835454 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.355280201 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.35906442 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.121528837 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.813068053 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.394410421 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.365885867 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.357001674 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.364621528 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.358703326 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351497711 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.347326771 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.358206144 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348541778 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350679366 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.351928097 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.461432411 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.356504626 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.352973021 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353600332 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.345917818 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352995041 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.348623053 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.637001069 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.931412189 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.357113836 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353020001 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.348856108 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.367304262 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.179689225 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349049669 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.358712409 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.346767465 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.355264063 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.348886284 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.353654738 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.353703902 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.363343137 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.344489095 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.354315563 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.999542708 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346955622 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.355507318 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.729113648 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.817697823 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.362685314 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.353514769 seconds)
  done (took 3977.99185181 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.576109043 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.428308487 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.264004516 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.327269931 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.760511627 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.912190047 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.278491272 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.784742493 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.170491366 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.216286193 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.232640851 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.258909016 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.086250346 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.159849882 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.22330466 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.525268882 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.22724255 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.470344715 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.453552416 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.876394267 seconds)
  done (took 63.580201388 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.364665431 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.528660449 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.374238396 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.365126523 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.348180183 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.359084286 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.354908752 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.394777271 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.856718934 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.098099444 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.271769568 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.373968409 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.204217188 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.353331439 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.780075387 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.351878709 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.328253132 seconds)
  done (took 95.055276181 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.397279701 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.578085465 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.389993498 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.397884867 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.370909319 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.459873858 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.722338926 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.491553998 seconds)
  done (took 62.153349069 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.802422327 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 2.871220959 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.347245754 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.047827099 seconds)
  done (took 14.414733097 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.357061159 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.483615709 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.351962089 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.67746524 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.355360333 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.489621166 seconds)
  done (took 34.06563633 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.237675163 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.513601138 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.510780156 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.357007205 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.352773378 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.193640197 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.543459841 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 2.95753514 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 2.971228471 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.369806467 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.498004623 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.484443651 seconds)
  done (took 55.333368272 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.709140744 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.769871815 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.570959313 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.552511255 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.764850373 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.812926811 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.446910308 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.558776769 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.353802855 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.38831435 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.568388961 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.40931922 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.601007469 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.418522611 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.604154132 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.67124464 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.765824625 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.38403875 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.586323129 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.754595061 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.577586473 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.579684314 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.670194742 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.98090836 seconds)
  done (took 69.849802452 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.586120455 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.561772095 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.579303195 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.59029052 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.585737847 seconds)
  done (took 15.253952797 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.406343622 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.451533593 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.476173004 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.470631328 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.354122013 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.35798707 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.35283316 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.932094277 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.892161535 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.847402232 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.936817656 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.404535387 seconds)
  done (took 106.223046535 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.359350136 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.352752873 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.351439698 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.357275402 seconds)
  done (took 31.773313012 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.407507694 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.433349562 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.738453123 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.540123002 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.415154602 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.595326922 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.578975377 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.637392913 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.455931508 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.47636956 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.435920467 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.903398173 seconds)
  done (took 35.9625826 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.711456917 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.678641592 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.715782651 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.709282922 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.672614274 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.655032521 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.657894853 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.721764882 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.7164722 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.710429625 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.589790741 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.665600462 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.708361575 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.036068002 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.720858212 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.596362781 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.712649876 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.708685271 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.033694094 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.71435545 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.585558651 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.666758661 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.714931859 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.58782745 seconds)
  done (took 67.335872407 seconds)
done (took 4631.30872471 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.971297596 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.137541078 seconds)
  done (took 8.451565418 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.721394897 seconds)
  (3/15) benchmarking "20517"...
  done (took 2.90660221 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.187995862 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.21245836 seconds)
  done (took 8.746208523 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.412111139 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.967245946 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.000144666 seconds)
  done (took 10.723910406 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.527218674 seconds)
  done (took 4.869275943 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.856272158 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.696036919 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.538647356 seconds)
  done (took 10.434759392 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.379672905 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.106989603 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.493487579 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.636066133 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.830619667 seconds)
  done (took 15.416942885 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.351118104 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.346995595 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.422004881 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.755579714 seconds)
  done (took 24.22016525 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.361141164 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.368244141 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.356953499 seconds)
  done (took 24.438873807 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.585261937 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.381309141 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.386764076 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.388455397 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.392745295 seconds)
  done (took 11.895412432 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.842258322 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.7949673 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.813838676 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.869021556 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.205712423 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.591868647 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.813551779 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.722018007 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.514698254 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.671779612 seconds)
  done (took 30.186378953 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.896530472 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.744228472 seconds)
  done (took 7.987737495 seconds)
done (took 175.317525989 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.360092853 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.382496766 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.365068955 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.371438897 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.367900112 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.360069689 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.363557363 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.367560237 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.371110122 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.36742814 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.364623348 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.369258197 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.504231158 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.36415897 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.374843025 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.368688208 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.372706052 seconds)
  done (took 42.747240076 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.386852049 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.786150182 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.18334657 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.642156901 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.203784676 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.389897769 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.561856808 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.081017543 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.171804661 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.166655962 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.10627931 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 4.982199397 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.359573361 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.96184467 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.303222437 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.076355865 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.305443137 seconds)
  done (took 83.019828985 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.355992989 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.35708569 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.356030848 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.356237763 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.356729446 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.359334977 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.354801666 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.35421739 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.35681366 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.355398884 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.357731256 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.362528901 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.381412652 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.358269877 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.3633747 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.357520946 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.363673107 seconds)
  done (took 42.453843379 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.356983538 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.403360329 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.367010674 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.392592293 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.38201916 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.357131301 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.360670217 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.370168951 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.388415418 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.367957442 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.366959848 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.380188044 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.244544616 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.376778603 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.377831858 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.380683589 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.379653326 seconds)
  done (took 43.599204962 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.356494945 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.354236813 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.965465538 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.395420542 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.377502901 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.351413267 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.751821843 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.356939783 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.752078068 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.523029717 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.5591659 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.850771399 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.779044305 seconds)
  done (took 83.720493204 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.3581648 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.349965007 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.358275116 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.352057466 seconds)
  done (took 31.767914175 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.350194602 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.351455653 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.357402551 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.355895492 seconds)
  done (took 31.758459243 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.384744777 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.379797697 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.389648733 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.372069164 seconds)
  done (took 11.881152714 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.596741069 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.107965663 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.078338857 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.070325087 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.90507202 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.304381717 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.063740368 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.512458027 seconds)
  done (took 27.982997256 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.357185567 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.701148178 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.533128198 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.675205927 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.56237968 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.366255642 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.381251466 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.580322704 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.738568842 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.591989118 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.576235479 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.58511076 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.353087198 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.510159993 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.548179338 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.536898085 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.603400832 seconds)
  done (took 50.547041626 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.359521371 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.361261812 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.362364591 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.359160165 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.359124824 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.357368252 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.357279682 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.362826634 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.361715338 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.358677118 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.360334222 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.35952906 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.44439831 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.358919449 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.36941745 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.360477824 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.369788845 seconds)
  done (took 42.575638831 seconds)
done (took 494.416547921 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.349274488 seconds)
done (took 9.703615545 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.374199277 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.483031646 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.352639841 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.704705102 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.35440145 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.37242038 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.362841993 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.368701284 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.374201806 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.392014727 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.167217882 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.067770621 seconds)
done (took 74.726353714 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.613230446 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.361153262 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.451983796 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.212075385 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.055829977 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.515961302 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.24227489 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.713376828 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.78520456 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.559660842 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.479587066 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.384728165 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.019252168 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.542226279 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.123146092 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.48307647 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.125930027 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.784232803 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.675305974 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.718188574 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.024423403 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.10260468 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.350783288 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.534145139 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.349538602 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.434311508 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.199621197 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.1670419 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.52986758 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.413098642 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.867324165 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.106030017 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.563890029 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.557452727 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.452853935 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.354339997 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.654431543 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.013823037 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.638611445 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.098710784 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.357372642 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.634756331 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.356859464 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.113485212 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.995931804 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.355180576 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.230577767 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.49309222 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.518068653 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.143754122 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.504851236 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.312688628 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.588561383 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.992323919 seconds)
  done (took 233.208438615 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.49544325 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.626523165 seconds)
  done (took 17.533732356 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.616632196 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.387366019 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.657599607 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.286219669 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.456226142 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.777371561 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.762015581 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 2.981068831 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.793362619 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.511886462 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.898890837 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.583909396 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.969055657 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.867138643 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.875116505 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 2.933414843 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.616734523 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.983288714 seconds)
  done (took 61.308947109 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.802645883 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.948432616 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.352523052 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.788175891 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.359624603 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.347715387 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.350073914 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.070970349 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.618784089 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.763487845 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.831293833 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.353597941 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.350339482 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.901812144 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.865960367 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.144157176 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.381734112 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.352421831 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.356509464 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.351090413 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.766956917 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.357678536 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.65230186 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.374997473 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.546923488 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.357175716 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.919728501 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.788216024 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.357882468 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.608701566 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.36193872 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.352086969 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.344648986 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.361309953 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.336833497 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.861950523 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.353475962 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.604658922 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.363132081 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.069632224 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.352407215 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.349315539 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.71794818 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.360307332 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.78850383 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.361210535 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.181842109 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.883354991 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.36164975 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.112715104 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.698555449 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.368940736 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.87490496 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.934285238 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.527446265 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.577209969 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.908803023 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.363123934 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.904824821 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.812448952 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.359759263 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.351835461 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.849140564 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.357304076 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.810159904 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.788859861 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.296929279 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.363143599 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.863418425 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.360257605 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.739085692 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.362586952 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.488993024 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.940586875 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.376243237 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.266377364 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.342365009 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.310063582 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.057132358 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.355018817 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.355221233 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.083115761 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.86530265 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.354955774 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.35204929 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.721691191 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.782584889 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.383252626 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.319872025 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.365459633 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.348740779 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.204692029 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.35496507 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.361622441 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.178655924 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.845466845 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.293893891 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.360469501 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.846496546 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.364457522 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.349297995 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.75250357 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.210638993 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.364500182 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.577913766 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.217328245 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.658198374 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.837520113 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.354419475 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.843248443 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.887057058 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.35151038 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.627464535 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.949904556 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.901209883 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.326143168 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.364500153 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.355386864 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.350255927 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.828722911 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.36675741 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.352570409 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.355017215 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.8125142 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.356146813 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.873968447 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.886233173 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.134163639 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.351950396 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.354964576 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.369068451 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.991023467 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.286687291 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.36535135 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.355479807 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.835145551 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.361476242 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.838975842 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.363425245 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.357371716 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.426525019 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.028860654 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.71206341 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.366787717 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.350957793 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.35603034 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.837392687 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.587190683 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.522944227 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.355306402 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.5786099 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.618851687 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.816319894 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.356981683 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.575822349 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.034960007 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.352359561 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.72969832 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.793153403 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.635413268 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.36994187 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.727151654 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.36480361 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.639367834 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.842736794 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.352468708 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.354227497 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.767277941 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.750485748 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.542591854 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.109628715 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.909117951 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.136158931 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.921240479 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.360233316 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.352438967 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.04155954 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.367033361 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.352157776 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.348698956 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.080506275 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.826954198 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.353436736 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.773275478 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.320575301 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.831399807 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.360524427 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.873794799 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.669082119 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.375402601 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.355019309 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.364361726 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.711084157 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.827283521 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.358156544 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.357811634 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.842625273 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.067401267 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.887285301 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.356463512 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.116645752 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.354665943 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.351835912 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.844490114 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.354119647 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.358734638 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.527755647 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.880722341 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.354839054 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.35248238 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.89869863 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.031282027 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.617647928 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.839698702 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.307373305 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.354940809 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.858024744 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.359027358 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.350531415 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.896832301 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.728880534 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.361677708 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.856749576 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.353444637 seconds)
  done (took 1124.848641901 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.873319988 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.427409523 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.690027536 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.168899 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.153407647 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.417221853 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.904620755 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.512039948 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.768493722 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.845028487 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.65063689 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.408514427 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.2506414 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.632754056 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.540487359 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.505874442 seconds)
  done (took 87.099722584 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.433277519 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.419605679 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.430265118 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.404175559 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.400770499 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.446383427 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.411092625 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.424673519 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.417417456 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.410176715 seconds)
  done (took 76.546585179 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.830860448 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.509870803 seconds)
  done (took 12.689217704 seconds)
done (took 1615.590501475 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.392121837 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.718463746 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.454046109 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.392631374 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 3.964987242 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.386154074 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.38525172 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.388004816 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.810230871 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.153692793 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.504485123 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.938563681 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 3.03665142 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.447466121 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.385342446 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.38337975 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.836610601 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.207367554 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.346115382 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.401942192 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.388747705 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.38626411 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.387625966 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.389344966 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.855855438 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.065932375 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.760207762 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.400806141 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.679477386 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.461930946 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.393949904 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.383852574 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.383934454 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.382438502 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.113209736 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.2040743 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.425495678 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.385734228 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.39260333 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.219438062 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.39954162 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.389517304 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.384531068 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.388963703 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.385008066 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.382839671 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.321299761 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.851128059 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.430866773 seconds)
  done (took 140.876643098 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.411643584 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.411408048 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.489693384 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.546831322 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.420063153 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.399737638 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.408904396 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.53948504 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.412328167 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.407396078 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.472865908 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.417847474 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.414200761 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.400517032 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.409354657 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.545422499 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.403548437 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.396804658 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.403900661 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.403189939 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.480684708 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.411300743 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.405034147 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.416165477 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.404995124 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.406886429 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.47750097 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.412263018 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.616251121 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.670436224 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.70412793 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.531887875 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.410676971 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.51216292 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.575644532 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.51011735 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.515062552 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.637662319 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.469407899 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.473188883 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.53699178 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.40533696 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.421043429 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.409145034 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.403538778 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.414964943 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.420289418 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.403711659 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.407501533 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.478607154 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.413291468 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.481199539 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.397850543 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.540219188 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.411633993 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.410283636 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.478616019 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.416508235 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.541102441 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.497429633 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.408183967 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.483441161 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.411329525 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.54149461 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.444274084 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.40627492 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.40087281 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.429035598 seconds)
  done (took 169.523846933 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.436305905 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.432803691 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.429105801 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.436412678 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.643667545 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.432349919 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.634187014 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.491010431 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.429679087 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.431550353 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.636764171 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.430190372 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.490202771 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.429977331 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.431210813 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.485931096 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.645270913 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.42860169 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.487088214 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.433466684 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.434782877 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.427002898 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.435796873 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.638740317 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.434721172 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.43721813 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.414538627 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.434815736 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.439432366 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.414193354 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.492613081 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.4337842 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.434099396 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.426368232 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.430480331 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.631790923 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.641155748 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.409684191 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.425332147 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.408865642 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.4947994 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.435184172 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.43256348 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.415473765 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.494637204 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.49106794 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.43273466 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.491828621 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.433187476 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.435029869 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.495051724 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.434610119 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.456605207 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.433610829 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.426800004 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.630577674 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.49047001 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.437882969 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.413730575 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.493765079 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.434553396 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.492208599 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.496521489 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.446072455 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.435589343 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.459781205 seconds)
  done (took 165.329165084 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.363993912 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.363996554 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.380902993 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.376707902 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.361639633 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.375729689 seconds)
  done (took 16.574932159 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.428813327 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.496388837 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.501368523 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.488528281 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.496520987 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.207577633 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.489200841 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.213598166 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.205445708 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.537510378 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.501900131 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.53746241 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.421913784 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.422726513 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.424034283 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.226746039 seconds)
  done (took 44.963379733 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.442718434 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.40427352 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.408741106 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.321432387 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.410812677 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.419906338 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.445610573 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.351898312 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.475605507 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.434683374 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.426140132 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.405003354 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.410632006 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.405342628 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.409416902 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.406746554 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.404842312 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.408960279 seconds)
  done (took 47.743562231 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.497443636 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.408755032 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.543348305 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.59511297 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.433171071 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.497485929 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.410354064 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.581795246 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.594051731 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.583989486 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.534358829 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.544065768 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.41029058 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.534554623 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.473302149 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.410404617 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.478370203 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.474163329 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.411933676 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.474457282 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.40680203 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.434877405 seconds)
  done (took 57.088266321 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.413669851 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.427184403 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.643673821 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.429844189 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.641923177 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.435399393 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.635509457 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.492840331 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.425522074 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.430489824 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.643441029 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.438103513 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.437517193 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.427238985 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.43084867 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.429000124 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.43859396 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.646118687 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.427682723 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.497589668 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.42639844 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.496633627 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.426643121 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.434118397 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.645096295 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.433181034 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.459760569 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.631329929 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.408133454 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.408879335 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.42747815 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.426121651 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.428881968 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.433732545 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.441855963 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.42832745 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.438196212 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.491201328 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.4274683 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.426558228 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.425336232 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.426821008 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.456619772 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.427739696 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.494616351 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.50070046 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.439193636 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.416473094 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.439237901 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.417459121 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.441719235 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.428570539 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.648397381 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.425988307 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.435154728 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.429164604 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.496626128 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.435386717 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.433930185 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.426428089 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.429793014 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.491690067 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.412676942 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.436997739 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.42928929 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.440427569 seconds)
  done (took 164.973734471 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.451330315 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.430874708 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.434002374 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.43232128 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.431152623 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.417575743 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.429538716 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.412797511 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.894964949 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.432332804 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.416660289 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.356828404 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.410769143 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.433258964 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.914490959 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.456319679 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.432184113 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.41899621 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.43859372 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.410405595 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.431059225 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.411259755 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.43144718 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.433964464 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.356157923 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.430001172 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.415417082 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.431100969 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.405529927 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.436376113 seconds)
  done (took 91.990173256 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.407823748 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.457998732 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.463863584 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.465991076 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.459316774 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.40737276 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.405212751 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.460743774 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.409745666 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.460128431 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.463494339 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.407633586 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.463688785 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.409102746 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.444727958 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.445765402 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.404429223 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.420310518 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.409461786 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.403900431 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.415669599 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.406477582 seconds)
  done (took 55.847322245 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.400825343 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.506386726 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.504009205 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.294704683 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.504545479 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.572371082 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.408550806 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.492967446 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.294027197 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.492085991 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.478884672 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.411150858 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.404321898 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.474823266 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.475028025 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.495558484 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.575624232 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.47521929 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.502229321 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.474330209 seconds)
  done (took 55.592431257 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.445574856 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.476643927 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.474936742 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.459934912 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.461585951 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.804350426 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.4131162 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.476586689 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.414968352 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.460458527 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.966203459 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.473584734 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.450435456 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.449023746 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.807139401 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.461804422 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.445645133 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.430204843 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.412640547 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.428972391 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.966088922 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.444704426 seconds)
  done (took 57.979884643 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.416990485 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.418425564 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.417043389 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.61909096 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.422684864 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.416981399 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.422191279 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.42146127 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.4141055 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.418945758 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.46973748 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.457325817 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.447643116 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.437659229 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.419189542 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.616176788 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.434621609 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.413507092 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.445027212 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.422295437 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.421007403 seconds)
  done (took 53.726396964 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.390649431 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.389008772 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.439749087 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.404803189 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.377338875 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.393005629 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.37774492 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.459061051 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.376048464 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.391673212 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.388780563 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.391838011 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.403309522 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.478810175 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.376214834 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.392320262 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.39700124 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.444608887 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.391351538 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.400683459 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.392048989 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.377646984 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.390946495 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.391483998 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.39017734 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.422849718 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.391217065 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.375038284 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.375710795 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.38816555 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.389973201 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.389610777 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.392484579 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.389880612 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.394327735 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.546144669 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.418689527 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.378682894 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.375315058 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.394558504 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.391902877 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.408098834 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.38997495 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.3765945 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.392942243 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.384742881 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.388600537 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.376473635 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.376982483 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.392626316 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.376885615 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.391058845 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.377555165 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.389580366 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.393648286 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.379563873 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.378920611 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.39332641 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.37697657 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.389478733 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.379176464 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.380030629 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.392264091 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.378272087 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.388031229 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.377350301 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.393494598 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.394635499 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.39402684 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.389510741 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.47335528 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.396865642 seconds)
  done (took 174.846253555 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.491353909 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.457923422 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.549898099 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.701429779 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.550711252 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.492063976 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.490731253 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.459445316 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.490328823 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.551334483 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.550273155 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.492905562 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.550082588 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.487323671 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.490908309 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.491729468 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.491367188 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.493552428 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.553322283 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.489420348 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.455560918 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.491379419 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.700989488 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.491897494 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.461911581 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.54860029 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.50641756 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.443370444 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.490699229 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.490733849 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.54987295 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.446021751 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.465459386 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.493080943 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.490157542 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.45561522 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.490312487 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.491455479 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.493414959 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.493939587 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.46629535 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.488203449 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.46207722 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.547388155 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.700815327 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.552841857 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.548401826 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.492202076 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.490923353 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.50971984 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.49391605 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.467987106 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.492493956 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.491341747 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.553763701 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.548690915 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.546316518 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.693863563 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.481966172 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.483677244 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.484290363 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.492480877 seconds)
  done (took 158.122956126 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.408811051 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.286819418 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.276209585 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.413865177 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.215415512 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.407588577 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.248730372 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.408505656 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.410879632 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.408808265 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.23823345 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.409536605 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.232725687 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.3037382 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.411890777 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.410460527 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.220769376 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.410564976 seconds)
  done (took 52.48377728 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.428316567 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.430279891 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.427885045 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.226073143 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.430033843 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.409125538 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.753234794 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.426390848 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.227423625 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.426131548 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.427342062 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.426309062 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.429129606 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.367616988 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.366421825 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.367931167 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.427232091 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.372395291 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.755416583 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.424905387 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.427138756 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.425185824 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.413022267 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.424653951 seconds)
  done (took 70.592980762 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.413042142 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.420680868 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.416240745 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.419169614 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.416002257 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.442380017 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.419590384 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.440613423 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.602119925 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.415040585 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.441854347 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.41975445 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.444660817 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.445202235 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.441448318 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.444166485 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.603704693 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.4205169 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.414611167 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.414677314 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.422793274 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.417361424 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.415045924 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.442265053 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.418272705 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.413151354 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.41827448 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.421670484 seconds)
  done (took 70.623256185 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.435675208 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.408739119 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.440204316 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.488011878 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.488615546 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.441749954 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.417322579 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.429517892 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.418841873 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.432789665 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.490005314 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.491807313 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.480629965 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.434984539 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.419219734 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.409810272 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.448120678 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.405885634 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.405035619 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.418776897 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.446120965 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.411221977 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.416218337 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.49434935 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.411859721 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.410722348 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.479976492 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.442446961 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.489793478 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.45115733 seconds)
  done (took 75.617355368 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.398732218 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.435014721 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.403763718 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.405080361 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.432519233 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.408399342 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.40226309 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.419245093 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.40298767 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.399535608 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.775090597 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.417536523 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.427734501 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.43927863 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.397235728 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.408218379 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.426760583 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.404851414 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.389553916 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.875948521 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.409454036 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.428292449 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.426063696 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.396712704 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.40839423 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.405873209 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.424913454 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.423666697 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.42421006 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.785577656 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.432754835 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.408520426 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.399248542 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.396289372 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.406179066 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.432168302 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.7841749 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.880409653 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.415565699 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.404495768 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.396330833 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.432778296 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.39239955 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.42297884 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.394638541 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.395702526 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.39381944 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.39320434 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.417783245 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.420610061 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.393303814 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.42923912 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.425343323 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.401806924 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.764018868 seconds)
  done (took 137.39297532 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.43162241 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.412421345 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.415751167 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.411370386 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.411040937 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.435052327 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.428843087 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.475104941 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.461704913 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.412218169 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.416882745 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.46242404 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.416097716 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.214396773 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.413514935 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.40834553 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.415002853 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.263745272 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.411944786 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.413086894 seconds)
  done (took 52.483947366 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.428422486 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.427050447 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.416874005 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.42904875 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.460669556 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.420920122 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.823789048 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.465314386 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.47089214 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.469615902 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.886232582 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.393815984 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.397134782 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.818168441 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.423737304 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.408593126 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.418008394 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.42130698 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.421119174 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.407107805 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.884464216 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.428352949 seconds)
  done (took 57.476410014 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.414099576 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.592073919 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.520894994 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.535871202 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.416338316 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.471238689 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.472611759 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.54271397 seconds)
  done (took 22.321249256 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.389235396 seconds)
    (2/2) benchmarking "in"...
    done (took 2.392342213 seconds)
  done (took 7.135108262 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.616412555 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.514940026 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.440320586 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.656862227 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.725897066 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.975120497 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.588143647 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.061702287 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.505155031 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.503086357 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.390057787 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.026452111 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.485105693 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 3.947306125 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.407471065 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.411032053 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.310874456 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.460773775 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.551514902 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.731414896 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.770229694 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.52045659 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.390877889 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.799868144 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.986047638 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.478740878 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.6079727 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.398594068 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.466824832 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 3.94173378 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.248889703 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.261558489 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.781138672 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.745106579 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.454326845 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.810374226 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.454707283 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.400601997 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.47488764 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.203182263 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.669780472 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.218330654 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.557059142 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.501061356 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.437872689 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.259954901 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 3.999908923 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.389984549 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.388491281 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.391712522 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.355981816 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.946677111 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.601157526 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.443452019 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.850659843 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.228847298 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.392522941 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.927344139 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.630632008 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.247138118 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.071078735 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.228497377 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.266468292 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.215033032 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.961678784 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.530864315 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.392077832 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.389026272 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.387541753 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.393753798 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.243966221 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.25853769 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.316884322 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.211252123 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.159742304 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.587682962 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.411764749 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.442650207 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.0967863 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.528792622 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.347646179 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.923957429 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.455332494 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.065682491 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.340117521 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.612259944 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.618319357 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.503068841 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.39424869 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.395754125 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.084645374 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.513943388 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.1551897 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.10638365 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.822532861 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.757687061 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.565673332 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.392680947 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.390364424 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.805861787 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.219099863 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.029691068 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.578682154 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.501476522 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.393345697 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.444993241 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.973069419 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.496525219 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.549007015 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.916564896 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.857625983 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.540467885 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.474341554 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.308963106 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.918109895 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.006820388 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.906517705 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.542617513 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.386697211 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.77849261 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.453781179 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.390473999 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.392103218 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.392582808 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.265782218 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.439926566 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.256712542 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.420185884 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.356030091 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.643510846 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.590510157 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.476553604 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.508581022 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.391006942 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.393385906 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.392388858 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.068757486 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.290533078 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.435266113 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.391481597 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.837642448 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.011750031 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.535310815 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.88130197 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.037067704 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.924288707 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.380717396 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.186210119 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.159789597 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.519336406 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.421219253 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.771147698 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.512597851 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.394839026 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.395363609 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.869209626 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.501470638 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.456904723 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.392671488 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.28445721 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.454895395 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.397657607 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.663694231 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.043814515 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.500508597 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.209319187 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.829528893 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.483300964 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.448116081 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.391044326 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.59852456 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.525185609 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.393473922 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.394867505 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.392943426 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.433240138 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.616383548 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.542774908 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.394861127 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.178022309 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.51811118 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.110011855 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.210218354 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.084288239 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.212949362 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.065133562 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.308219331 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.277187872 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.697349593 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.504315615 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.925119482 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.399757861 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.39258265 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.01168384 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.533900844 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.714245456 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.459580671 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.198472619 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.21306563 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.40933842 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.592229589 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.259100889 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.916119128 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.927544663 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.455807516 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.255235869 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.429234877 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.121222688 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.523079365 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.062207788 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.564632679 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.730869016 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.173119905 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.218264574 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.39163435 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.390311236 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.309603272 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.455960848 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.237894454 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.743114906 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.468288634 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.766147448 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.748314116 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.722743264 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.538604376 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.389508431 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.080318274 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.717716671 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.339292484 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.017377325 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.808179204 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.499224438 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.450777021 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.40513926 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.642549752 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.034663928 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.294415989 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.527761404 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.424799772 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.408050212 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.228399274 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.446946704 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.392396975 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.188423586 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.997230609 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.784256334 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.63485392 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.714038298 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.826275484 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.573723644 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.51854442 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.502185444 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.010766364 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.524842765 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.87962408 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.708849939 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 4.009261469 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.399301451 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.24345102 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.78388008 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.632030104 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.402850733 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.395204461 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.085314835 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.196926016 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.182467329 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.911727109 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.825170013 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.595903089 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.429233262 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.81290075 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.418665979 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 3.979425066 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.440758481 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.39634705 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.928726629 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.2280949 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.399118657 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.396117673 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.678076642 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.198447764 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.729875525 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.592496719 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.267748555 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.455757923 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.589937653 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.714571582 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.815037276 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.212499779 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.957975189 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.647376519 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.458876704 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.528934626 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.410331903 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.145721586 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.639789499 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.931130578 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.131285046 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.937018606 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.535521694 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.77192982 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.670930317 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.399592361 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.408901085 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.26004033 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 3.994380943 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.676209808 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.696980327 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.825169093 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 3.98660311 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.788807083 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.963142286 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.117093795 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.14804041 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.540573873 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.826100622 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.230401077 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.402203998 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.398027131 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.397807767 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.468902235 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.749166428 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.464418473 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.563586964 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.883107108 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.661071062 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.259646159 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 3.998816798 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.362927486 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.132563538 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.98144152 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.570317718 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.812114981 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.843085598 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.866049837 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.817070696 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.515270672 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.254734418 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.522119752 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.229526247 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.185953696 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.20171505 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.836127869 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.468677497 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.073790739 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.543090466 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.724580371 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.465779576 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.536227636 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.54201163 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.216283915 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.524505384 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.608645722 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.840968604 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.514701607 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.400031709 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.399939598 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.40527829 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.741075284 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.434001749 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.474211658 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.498494536 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.530358821 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.97040406 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.845109461 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.934928327 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.526373109 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.394673567 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.659137888 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.01668759 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.719280353 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.882126964 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.704480278 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.169077175 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.71680437 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.050968471 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.643110592 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.78935288 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.413372776 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.464500503 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.395632971 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.395623643 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.0646274 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.535380433 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.398818693 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.443670432 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.46550769 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.535718651 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.396387683 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.31754057 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.048718665 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 3.938482137 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.311839276 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.123999641 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.531640635 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.396975135 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.397192556 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.261194092 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.383021954 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.393042931 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.637877721 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.29175313 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.449393298 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.097362833 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.215636743 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.085466114 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.148462741 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.21989138 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.39591683 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.816079223 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.721013602 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.746481634 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.463238057 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.456507393 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.510539081 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.398181192 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.07886052 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.024751894 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.657781011 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.397873767 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.392075631 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.71930419 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.518787281 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.786356965 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.51937818 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.398345279 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.468673914 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.825377784 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.577787158 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.397499148 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.396493605 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.786703524 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.54157826 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.290309512 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.606702534 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.534450843 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.699783477 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.586041827 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.089424474 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.978929321 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.572954981 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.982901496 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.660861861 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.395121329 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.366823853 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.842065274 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.235020204 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.972578336 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.146946238 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.454321364 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.039622291 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.491474786 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.677953033 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.549718741 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.182260607 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.518308531 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.913561128 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.014996901 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.496593768 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.395228568 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.719213497 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.456802118 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.735436507 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.413345727 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.513283996 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.530856884 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.405503887 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.638871481 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.396919667 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.40453814 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.736674821 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.467886143 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.222397302 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.796737865 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.405623956 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.396871107 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.394126455 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.401113477 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.855983499 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.399628768 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.505693129 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.30778814 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.751130559 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.180074363 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.548623516 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.500766219 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.669584098 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.3187163 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.261531252 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.802727736 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.399281262 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.563197166 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.739013858 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.369336947 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.915790314 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.917712432 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.473229289 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.397801695 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.400180975 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.108037418 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.349962248 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.409817737 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.40179641 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.77747949 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.999206154 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.520618952 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.396132877 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.397192007 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.403746596 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.499188335 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 3.955635911 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.405960897 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.134104364 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.531801963 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.400689712 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.228523157 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.780456494 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.654185941 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 4.017704218 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.408841691 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.385962607 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.8747543 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.659461616 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.99217192 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.563631035 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.20306815 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.590616464 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.373283204 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.426283622 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.402428703 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.405183383 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.012902601 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.522833073 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.401981798 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.403840996 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.851471497 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.666585983 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.47652436 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.436689127 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.428809115 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.549262223 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.263042709 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.4551491 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.796379996 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.383646942 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.795334197 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.689132053 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.715477317 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.464655694 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.532123373 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.688556703 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.548008144 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.435835146 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.429500591 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.486476631 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.442147912 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.439813208 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.383965552 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.562518136 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.395186118 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.464624199 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.946685656 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.409813407 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.51798489 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.151610615 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.820870723 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.095744252 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.719946065 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.507007608 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.520641313 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.441033315 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.527642982 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.397513559 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.611767701 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.808547035 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.546668112 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.725560365 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.82253145 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.545610268 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.405548311 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.940097859 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.897231993 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.695950707 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.450275843 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.401431978 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.394860029 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.369036483 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.66408911 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.573904451 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.509370923 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 4.962761227 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.076349551 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.920988365 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.516274732 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.044995509 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.15503111 seconds)
  done (took 1917.973005337 seconds)
done (took 3921.638952811 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.591408628 seconds)
    (2/7) benchmarking "month"...
    done (took 2.499559079 seconds)
    (3/7) benchmarking "year"...
    done (took 2.486835446 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.402364984 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.419438869 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.411892347 seconds)
    (7/7) benchmarking "second"...
    done (took 2.41124313 seconds)
  done (took 19.582416035 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.028553249 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.882348029 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.836692882 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.964072615 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.419175473 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.203671303 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.395476876 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.114924784 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.196818473 seconds)
  done (took 28.400248572 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.490494613 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.408968743 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.414396781 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.421035915 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.611868245 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.537660265 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.425441085 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.53676128 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.575091224 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.604755805 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.558517636 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.405679857 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.577296665 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.601957744 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.53143178 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.564411132 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.410590194 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.567271388 seconds)
  done (took 47.604610673 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.385178418 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.385980961 seconds)
  done (took 7.135812388 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.398702325 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.404439277 seconds)
  done (took 7.164252824 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.517367364 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.518122632 seconds)
  done (took 9.396120193 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.895729339 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.397460366 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.394471792 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.401282146 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.655817665 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.824942138 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.716726215 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.395973376 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.3966839 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.400198809 seconds)
  done (took 27.904572471 seconds)
done (took 150.31580304 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.355887068 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.456860083 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.914124321 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.581891758 seconds)
done (took 32.676796943 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.538373184 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.536176478 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.626870657 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.665443692 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.632158073 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.923122495 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.626898817 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.505275344 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.621143143 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.538176986 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.52033709 seconds)
  done (took 31.09355972 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.532783002 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.537518084 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.634375286 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.634029851 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.644203246 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.285077657 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.629463842 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.578074951 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.636840458 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.558428055 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.649312382 seconds)
  done (took 33.679864322 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.438986705 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.466029603 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.47246501 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.541161541 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.476441443 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.521870088 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.478750822 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.49715208 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.505921946 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.432114025 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.474882644 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.416828437 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.651589869 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.49041971 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.425183451 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.740491146 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.260843686 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.493388708 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.492389442 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.631044596 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.437246116 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.474117438 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.423391178 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.517655576 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.414427193 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.414138664 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.397860236 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.52181054 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.480937879 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.457528237 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.494057944 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.428137738 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.536506703 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.41217899 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.47310635 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.411781417 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.469177019 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.951121797 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.454757401 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.430535096 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.510445997 seconds)
  done (took 109.380400685 seconds)
done (took 176.521482223 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.81856525 seconds)
    (2/2) benchmarking "read"...
    done (took 2.885165696 seconds)
  done (took 8.061983423 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.512641532 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.761975079 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.558430232 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.535568156 seconds)
  done (took 25.2198586 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.358539419 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.672091955 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.562876465 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.477542387 seconds)
  done (took 27.428905008 seconds)
done (took 70.586580693 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.369226802 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.372063939 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.369562498 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.369960218 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.371144909 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.372614993 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.369308054 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.372506743 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.370890175 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.375010265 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.373015975 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.372700862 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.371498799 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.374302135 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.376937968 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.374944622 seconds)
  done (took 40.316028 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.372538748 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.372291867 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.383103873 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.373178313 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.371083684 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.371374872 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.37144091 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.370102539 seconds)
  done (took 21.345046741 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.374023898 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.369746926 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.370936876 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.372089632 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.373412068 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.372899586 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.369460997 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.375201789 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.374423062 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.374506262 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.374737359 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.372282878 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.375469868 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.378169435 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.372575371 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.374800981 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.501748194 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.39139772 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.376376772 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.381787911 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.377974061 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.379507224 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.371500649 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.370754514 seconds)
  done (took 59.485132398 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.397628746 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.831886459 seconds)
  done (took 7.589365563 seconds)
done (took 131.098935797 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.489604202 seconds)
    (2/2) benchmarking "String"...
    done (took 2.563179653 seconds)
  done (took 7.410119717 seconds)
  (2/7) benchmarking "join"...
  done (took 7.417172384 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.536883653 seconds)
    (2/4) benchmarking "different"...
    done (took 2.465524751 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.669658964 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.532040465 seconds)
  done (took 12.572868037 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.354767593 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.153103981 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.35471238 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 2.984720904 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.826121202 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.567212152 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.033297884 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.183998224 seconds)
  done (took 33.469169327 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.68066249 seconds)
    (2/3) benchmarking "different"...
    done (took 2.425843506 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.410604066 seconds)
  done (took 9.889864795 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.546696697 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.515479333 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.158594303 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.578767461 seconds)
  done (took 16.164233583 seconds)
done (took 92.665699731 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.417625324 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.399024398 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.413475403 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.905508785 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.189262762 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.411271464 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.455071174 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.400334252 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.494081976 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.624483909 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.589374098 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.269655226 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.394930783 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.360230215 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.676043482 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.412392548 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.398997273 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.467387667 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.398555631 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.554896518 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.413359015 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.398056709 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.420108486 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.409169401 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.480553913 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.428372137 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.397304567 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.420512126 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.398044427 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.398237663 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.479914271 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.407737745 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.906718259 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.208077089 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.699286834 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.174439036 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.164668595 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.419614863 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.427717036 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.424999609 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.366294362 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.989464333 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.554002251 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.463940761 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.418501182 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.418270215 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.397615757 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.41797841 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.7528214 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.996015957 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.495886376 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.136858121 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.360344911 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.6297764 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.411936805 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.429119316 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.480129664 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.898259897 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.207678348 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.395544161 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.42688865 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.398612324 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.417751782 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.46948514 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.900631965 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.180358059 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.701807187 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.135481923 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.458940651 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.500004354 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.105664314 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.901629588 seconds)
  done (took 208.888785524 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.774405448 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.450975534 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.035904759 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.794643843 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.025217092 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.518484837 seconds)
  done (took 20.74448546 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.418771375 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.411122731 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.403955082 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.713227275 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.492707584 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.433191202 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.407466139 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.411230058 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.454042219 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.43941282 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.425709696 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.40226298 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.406389253 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.358795589 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.664413207 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.426979347 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.406692176 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.422094119 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.696829864 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.417118141 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.406682222 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.4212197 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.655413179 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.418469215 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.417123219 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.465495637 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.493913567 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.457439633 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.429822026 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.688379206 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.417382821 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.544885028 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.446286878 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.410953319 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.426414619 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.699235248 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.588167201 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.657663431 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.362848326 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.361273762 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.595851626 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.244676587 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.273289111 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.828392968 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.659002802 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.478782088 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.428293918 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.587797413 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.366046385 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.244199831 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.402501888 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.421069659 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.554860977 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.367705225 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.561026486 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.531170443 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.41983566 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.361221719 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.417585516 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.411791028 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.414790509 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.431075583 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.591309807 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.428323885 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.39974841 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.618540659 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.658351049 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.360315245 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.123223368 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.422361052 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.40928525 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.570291772 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.558256643 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.420758896 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.554966013 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.42638329 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.462645716 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.36643084 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.532076367 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.306513624 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.674274867 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.366083619 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.413341272 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.426927809 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.364855419 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.42626044 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.68843334 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.418576818 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.266189352 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.441105894 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.3589012 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.48104884 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.097355469 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.418214968 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.705115024 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.654686259 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.717628278 seconds)
  done (took 306.540034805 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.61739417 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.71079602 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.960597012 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.71192808 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.502281409 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.709433832 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.022324206 seconds)
  done (took 21.600284364 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.56767652 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.743579063 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.365141266 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.358320152 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.360963626 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.562035847 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.359224463 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.680256745 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.589775809 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.743692724 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.630437047 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.758256877 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.362155879 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.360906366 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.36391036 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.5837095 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.461365241 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.587585573 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.359748976 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.358794964 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.57157802 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.546804861 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.592890673 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.361774449 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.425415474 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.363179707 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.360004967 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.642543559 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.564272806 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.607234213 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.364952204 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.704446841 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.680038923 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.589350972 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.36850978 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.526775675 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.682133928 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.676605166 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.602050029 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.412844507 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.5483041 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.452732554 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.599570397 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.524658674 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.653084548 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.534414459 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.525698585 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.697215048 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.362710486 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.405409489 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.549110483 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.365043477 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.55642288 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.426515948 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.583774582 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.750479305 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.565053819 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.355807714 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.541153419 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.365470973 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.664413574 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.363862615 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.373577035 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.362940364 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.610055147 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.362409597 seconds)
  done (took 278.294955272 seconds)
done (took 838.855963068 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.266542402 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.791016086 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.394696244 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.435613543 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.368720558 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.712792178 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.780857587 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.352518885 seconds)
done (took 47.470338534 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.404056503 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.40544219 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.415890099 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.409510474 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.406867426 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.406129855 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.367318241 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.816940105 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.405211038 seconds)
  done (took 29.40242248 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.367435834 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.677243544 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.371225356 seconds)
  done (took 23.782714769 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.498171293 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.6681485 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.505931288 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.618747732 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.828863324 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.63337662 seconds)
  done (took 18.121023459 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.374537772 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.373168087 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.368710511 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.371805846 seconds)
  done (took 31.856924594 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.765476645 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.448928241 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.489600998 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.76307153 seconds)
  done (took 12.833863837 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.498759127 seconds)
done (took 121.878426467 seconds)
(18/23) benchmarking "parallel"...
done (took 2.754171067 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.195702866 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.234459499 seconds)
    (3/36) benchmarking "trsv"...
    done (took 4.04489288 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.813708217 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.134568293 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.439257451 seconds)
    (7/36) benchmarking "symv!"...
    done (took 4.262628821 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.4899723 seconds)
    (9/36) benchmarking "trmv"...
    done (took 4.048880111 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.449916239 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.60067501 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.382163915 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.48959092 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.835648674 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.411900094 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.444415701 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.155258 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.449686975 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.369913506 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.423207222 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.427430528 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.415643934 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.512575265 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.292350955 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.40459364 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.591578214 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.739063134 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.402049604 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.413622576 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.369434282 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.370606279 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.787852382 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 4.01586308 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.856091969 seconds)
    (35/36) benchmarking "symv"...
    done (took 3.938787872 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.580194231 seconds)
  done (took 197.163052858 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.436126962 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.483338772 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.37587645 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.462608599 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.400001049 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.369899995 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.52893458 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.373940028 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.371926497 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.369722867 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.382696283 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.441496342 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.362279165 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.390941687 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.389248005 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.342036725 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.44063809 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.395815448 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.417933876 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.404151241 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.600357007 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.2402865 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.855305932 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.389701325 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.376056264 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.435069326 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.402270567 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.378152652 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.488188998 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.081936051 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.360371948 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.520269315 seconds)
  done (took 218.631239416 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.46933051 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.367085396 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.367195233 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.367232372 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.369280661 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.372942762 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.370353863 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.505390399 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.361871751 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.366299463 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.870071343 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.365829457 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.364966025 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.370270531 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.367230725 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.368014507 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.373068206 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.368599679 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.736602599 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.379622471 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.364836613 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.369976476 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.442477982 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.754551832 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.740289244 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.410632396 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.366759415 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.364294801 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.370299193 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.972821865 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.425175485 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.370069873 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.371841461 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.384250792 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.369621407 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.369079954 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.370084315 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.369842632 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.445148182 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.425892987 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.381634782 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.363476447 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.367503233 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.364375715 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.364984212 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.421325595 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.585044301 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.974200939 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.370231136 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.435530137 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.571347523 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.374269949 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.969775246 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.489301889 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.368955555 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.370141915 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.942773635 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.365987998 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.377714735 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.36768659 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.403945696 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 25.413371936 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.371032027 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.487967972 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.184416816 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.377668808 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.208976637 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.36892201 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.971226372 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.372728926 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.097035562 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.368913149 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.369196364 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.429581347 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.065140033 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.364610783 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.440637209 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.051085562 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.365410786 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.445528647 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.361288541 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.363367807 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.364165659 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.402861031 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.831578626 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.43255615 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.362558708 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.367818897 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.417643758 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.040622467 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.369093994 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.368789602 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.364895354 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.359349164 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.367486593 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.36866821 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.36719305 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.363449864 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.367146772 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.361008982 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.424749583 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.404235333 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.377291014 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.990759822 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.362086973 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.365083691 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 25.408976239 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.359691111 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.427295544 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.372706972 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.366768627 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.366624564 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.601933911 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.394104996 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 25.363968901 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.420754181 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.361505726 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.741682037 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.372076248 seconds)
  done (took 483.505564234 seconds)
done (took 904.142193105 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.563494793 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.640365912 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.526515343 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.487887578 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.555377556 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.928753284 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.97229065 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.274344573 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.600978325 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.543754941 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.651724204 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.772575758 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.52609857 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.506176315 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.401769115 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.508511715 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.559125988 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.52244666 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.458975762 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.478349497 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.015543772 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.643522799 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.156675188 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.775287694 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.452506127 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.465411971 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.524433517 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.530096481 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.060940388 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.30099837 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.008944043 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.498399103 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.438911309 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.539236708 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.547265229 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.513715646 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.558196381 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.439418247 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.498003907 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.491917397 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.412053282 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.901864426 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.583520702 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.334854569 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.359838138 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.816356075 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.401476934 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.467430443 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.439677511 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.488177634 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.426559589 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.871628265 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.010462228 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.628521016 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.644680369 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.577345362 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.716405237 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.562167846 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.566267857 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.572479739 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.526202562 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.214232269 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.70179704 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.653370018 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.531476869 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.527075782 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.471823154 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.874341127 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.41313598 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.514010416 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.521976493 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.443310267 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.088227216 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.771628482 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.551551336 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.628047133 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.630307587 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.648057659 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.210310697 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.957043196 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.825526719 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.90068286 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.628480274 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.635239705 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.823070583 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.507547751 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.562562062 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.515550976 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.431731262 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.520442994 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.423714694 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.936163341 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.703362704 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.706709627 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.694479991 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.637904445 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.66179686 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.783781648 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.608252241 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.56378416 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.293421011 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.700109152 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.645713459 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.505847767 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.507138933 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.466986204 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.555632519 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.449425428 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.428520442 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.89904856 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.458269276 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.340097044 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.763059643 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.70278062 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.874596472 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.643675533 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.34686098 seconds)
  done (took 341.613451051 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.630620281 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.39432614 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.529100014 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.385306998 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.374005354 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.381000588 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.37991945 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.363374784 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.483495774 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.370320864 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.37626281 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.375120169 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.371783873 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.373528795 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.598151596 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.383981371 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.369640289 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.369925572 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.369876212 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.374975128 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.376594662 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.368790516 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.054426025 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.460694904 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.369539229 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.369306923 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.082773044 seconds)
  done (took 182.841236118 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.45194167 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.862578133 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.62835372 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.712258283 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.785565236 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.7066759 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.440820527 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.443506343 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.50550731 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.646129892 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.372971862 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.822680907 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.414689644 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.752932628 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.434189493 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.436406231 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.454051939 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.405652844 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.478065202 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.615013666 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.498189912 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.436253167 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.683584974 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.449712192 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.435304665 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.593862404 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.604190512 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.602466454 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.539076692 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.622484655 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.796369523 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.426631461 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.407544677 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.466831289 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.507209719 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.579840912 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.496113282 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.779471751 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.422849362 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.610576803 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.416824329 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.78311562 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.416835699 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.453118198 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.593108912 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.51348848 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.837050233 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.973114502 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.664268845 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.442583796 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.431143058 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.525090103 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.785397156 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.651374134 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.801180164 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.410999263 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.830797686 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.794357802 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.681735972 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.403654877 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.647681387 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.431206789 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.428098315 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.485989122 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.898407734 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.593748592 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.798003442 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.70277168 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.43937839 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.889122612 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.449857857 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.641600836 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.143443886 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.541662242 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.105560582 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.570351154 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.412290985 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.449125153 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.446459746 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.709794939 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.435507274 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.509227042 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.464613876 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.526051707 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.578032463 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.536108886 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.733675226 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.885055885 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.476330803 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.780377206 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.985493763 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.713810665 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.420962018 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.501586627 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.409485393 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.524498911 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.584239762 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.754317803 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.864828546 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.711568326 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.231096406 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.9060674 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.416255517 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.492273149 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.434775003 seconds)
  done (took 284.768869762 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.52748487 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.623362352 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.925810297 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.750598628 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.789302873 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.572411913 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.49660627 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.441154919 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.559255683 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.350493739 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.522761516 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.486676274 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.669063345 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.887906598 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.64499615 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.037724467 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.443182238 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.906488988 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.590693588 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.516472038 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.070301121 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.438379361 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.697881895 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.604468562 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.376962141 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.671230681 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.706168039 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.576164851 seconds)
  done (took 83.25054219 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.450108003 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.483567763 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.408427196 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.517186692 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.526557914 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.502266669 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.464615576 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.898983272 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.475415326 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.456401835 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.561120239 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.656395656 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 3.204931938 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.569757304 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.456030974 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.574343572 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.654118028 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 3.020875392 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.619744656 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 3.052391075 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.461632611 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.509787366 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.463312679 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.425810606 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.463844821 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.422941968 seconds)
  done (took 69.683250672 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.518126639 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.399521959 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.592973571 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.663905019 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.916406593 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.563625051 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.79849096 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.404285701 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.57956202 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.476603683 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.468012535 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.939425454 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.584467645 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.93264896 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.51795339 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.481076018 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.872089188 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.495972054 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.752090546 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.556109359 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.015736371 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.517718294 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.620720758 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.615125958 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.518488883 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.574221481 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.487135349 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.912152758 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.511094843 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.536740342 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.654997913 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.503295755 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.025729072 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.487972247 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.501923391 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.807083859 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.571794084 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.907578841 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.521598739 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.380679295 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.5092469 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.575812378 seconds)
  done (took 121.644039165 seconds)
done (took 1086.172846608 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.539471121 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.413242416 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.384758096 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.394982163 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.419824006 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.398113175 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.383054763 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.591485199 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.401230544 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.396943791 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.402009193 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.397232237 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.396824761 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.39647524 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.420457758 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.397677678 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.542994146 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.426212131 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.381865898 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.389631426 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.396618652 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.384425451 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.392957928 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.383257367 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.420256412 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.384509228 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.372660035 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.405228115 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.389979939 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.409899957 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.393101184 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.397985047 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.394741005 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.393307832 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.401653995 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.396476893 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.382453884 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.39386991 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.389156468 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.388643805 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.380542557 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.398789249 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.403145272 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.439102254 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.415855965 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.39631603 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.393075889 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.407539797 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.510149556 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.396857301 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.39801237 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.390479212 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.391155388 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.387067216 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.38387891 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.404013811 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.386978097 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.388999262 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.412437875 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.383951286 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.414135571 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.373655007 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.417912083 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.37916169 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.384399627 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.38406593 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.393834094 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.385886576 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.386496352 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.375614733 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.387105833 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.423021158 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.390337606 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.402561589 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.390234052 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.388599703 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.416083472 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.408264026 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.394401588 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.389940364 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.391416031 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.401708613 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.411550782 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.499622689 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.407298004 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.38741007 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.421004431 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.388040057 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.414372975 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.416367681 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.393901535 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.390953353 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.385991387 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.388990834 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.380546924 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.393183601 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.413649501 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.409611843 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.402217906 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.39625626 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.411781028 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.400267027 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.422342847 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.393835173 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.372251623 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.409478506 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.400019035 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.406439935 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.399794427 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.498698411 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.407878299 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.41576068 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.384799199 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.384376855 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.380390411 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.384783491 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.386011386 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.379357193 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.590546021 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.388378685 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.378040729 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.390040801 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.372477379 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.385309053 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.382181775 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.382457142 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.380171663 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.39180864 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.449316259 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.435611239 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.393377773 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.395171378 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.407358555 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.389926355 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.384955073 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.393239036 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.407137355 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.387321848 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.390963404 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.396605731 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.399505895 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.388902595 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.414444357 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.415441652 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.384304837 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.392860382 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.378523939 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.388346231 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.406905635 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.391617748 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.382159324 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.393485253 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.383611914 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.378657977 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.408010827 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.377323405 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.388638472 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.386714594 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.382757169 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.387605965 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.410390556 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.419065059 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.385927503 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.379559341 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.381450838 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.38745455 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.384857609 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.389242403 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.390426317 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.380516174 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.412952538 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.405887398 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.387698755 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.415696712 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.379772461 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.38671543 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.41089847 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.407275004 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.417110863 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.388839992 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.421746619 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.42035039 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.385248268 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.414599027 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.395658954 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.411957676 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.379064817 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.383245032 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.378227281 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.386378172 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.37987801 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.409361378 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.385078985 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.38839585 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.397625987 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.388676838 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.39273818 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.397615508 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.388596075 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.526923279 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.390493653 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.411123858 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.381711806 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.39137889 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.385411568 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.380322271 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.399623698 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.384397421 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.394616322 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.399868754 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.37382679 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.398446593 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.399743176 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.386702899 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.3993456 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.39125243 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.399789541 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.374970845 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.42005625 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.389762252 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.38869292 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.387092075 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.379584187 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.387731056 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.389060354 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.384616604 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.411491848 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.399065774 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.397802067 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.389914326 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.533515961 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.397780459 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.397929462 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.382993185 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.385853149 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.389849428 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.388220057 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.384273225 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.399645638 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.389280957 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.377575342 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.379688315 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.387970896 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.378993366 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.402560655 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.407475783 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.380742746 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.385146248 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.384349751 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.393545641 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.392109762 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.400366545 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.387198603 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.390186154 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.389250144 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.405269725 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.389138922 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.379716063 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.385165798 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.3918168 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.3949786 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.537862845 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.428047473 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.383515766 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.401159843 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.382642475 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.394898134 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.391742319 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.380881561 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.404918249 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.378570606 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.383503477 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.390982588 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.411540115 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.379688071 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.390445192 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.406825918 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.380053305 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.383666898 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.375856282 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.427087706 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.389723503 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.405108348 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.38963102 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.383176724 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.39661214 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.382887694 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.392624322 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.392138509 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.395932596 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.38648782 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.379784889 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.38838683 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.385351464 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.395871601 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.388057668 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.37314234 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.389935024 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.387507218 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.385938933 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.386469397 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.38896702 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.436966287 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.387794586 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.385740715 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.419738846 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.432482896 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.385578565 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.38284705 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.382744293 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.435564801 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.387938942 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.376919201 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.402940587 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.415964555 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.390317096 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.39198403 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.389157513 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.402110721 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.386476143 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.392564803 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.395946937 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.372781838 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.398902093 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.420271926 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.413291874 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.395025751 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.380879795 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.51375673 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.396383721 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.405669965 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.39337614 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.412056104 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.383962118 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.381424917 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.380892045 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.382750289 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.418101029 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.390572604 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.384223503 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.385611639 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.414694018 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.403645101 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.373197238 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.383759892 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.389863905 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.386266705 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.395276679 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.397459783 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.3759985 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.386119669 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.380716894 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.374531806 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.399252651 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.416509844 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.383773119 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.388047615 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.396998836 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.384572545 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.390160887 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.38658121 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.501915761 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.38200339 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.391394592 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.403148448 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.434689309 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.390809142 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.394845873 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.389897046 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.380345863 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.381542831 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.390251005 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.383489122 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.496002669 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.399925642 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.399264879 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.383850762 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.385767295 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.39980311 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.387111818 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.387670564 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.390378114 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.383600727 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.384894798 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.588579541 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.393248621 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.403348225 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.50307518 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.382885369 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.389484075 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.377931189 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.385316281 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.384843874 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.380633874 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.396954961 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.389696227 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.412415924 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.38890949 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.403810034 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.420972963 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.391188929 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.376400742 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.427149992 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.385409154 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.3910582 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.412655828 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.379602102 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.404601927 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.39442034 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.383950097 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.403948794 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.379458595 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.386482512 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.377189589 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.385014439 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.389095612 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.405907388 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.387735455 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.395912442 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.38787123 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.410593252 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.384887036 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.388069071 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.372994524 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.383844036 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.391856455 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.39185607 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.390740219 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.391777714 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.380935039 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.38642264 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.382143197 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.380213075 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.384896327 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.393408539 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.380333292 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.390820269 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.388252635 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.389565504 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.380550298 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.385518249 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.374365631 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.403592199 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.383425729 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.385526639 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.381359335 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.404153226 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.385319359 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.375869027 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.432630868 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.377402769 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.399286384 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.434312289 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.404049305 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.38590197 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.372978866 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.390360533 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.388459216 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.455144679 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.407593715 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.402889647 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.406859687 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.404181143 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.420083366 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.410701051 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.421990973 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.420482075 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.397143696 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.409805197 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.385391098 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.375993957 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.385321343 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.38367218 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.402608673 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.377015834 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.386912822 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.396706641 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.384929438 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.423145636 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.421264087 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.394282795 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.41133283 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.407417113 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.424194619 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.379850981 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.387448693 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.409376567 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.37243992 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.382709288 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.393485149 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.386221453 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.408104338 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.381323187 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.400433861 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.508271279 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.38776076 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.542435593 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.381002881 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.402318931 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.397736594 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.394249074 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.382566578 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.398353713 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.372548974 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.384295094 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.429191419 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.396376306 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.379152577 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.392727878 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.387253 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.510158239 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.448862278 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.397778731 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.381340596 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.386102656 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.378834572 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.392410632 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.399638803 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.393459183 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.399117341 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.408953191 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.388040757 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.401738144 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.376229815 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.38130953 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.388793475 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.386062518 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.454818974 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.539245374 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.378472796 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.379984124 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.371336728 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.38739743 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.385397926 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.389026825 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.393649678 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.468421876 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.379656926 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.391885873 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.408143767 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.465867366 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.381252189 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.395218285 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.435104158 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.383032811 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.383607741 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.390582727 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.381275211 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.390112616 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.378174436 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.380075278 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.382155125 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.380386575 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.415612941 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.390704678 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.425632971 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.385890677 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.423577178 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.388539671 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.376493092 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.392586203 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.39734039 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.424547036 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.384490995 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.404250789 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.403003878 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.393928839 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.383051756 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.428346182 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.38405321 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.388788359 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.40518311 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.380467147 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.391805553 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.45569928 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.416233682 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.381320913 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.392911441 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.385442473 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.496444436 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.41358141 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.384509087 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.396810708 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.399276642 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.398689687 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.404854866 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.409576147 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.370904446 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.372675405 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.381241211 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.399103345 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.379767429 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.395556793 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.39689687 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.398084216 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.384116005 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.385685562 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.404364129 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.391373484 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.401944396 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.392133208 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.382852823 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.39136054 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.386418788 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.377741005 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.397936001 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.385150119 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.385872524 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.412664115 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.389406551 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.387146338 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.396276483 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.393471912 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.390060663 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.393189096 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.427559107 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.413809589 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.379903465 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.38062289 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.387905692 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.387397898 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.411029149 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.390233268 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.376945354 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.396887271 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.392859866 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.387775083 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.393879869 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.435893031 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.39296015 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.379882655 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.399486134 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.391015013 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.385973235 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.400678246 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.39182132 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.428141976 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.395897772 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.395316712 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.424840758 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.404888545 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.383908708 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.370959357 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.393281852 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.380208402 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.380605229 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.591816923 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.395845206 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.413196876 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.403508356 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.392404957 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.389538241 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.380736106 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.388846649 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.409140801 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.415224643 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.427987762 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.390610866 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.44431397 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.388662515 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.455237369 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.388703824 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.395064626 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.447891999 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.38142732 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.398008059 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.538992959 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.423907615 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.396750013 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.385071425 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.537812787 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.391751357 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.392115621 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.383170663 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.390583941 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.383251981 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.391671702 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.389394792 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.403955587 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.439318944 seconds)
done (took 1634.002278929 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.503245708 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.335635117 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.543335471 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 35.972720938 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.432128747 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.021518933 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.094495892 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.028524336 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.071338033 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.298932173 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.486360749 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.04121016 seconds)
  done (took 439.248807696 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 44.516565801 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.192240085 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 38.16160374 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 36.944550494 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.893396329 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.945379404 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 44.911146932 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.900831604 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.106257205 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.36972788 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 39.724589018 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.255637356 seconds)
  done (took 468.496324619 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 40.704214756 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 39.321709283 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 39.637259129 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.637977944 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.068912197 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 39.867359388 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.019247662 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.558720635 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.238113425 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.894247705 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.412750486 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.825389473 seconds)
  done (took 463.811134161 seconds)
done (took 1373.926042594 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.320426004 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.433373094 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.317680979 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.307887155 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.647943073 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.462026579 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.584358284 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.248475495 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.5418348 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.738236693 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 9.395890074 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.570615644 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.269152367 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 12.083149916 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.861690859 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.293151983 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 13.104247171 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.320254488 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.768996752 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.26926994 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.607235632 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.784767787 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.277372723 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.275747722 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.391752882 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.61537903 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.27385233 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.445987764 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.715303086 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.435872348 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.258662572 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.38344215 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.48890365 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.285442179 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.660782248 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.272164733 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.67232482 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.485218362 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.788378424 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.502577458 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.632897752 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.525586491 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.494163071 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.244726637 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.264492261 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.487387814 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.251366338 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.739571443 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.271004374 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 5.913599352 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.307724473 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.488451881 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.467093657 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.42468037 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.303811256 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.262016412 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.465394257 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.241452699 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.507210804 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.387972751 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.328566836 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.490653952 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.76764546 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.430025721 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.797130202 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 12.747497006 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.313871138 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.49009284 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.249454646 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.713557795 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.45986325 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.598580261 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.329952524 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.900424681 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.461731456 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.333607263 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.311730411 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.582264168 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.247476285 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 16.515984592 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 11.750067326 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.477534505 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.335396661 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.472687632 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.491554717 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.466834547 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.322282241 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.247385828 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 9.914696293 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.265316761 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.300567052 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.418621638 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 9.977139485 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.517623484 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.269990691 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.487819974 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.24962494 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.304123696 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.337732381 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.664673237 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.617227882 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.34866109 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.512154584 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.353638849 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.140177229 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.76351469 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.284609153 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.265966833 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.394919523 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.302991474 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.385429374 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.240161335 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.701594763 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.455643286 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.275028957 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.500688643 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.435855438 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.489347183 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.257755263 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.279461719 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.577208597 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.277827246 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.240975058 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.422481179 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.883947302 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.624994877 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.363406414 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.541018428 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.758918087 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 11.891650893 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.552594422 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.264842824 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 12.733965967 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.782894081 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.267650768 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 9.618231045 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.514300959 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.363216696 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.330029597 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.396594252 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.265328437 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 12.91455285 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.309653179 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.505822551 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.374894698 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.436683197 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.293139238 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.542263374 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.348636614 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.324413699 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.261996353 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.347484931 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.505634787 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.37970455 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.861176298 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.29059393 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 10.239127356 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.494643831 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.466137051 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.279985382 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 18.025493734 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.752741115 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.848674676 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.577314032 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.517927417 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.496066202 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.64213015 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.33618206 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.270323108 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 9.755347814 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.908895392 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 9.765227666 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 6.057707863 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.852861771 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.268939805 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.270111723 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 12.948297999 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.622491613 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.551004292 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.508837932 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.520369334 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.693734115 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.40372464 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.289173276 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.696600654 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.525008687 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.652197147 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.469212368 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.79336443 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.513439219 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.579715582 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.638513154 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.405206948 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.468525404 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.278830341 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.645268092 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.313009891 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.503070134 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.451957014 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.483509984 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.308570841 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.174638981 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 9.708865431 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 11.267475221 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 7.454650936 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.35972174 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.64410862 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.352340649 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.444089887 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.194347224 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.623336205 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.515267006 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.329362847 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.333724623 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.45255407 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.263471307 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.500753598 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.287746293 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.279840416 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.462944139 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.273706449 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.601149256 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.285316318 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.634051168 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.340560194 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.544822392 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.515663415 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.407053833 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.267013112 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.852701911 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.500479245 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.512239896 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.467559043 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.44464332 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.468433596 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.3499199 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.605270044 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 5.928142713 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.756925909 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.335562291 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.36909022 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.328109968 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.32301559 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.252595265 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 9.278754121 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.551734898 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.364348063 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.340728814 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.196832324 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.269736441 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.528209605 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.602718185 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.543667435 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.526145378 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.626947134 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.375422596 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.347464495 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.283829877 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.347014771 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.325120314 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.281155348 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.365569852 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.485173336 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.371756785 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.637451328 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.525858478 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.297846371 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.346444621 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.446070284 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.502765488 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.525406854 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.271061078 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 9.695629556 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.509010603 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.519979357 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 5.96246726 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.273839651 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.289452287 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.350011736 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.400546385 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.268548472 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 12.567819944 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.28780037 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.429613338 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.515414804 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.356041889 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.609393303 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 9.967309835 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.547139035 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.285217397 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.381809684 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.51621795 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.31691993 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.271836427 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.303000006 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.436315696 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 5.999833424 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.613370515 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.502598369 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.263758203 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.193557268 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 10.999415832 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.951855614 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.449917486 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.620422813 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.30377664 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.261977702 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.195685069 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.276375942 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.618746035 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.73183583 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.458999221 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.276764347 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.373104217 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.341389022 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.543501462 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.291324611 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.609908934 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.27037352 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.334983324 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.744930006 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.471650845 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.613319756 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.976930366 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.144566557 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.321224523 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.614535787 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.468005499 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 9.695534794 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.111347639 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.482883223 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.360018115 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.529309178 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.086967079 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.781486069 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.576997456 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.702958146 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.457625487 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 6.269719276 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.343498499 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.346126926 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.478609804 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.339748613 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 8.965129433 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.248265687 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.506604903 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.353820717 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.651712632 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.34889032 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.984392481 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.481898423 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.353704001 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.268473495 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.827630255 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.538817951 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.210489156 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 11.012365018 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.077453834 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.426575409 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.360281048 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.270602633 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.503384556 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.453088393 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.336706275 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.507042428 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.270980193 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.761816219 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.271039002 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.728764552 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.468476564 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.381011486 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.613755053 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.258882094 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.934630738 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.515670737 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.280672868 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 8.868862077 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 6.125955505 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.592278103 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.276788951 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.251500369 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.874114877 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.258770151 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.214499675 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.606531386 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.708631431 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.609618598 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.564780801 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.488909005 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.435389392 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.277600126 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.403271415 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.273364797 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.253782956 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.709571284 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.502283078 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.332077791 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.460957529 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.78850525 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.325798983 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.173594592 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.22588782 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.490993025 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.506658064 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.438607728 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.630785835 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.34179812 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.388908392 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.449122189 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.345480466 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.148568852 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.414024601 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.26593121 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.758197924 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.480543151 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.255516833 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 17.111755775 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 11.803188307 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.502290537 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.475627892 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.612555398 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.302635435 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.371825578 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.332182821 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.252427791 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.718860214 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.294470714 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.478006587 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.552633551 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.278128176 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.715820132 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.336907885 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.168553845 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.62267263 seconds)
  done (took 2877.558062715 seconds)
done (took 2882.813595945 seconds)
SAVING RESULT...
DONE!
